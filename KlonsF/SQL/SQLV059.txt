SET TERM ^ ;

ALTER PROCEDURE SP_LINKEDDOCS_1(
  PSD DATE,
  PED DATE,
  PCLID VARCHAR(15),
  PDOCNR VARCHAR(15))
RETURNS (
  ID INTEGER,
  DETE DATE,
  CLID VARCHAR(15),
  DOCTYP VARCHAR(10),
  DOCST VARCHAR(6),
  DOCNR VARCHAR(15),
  DESCR VARCHAR(80),
  SUMM NUMERIC(15,4),
  PVN NUMERIC(15,4))
AS
BEGIN
  SUSPEND;
END
^

ALTER PROCEDURE SP_REP_PERS_13(
  SDT DATE,
  EDT DATE,
  PAC VARCHAR(8),
  PCLID VARCHAR(15))
RETURNS (
  ID /* TYPE OF COLUMN TREPA1.ID */ INTEGER,
  SPID /* TYPE OF COLUMN TREPA1.SPID */ INTEGER,
  I1 /* TYPE OF COLUMN TREPA1.I1 */ VARCHAR(15),
  NM /* TYPE OF COLUMN TREPA1.NM */ VARCHAR(50),
  DT /* TYPE OF COLUMN TREPA1.DT */ DATE,
  ST /* TYPE OF COLUMN TREPA1.ST */ VARCHAR(6),
  NR /* TYPE OF COLUMN TREPA1.NR */ VARCHAR(15),
  S1 /* TYPE OF COLUMN TREPA1.S1 */ NUMERIC(15,2),
  S2 /* TYPE OF COLUMN TREPA1.S2 */ NUMERIC(15,2),
  S3 /* TYPE OF COLUMN TREPA1.S3 */ NUMERIC(15,2),
  S4 /* TYPE OF COLUMN TREPA1.S4 */ NUMERIC(15,2))
AS
BEGIN
  SUSPEND;
END
^

CREATE PROCEDURE SP_DOCS0_ID
RETURNS (
  NEXTID INTEGER)
AS
BEGIN
  SUSPEND;
END
^
SET TERM ; ^

CREATE GENERATOR GEN_DOCS0_ID;

CREATE TABLE DOCS0 (
    ID INTEGER NOT NULL,
    DETE DATE NOT NULL,
    DOCTYP VARCHAR(10) COLLATE UNICODE_CI,
    DOCST VARCHAR(6) COLLATE UNICODE_CI,
    DOCNR VARCHAR(15) COLLATE UNICODE_CI,
    CLID VARCHAR(15) COLLATE UNICODE_CI,
    DESCR VARCHAR(80) COLLATE UNICODE_CI,
    SUMM MONEY NOT NULL,
    PVN MONEY NOT NULL,
    AC VARCHAR(8) NOT NULL COLLATE UNICODE_CI);

CREATE INDEX DOCS0_CLID
  ON OPSD (CLID);

CREATE INDEX DOCS0_DOCTYP
  ON OPSD (DOCTYP);

CREATE INDEX FK_DOCS0_AC
  ON DOCS0 (AC);


SET TERM ^ ;

CREATE TRIGGER TRIG_DOCS0_BI FOR DOCS0
ACTIVE
BEFORE INSERT
POSITION 0 
AS BEGIN
      IF(NEW."ID" IS NULL) THEN NEW."ID" = GEN_ID("GEN_DOCS0_ID",1);
    END
^


SET TERM ; ^

ALTER TABLE DOCS0 ADD CONSTRAINT PK_DOCS0_ID PRIMARY KEY (ID);

ALTER TABLE DOCS0 ADD CONSTRAINT FK_DOCS0_AC_ACP21_AC FOREIGN KEY (AC) REFERENCES ACP21 (AC);

ALTER TABLE DOCS0 ADD CONSTRAINT FK_DOCS0_CLID_PERSONS_CLID FOREIGN KEY (CLID) REFERENCES PERSONS (CLID);

ALTER TABLE DOCS0 ADD CONSTRAINT FK_DOCS0_DOCTYP_DOCTYP_ID FOREIGN KEY (DOCTYP) REFERENCES DOCTYP (ID);

SET TERM ^ ;

ALTER PROCEDURE SP_DOCS0_ID
RETURNS (
  NEXTID INTEGER)
AS
begin
    nextid = GEN_ID("GEN_DOCS0_ID",1);
    suspend;
end
^

ALTER PROCEDURE SP_LINKEDDOCS_1(
  PSD DATE,
  PED DATE,
  PCLID VARCHAR(15),
  PDOCNR VARCHAR(15))
RETURNS (
  ID INTEGER,
  DETE DATE,
  CLID VARCHAR(15),
  DOCTYP VARCHAR(10),
  DOCST VARCHAR(6),
  DOCNR VARCHAR(15),
  DESCR VARCHAR(80),
  SUMM NUMERIC(15,4),
  PVN NUMERIC(15,4))
AS
begin
    FOR SELECT
        NULL AS ID,
        DETE,
        clid,
        (DocTyp),
        DocSt,
        DocNr,
        Descr,
        summ,
        PVN
    FROM
    (
        SELECT
            NULL AS ID,
            DETE,
            DOCS0.clid,
            DOCS0.DocTyp,
            DOCS0.DocSt,
            DOCS0.DocNr,
            DOCS0.Descr,
            DOCS0.summ,
            DOCS0.PVN
        FROM DOCS0
        WHERE
            DOCS0.ClId = :PCLID AND
            (:PDOCNR is null OR DOCS0.DocNr = :PDOCNR)

        UNION ALL
    
        SELECT
            opsd.id,
            opsd.DETE,
            opsd.clid,
            opsd.DocTyp,
            opsd.DocSt,
            opsd.DocNr,
            opsd.Descr,
            CASE WHEN AP1 = 1 OR AP2 = 1
                THEN -OPSd.Summ
                ELSE OPSd.Summ
            END AS Summ,
            CASE WHEN AP1 = 1 OR AP2 = 1
                THEN -OPSd.PVN
                ELSE OPSd.PVN
            END AS PVN
        FROM
        (
            SELECT 
                OPSd.id, 
                MAX(CASE WHEN AcP21_1.AC IS NULL THEN 0 ELSE 1 END) AS AP1,
                MAX(CASE WHEN AcP21_2.AC IS NULL THEN 0 ELSE 1 END) AS AP2
            FROM
                OPS INNER JOIN OPSd ON OPSd.id = OPS.DocId
                LEFT JOIN AcP21 AS AcP21_1 ON OPS.AC11 = AcP21_1.AC AND AcP21_1.id1 IN ('KA','BA','CN')
                LEFT JOIN AcP21 AS AcP21_2 ON OPS.AC21 = AcP21_2.AC AND AcP21_2.id1 IN ('KA','BA','CN')
            WHERE
                OPSd.DETE BETWEEN :PSD AND :PED AND
                opsd.ClId = :PCLID AND
                (:PDOCNR is null OR opsd.DocNr = :PDOCNR)
            GROUP BY OPSd.id
        ) AS T1 
        INNER JOIN OPSd ON T1.id = OPSd.id

    )
    order by DETE

    INTO :ID, :DETE, :clid, :doctyp, :docst, :docnr, :descr, :summ, :pvn
    do
    begin
        suspend;
    end
end
^

ALTER PROCEDURE SP_REP_PERS_13(
  SDT DATE,
  EDT DATE,
  PAC VARCHAR(8),
  PCLID VARCHAR(15))
RETURNS (
  ID TYPE OF COLUMN TREPA1.ID,
  SPID TYPE OF COLUMN TREPA1.SPID,
  I1 TYPE OF COLUMN TREPA1.I1,
  NM TYPE OF COLUMN TREPA1.NM,
  DT TYPE OF COLUMN TREPA1.DT,
  ST TYPE OF COLUMN TREPA1.ST,
  NR TYPE OF COLUMN TREPA1.NR,
  S1 TYPE OF COLUMN TREPA1.S1,
  S2 TYPE OF COLUMN TREPA1.S2,
  S3 TYPE OF COLUMN TREPA1.S3,
  S4 TYPE OF COLUMN TREPA1.S4)
AS
begin
-- neapmaksātās pavadzīmess, kas izrakstītas pēc :sdt,
--        vai kur ir bijusi kustība pēc :edt
    FOR SELECT
        gen_id(GEN_TREPA1_ID, 1) as ID,
        current_connection as SPID,
        T2.ClId AS i1,
        Persons.Name AS nm,
        T2.dt AS dt,
        T2.DocSt AS st,
        T2.DocNr AS nr,
        T2.BDb AS s1,
        T2.BCr AS s2,
        0.0 AS s3, 
        0.0 AS s4
    FROM
    (
        SELECT ClId, MIN(dt) AS dt, DocSt, DocNr, SUM(TDb) AS BDb, SUM(TCr) AS BCr
        FROM
        (
            SELECT 
                OPSd.ClId AS ClId,
                OPSd.Dete AS dt,
                OPSd.DocSt AS DocSt,
                OPSd.DocNr AS DocNr,
                OPS.Summ AS TDb,
                0.00 AS TCr

            FROM 
                OPSd JOIN OPS ON OPSd.id = OPS.DocId
                INNER JOIN AcP21 ON OPS.AC11 = AcP21.AC
            WHERE 
                OPS.AC11 LIKE :pac AND
                AcP21.id2 IN ('DB','KR') AND
                (:pclid IS NULL OR OPSd.ClId = :pclid)

            UNION ALL

            SELECT 
                OPSd.ClId AS ClId,
                OPSd.Dete AS dt,
                OPSd.DocSt AS DocSt,
                OPSd.DocNr AS DocNr,
                0.00 AS TDb,
                OPS.Summ AS TCr

            FROM 
                OPSd JOIN OPS ON OPSd.id = OPS.DocId
                INNER JOIN AcP21 ON OPS.AC21 = AcP21.AC
            WHERE 
                OPS.AC21 LIKE :pac AND
                AcP21.id2 IN ('DB','KR') AND
                (:pclid IS NULL OR OPSd.ClId = :pclid)

            UNION ALL

            SELECT 
                DOCS0.ClId AS ClId,
                DOCS0.Dete AS dt,
                DOCS0.DocSt AS DocSt,
                DOCS0.DocNr AS DocNr,
                DOCS0.Summ AS TDb,
                0.00 AS TCr

            FROM 
                DOCS0
                INNER JOIN AcP21 ON DOCS0.AC = AcP21.AC
            WHERE 
                DOCS0.Summ > 0.0 AND
                DOCS0.AC LIKE :pac AND
                AcP21.id2 IN ('DB','KR') AND
                (:pclid IS NULL OR DOCS0.ClId = :pclid)

            UNION ALL

            SELECT 
                DOCS0.ClId AS ClId,
                DOCS0.Dete AS dt,
                DOCS0.DocSt AS DocSt,
                DOCS0.DocNr AS DocNr,
                0.00 AS TDb,
                -DOCS0.Summ AS TcR

            FROM 
                DOCS0
                INNER JOIN AcP21 ON DOCS0.AC = AcP21.AC
            WHERE 
                DOCS0.Summ < 0.0 AND
                DOCS0.AC LIKE :pac AND
                AcP21.id2 IN ('DB','KR') AND
                (:pclid IS NULL OR DOCS0.ClId = :pclid)

        ) AS T1

        GROUP BY T1.ClId, T1.DocSt, T1.DocNr
        HAVING MIN(T1.dt) >= :sdt OR MAX(T1.dt) >= :edt

    ) AS T2    
    
    INNER JOIN Persons ON Persons.ClId = T2.Clid
    
    WHERE BDb <> BCr
    ORDER BY i1, dt, nr

    into
        :id, :spid, :i1, :nm, :dt, :st, :nr,
        :s1, :s2, :s3, :s4
    do
    begin
        suspend;
    end
end
^


SET TERM ; ^

GRANT EXECUTE ON PROCEDURE SP_DOCS0_ID TO AIVARS;

GRANT SELECT, INSERT, UPDATE, DELETE, REFERENCES ON DOCS0 TO AIVARS WITH GRANT OPTION;

UPDATE ACPVN
SET PZ1 = 'R1',
    PZ2 = 23,
    PZ2A = 0,
    PZ3 = 8,
    PZ4 = 1,
    PZ5 = 0
WHERE (ID = 'K071');


UPDATE Params
SET PVALUE = '059'
WHERE PNAME = 'version';
