/******************************************************************************/
/***         Generated by IBExpert 2021.11.8.1 10.07.2022 19:47:12          ***/
/******************************************************************************/

SET SQL DIALECT 3;

SET NAMES UTF8;

CREATE DATABASE 'D:\A1-docs\c_net\Klons\KlonsF\DB\base\klons00.fdb'
USER 'AIVARS' PASSWORD 'parole'
PAGE_SIZE 16384
DEFAULT CHARACTER SET UTF8 COLLATION UNICODE_CI;



/******************************************************************************/
/***                                Domains                                 ***/
/******************************************************************************/

CREATE DOMAIN DMAC1 AS
VARCHAR(8);

CREATE DOMAIN DMAC3 AS
VARCHAR(5);

CREATE DOMAIN DMAC4 AS
VARCHAR(8);

CREATE DOMAIN DMAC5 AS
VARCHAR(5);

CREATE DOMAIN DMCLID AS
VARCHAR(15);

CREATE DOMAIN DMDOCTYP AS
VARCHAR(10);

CREATE DOMAIN DMV2 AS
VARCHAR(2);

CREATE DOMAIN MONEY AS
NUMERIC(15,2)
DEFAULT 0;

CREATE DOMAIN T_YESNO AS
CHAR(1)
DEFAULT 'N'
CHECK((VALUE IS NULL) OR (VALUE IN ('N','Y')));



/******************************************************************************/
/***                               Generators                               ***/
/******************************************************************************/

CREATE GENERATOR GEN_BAL0_ID;
SET GENERATOR GEN_BAL0_ID TO 0;

CREATE GENERATOR GEN_BALA21_ID;
SET GENERATOR GEN_BALA21_ID TO 0;

CREATE GENERATOR GEN_BALA2_ID;
SET GENERATOR GEN_BALA2_ID TO 427;

CREATE GENERATOR GEN_BALA3_ID;
SET GENERATOR GEN_BALA3_ID TO 143;

CREATE GENERATOR GEN_DOCS0_ID;
SET GENERATOR GEN_DOCS0_ID TO 0;

CREATE GENERATOR GEN_LOGX_ID;
SET GENERATOR GEN_LOGX_ID TO 0;

CREATE GENERATOR GEN_LOPSD_IDL;
SET GENERATOR GEN_LOPSD_IDL TO 0;

CREATE GENERATOR GEN_LOPS_IDL;
SET GENERATOR GEN_LOPS_IDL TO 0;

CREATE GENERATOR GEN_LXOP_ID;
SET GENERATOR GEN_LXOP_ID TO 0;

CREATE GENERATOR GEN_OPSD_ID;
SET GENERATOR GEN_OPSD_ID TO 0;

CREATE GENERATOR GEN_OPS_ID;
SET GENERATOR GEN_OPS_ID TO 0;

CREATE GENERATOR GEN_PARAMS_ID;
SET GENERATOR GEN_PARAMS_ID TO 10328;

CREATE GENERATOR GEN_PERSONTYP_ID;
SET GENERATOR GEN_PERSONTYP_ID TO 2;

CREATE GENERATOR GEN_ROPS1A_ID;
SET GENERATOR GEN_ROPS1A_ID TO 0;

CREATE GENERATOR GEN_ROPS2A_ID;
SET GENERATOR GEN_ROPS2A_ID TO 0;

CREATE GENERATOR GEN_ROPS2B_ID;
SET GENERATOR GEN_ROPS2B_ID TO 0;

CREATE GENERATOR GEN_ROPS3A_ID;
SET GENERATOR GEN_ROPS3A_ID TO 0;

CREATE GENERATOR GEN_TABLE1_ID;
SET GENERATOR GEN_TABLE1_ID TO 0;

CREATE GENERATOR GEN_TREM_ID;
SET GENERATOR GEN_TREM_ID TO 0;

CREATE GENERATOR GEN_TREPA1_ID;
SET GENERATOR GEN_TREPA1_ID TO 0;

CREATE GENERATOR GEN_TREPAPAN_ID;
SET GENERATOR GEN_TREPAPAN_ID TO 0;

CREATE GENERATOR GEN_TREPDARZ1_ID;
SET GENERATOR GEN_TREPDARZ1_ID TO 0;

CREATE GENERATOR GEN_TREPDARZ2_ID;
SET GENERATOR GEN_TREPDARZ2_ID TO 0;

CREATE GENERATOR GEN_TREPDOCS1_ID;
SET GENERATOR GEN_TREPDOCS1_ID TO 0;

CREATE GENERATOR GEN_TREPDOCS2_ID;
SET GENERATOR GEN_TREPDOCS2_ID TO 0;

CREATE GENERATOR GEN_TREPDOCSS_ID;
SET GENERATOR GEN_TREPDOCSS_ID TO 0;

CREATE GENERATOR GEN_TREPMT_ID;
SET GENERATOR GEN_TREPMT_ID TO 0;

CREATE GENERATOR GEN_TREPPVNZ1_AD;
SET GENERATOR GEN_TREPPVNZ1_AD TO 0;

CREATE GENERATOR GEN_TREPPVNZ1_ID;
SET GENERATOR GEN_TREPPVNZ1_ID TO 0;

CREATE GENERATOR GEN_TREPUDOCS_ID;
SET GENERATOR GEN_TREPUDOCS_ID TO 0;

CREATE GENERATOR GEN_TTEMP_BALA21_ID;
SET GENERATOR GEN_TTEMP_BALA21_ID TO 0;

CREATE GENERATOR GEN_TTEMP_BALAC_ID;
SET GENERATOR GEN_TTEMP_BALAC_ID TO 0;

CREATE GENERATOR GEN_TTEMP_BALMT1_ID;
SET GENERATOR GEN_TTEMP_BALMT1_ID TO 0;

CREATE GENERATOR GEN_TTEMP_PVN1_ID;
SET GENERATOR GEN_TTEMP_PVN1_ID TO 0;

CREATE GENERATOR GEN_TUDOCLISTS_ID;
SET GENERATOR GEN_TUDOCLISTS_ID TO 0;

CREATE GENERATOR GEN_TUDOCS_ID;
SET GENERATOR GEN_TUDOCS_ID TO 0;

CREATE GENERATOR GEN_TUPVN1_ID;
SET GENERATOR GEN_TUPVN1_ID TO 0;

CREATE GENERATOR YEAR00;
SET GENERATOR YEAR00 TO 0;

CREATE GENERATOR YEAR01;
SET GENERATOR YEAR01 TO 0;

CREATE GENERATOR YEAR02;
SET GENERATOR YEAR02 TO 0;

CREATE GENERATOR YEAR03;
SET GENERATOR YEAR03 TO 0;

CREATE GENERATOR YEAR04;
SET GENERATOR YEAR04 TO 0;

CREATE GENERATOR YEAR05;
SET GENERATOR YEAR05 TO 0;

CREATE GENERATOR YEAR06;
SET GENERATOR YEAR06 TO 0;

CREATE GENERATOR YEAR07;
SET GENERATOR YEAR07 TO 0;

CREATE GENERATOR YEAR08;
SET GENERATOR YEAR08 TO 0;

CREATE GENERATOR YEAR09;
SET GENERATOR YEAR09 TO 0;

CREATE GENERATOR YEAR10;
SET GENERATOR YEAR10 TO 0;

CREATE GENERATOR YEAR11;
SET GENERATOR YEAR11 TO 0;

CREATE GENERATOR YEAR12;
SET GENERATOR YEAR12 TO 0;

CREATE GENERATOR YEAR13;
SET GENERATOR YEAR13 TO 0;

CREATE GENERATOR YEAR14;
SET GENERATOR YEAR14 TO 0;

CREATE GENERATOR YEAR15;
SET GENERATOR YEAR15 TO 0;

CREATE GENERATOR YEAR16;
SET GENERATOR YEAR16 TO 0;

CREATE GENERATOR YEAR17;
SET GENERATOR YEAR17 TO 0;

CREATE GENERATOR YEAR18;
SET GENERATOR YEAR18 TO 0;

CREATE GENERATOR YEAR19;
SET GENERATOR YEAR19 TO 0;

CREATE GENERATOR YEAR20;
SET GENERATOR YEAR20 TO 0;

CREATE GENERATOR YEAR21;
SET GENERATOR YEAR21 TO 0;

CREATE GENERATOR YEAR22;
SET GENERATOR YEAR22 TO 0;

CREATE GENERATOR YEAR23;
SET GENERATOR YEAR23 TO 0;

CREATE GENERATOR YEAR24;
SET GENERATOR YEAR24 TO 0;

CREATE GENERATOR YEAR25;
SET GENERATOR YEAR25 TO 0;

CREATE GENERATOR YEAR26;
SET GENERATOR YEAR26 TO 0;

CREATE GENERATOR YEAR27;
SET GENERATOR YEAR27 TO 0;

CREATE GENERATOR YEAR28;
SET GENERATOR YEAR28 TO 0;

CREATE GENERATOR YEAR29;
SET GENERATOR YEAR29 TO 0;

CREATE GENERATOR YEAR30;
SET GENERATOR YEAR30 TO 0;

CREATE GENERATOR YEAR31;
SET GENERATOR YEAR31 TO 0;

CREATE GENERATOR YEAR32;
SET GENERATOR YEAR32 TO 0;



/******************************************************************************/
/***                               Exceptions                               ***/
/******************************************************************************/

CREATE EXCEPTION MY_EXCEPTION_BADYEARVALUE 'Nekorekts gads datumƒÅ';



/******************************************************************************/
/***                           Stored procedures                            ***/
/******************************************************************************/



SET TERM ^ ;

CREATE PROCEDURE SP_BAL0_ID
RETURNS (
    NEXTID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_BAL0_IDA
RETURNS (
    NEXTID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_BALA2_ID
RETURNS (
    NEXTID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_BALA3_ID
RETURNS (
    NEXTID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_CURRCHECK_01 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15),
    PCUR VARCHAR(3))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN ROPS1A.ID */,
    SPID INTEGER /* TYPE OF COLUMN ROPS1A.SPID */,
    DID INTEGER /* TYPE OF COLUMN ROPS1A.DID */,
    DETE DATE /* TYPE OF COLUMN ROPS1A.DETE */,
    NRX VARCHAR(5) /* TYPE OF COLUMN ROPS1A.NRX */,
    DOCTYP VARCHAR(10) /* TYPE OF COLUMN ROPS1A.DOCTYP */,
    DOCTYP1 VARCHAR(10) /* TYPE OF COLUMN ROPS1A.DOCTYP1 */,
    DOCTYP2 VARCHAR(10) /* TYPE OF COLUMN ROPS1A.DOCTYP2 */,
    DOCST VARCHAR(6) /* TYPE OF COLUMN ROPS1A.DOCST */,
    DOCNR VARCHAR(15) /* TYPE OF COLUMN ROPS1A.DOCNR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN ROPS1A.CLID */,
    CLID2 VARCHAR(15) /* TYPE OF COLUMN ROPS1A.CLID2 */,
    NAME VARCHAR(100) /* TYPE OF COLUMN ROPS1A.NAME */,
    NAME2 VARCHAR(100) /* TYPE OF COLUMN ROPS1A.NAME2 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN ROPS1A.REGNR */,
    REGNR2 VARCHAR(15) /* TYPE OF COLUMN ROPS1A.REGNR2 */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.B0 */,
    DESCR VARCHAR(80) /* TYPE OF COLUMN ROPS1A.DESCR */,
    DESCR2 VARCHAR(80) /* TYPE OF COLUMN ROPS1A.DESCR2 */,
    AC1 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.AC1 */,
    AC2 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.AC2 */,
    SAC1 VARCHAR(100) /* TYPE OF COLUMN ROPS1A.SAC1 */,
    SAC2 VARCHAR(100) /* TYPE OF COLUMN ROPS1A.SAC2 */,
    SUMMC NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SUMMC */,
    CUR VARCHAR(3) /* TYPE OF COLUMN ROPS1A.CUR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SUMM */,
    PVN NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.PVN */,
    RAC VARCHAR(8) /* TYPE OF COLUMN ROPS1A.RAC */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SCR */,
    RAC2 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.RAC2 */,
    RAC3 VARCHAR(5) /* TYPE OF COLUMN ROPS1A.RAC3 */,
    RAC4 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.RAC4 */,
    RAC5 VARCHAR(5) /* TYPE OF COLUMN ROPS1A.RAC5 */,
    QV FLOAT /* TYPE OF COLUMN ROPS1A.QV */,
    ZNR INTEGER /* TYPE OF COLUMN ROPS1A.ZNR */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_DIFF_01 (
    PDOCID INTEGER)
RETURNS (
    IDL INTEGER /* TYPE OF COLUMN LOPSD.IDL */,
    ID INTEGER /* TYPE OF COLUMN LOPSD.ID */,
    ZDT TIMESTAMP /* TYPE OF COLUMN LOPSD.ZDT */,
    DTLD TIMESTAMP /* TYPE OF COLUMN LOPSD.DTLD */,
    ODT TIMESTAMP /* TYPE OF COLUMN LOPSD.ODT */,
    USL VARCHAR(15) /* TYPE OF COLUMN LOPSD.USL */,
    DETE DATE /* TYPE OF COLUMN LOPSD.DETE */,
    NRX VARCHAR(5) /* TYPE OF COLUMN LOPSD.NRX */,
    ZNR INTEGER /* TYPE OF COLUMN LOPSD.ZNR */,
    DOCTYP VARCHAR(10) /* TYPE OF COLUMN LOPSD.DOCTYP */,
    DOCST VARCHAR(6) /* TYPE OF COLUMN LOPSD.DOCST */,
    DOCNR VARCHAR(15) /* TYPE OF COLUMN LOPSD.DOCNR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN LOPSD.CLID */,
    CLID2 VARCHAR(15) /* TYPE OF COLUMN LOPSD.CLID2 */,
    DESCR VARCHAR(80) /* TYPE OF COLUMN LOPSD.DESCR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN LOPSD.SUMM */,
    PVN NUMERIC(15,2) /* TYPE OF COLUMN LOPSD.PVN */,
    ZU VARCHAR(20) /* TYPE OF COLUMN LOPSD.ZU */,
    TPL INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_DIFF_02 (
    PDOCID INTEGER)
RETURNS (
    IDL INTEGER /* TYPE OF COLUMN LOPS.IDL */,
    DOCID INTEGER /* TYPE OF COLUMN LOPS.DOCID */,
    ID INTEGER /* TYPE OF COLUMN LOPS.ID */,
    DTL TIMESTAMP /* TYPE OF COLUMN LOPS.DTL */,
    DTLD TIMESTAMP /* TYPE OF COLUMN LOPS.DTLD */,
    ODT TIMESTAMP /* TYPE OF COLUMN LOPS.ODT */,
    USL VARCHAR(15) /* TYPE OF COLUMN LOPS.USL */,
    AC11 VARCHAR(8) /* TYPE OF COLUMN LOPS.AC11 */,
    AC12 VARCHAR(8) /* TYPE OF COLUMN LOPS.AC12 */,
    AC13 VARCHAR(5) /* TYPE OF COLUMN LOPS.AC13 */,
    AC14 VARCHAR(8) /* TYPE OF COLUMN LOPS.AC14 */,
    AC15 VARCHAR(5) /* TYPE OF COLUMN LOPS.AC15 */,
    AC21 VARCHAR(8) /* TYPE OF COLUMN LOPS.AC21 */,
    AC22 VARCHAR(8) /* TYPE OF COLUMN LOPS.AC22 */,
    AC23 VARCHAR(5) /* TYPE OF COLUMN LOPS.AC23 */,
    AC24 VARCHAR(8) /* TYPE OF COLUMN LOPS.AC24 */,
    AC25 VARCHAR(5) /* TYPE OF COLUMN LOPS.AC25 */,
    SUMMC NUMERIC(15,2) /* TYPE OF COLUMN LOPS.SUMMC */,
    CUR VARCHAR(3) /* TYPE OF COLUMN LOPS.CUR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN LOPS.SUMM */,
    QV FLOAT /* TYPE OF COLUMN LOPS.QV */,
    TPL INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_DIFF_11 (
    PDATE1 DATE,
    PDATE2 DATE,
    PDATE3 DATE)
RETURNS (
    IDL1 INTEGER /* TYPE OF COLUMN LOPSD.IDL */,
    IDL2 INTEGER /* TYPE OF COLUMN LOPS.IDL */,
    DOCID INTEGER /* TYPE OF COLUMN LOPSD.ID */,
    ROWID INTEGER /* TYPE OF COLUMN LOPS.ID */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_DIFF_12 (
    PDATE1 DATE,
    PDATE2 DATE,
    PDATE3 DATE,
    PCLID VARCHAR(15),
    PAC1 VARCHAR(8),
    PAC2 VARCHAR(8),
    PAC3 VARCHAR(5),
    PAC4 VARCHAR(8),
    PAC5 VARCHAR(5))
RETURNS (
    TP INTEGER,
    DOCID INTEGER /* TYPE OF COLUMN OPS.DOCID */,
    ROWID INTEGER /* TYPE OF COLUMN OPS.ID */,
    DOCDTL TIMESTAMP,
    DOCDTLD TIMESTAMP,
    DOCODT TIMESTAMP,
    ROWDTL TIMESTAMP,
    ROWDTLD TIMESTAMP,
    ROWODT TIMESTAMP,
    DETE DATE /* TYPE OF COLUMN OPSD.DETE */,
    ZNR INTEGER /* TYPE OF COLUMN OPSD.ZNR */,
    NRX VARCHAR(5) /* TYPE OF COLUMN OPSD.NRX */,
    DOCTYP VARCHAR(10) /* TYPE OF COLUMN OPSD.DOCTYP */,
    DOCST VARCHAR(6) /* TYPE OF COLUMN OPSD.DOCST */,
    DOCNR VARCHAR(15) /* TYPE OF COLUMN OPSD.DOCNR */,
    DOCTYP2 VARCHAR(10) /* TYPE OF COLUMN DOCTYP.ID1 */,
    CLID VARCHAR(15) /* TYPE OF COLUMN OPSD.CLID */,
    CLID2 VARCHAR(15) /* TYPE OF COLUMN OPSD.CLID2 */,
    DESCR VARCHAR(80) /* TYPE OF COLUMN OPSD.DESCR */,
    DOCSUMM NUMERIC(15,2) /* TYPE OF COLUMN OPSD.SUMM */,
    DOCPVN NUMERIC(15,2) /* TYPE OF COLUMN OPSD.PVN */,
    AC11 VARCHAR(8) /* TYPE OF COLUMN OPS.AC11 */,
    AC12 VARCHAR(8) /* TYPE OF COLUMN OPS.AC12 */,
    AC13 VARCHAR(5) /* TYPE OF COLUMN OPS.AC13 */,
    AC14 VARCHAR(8) /* TYPE OF COLUMN OPS.AC14 */,
    AC15 VARCHAR(5) /* TYPE OF COLUMN OPS.AC15 */,
    AC21 VARCHAR(8) /* TYPE OF COLUMN OPS.AC21 */,
    AC22 VARCHAR(8) /* TYPE OF COLUMN OPS.AC22 */,
    AC23 VARCHAR(5) /* TYPE OF COLUMN OPS.AC23 */,
    AC24 VARCHAR(8) /* TYPE OF COLUMN OPS.AC24 */,
    AC25 VARCHAR(5) /* TYPE OF COLUMN OPS.AC25 */,
    SUMMC NUMERIC(15,2) /* TYPE OF COLUMN OPS.SUMMC */,
    CUR VARCHAR(3) /* TYPE OF COLUMN OPS.CUR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN OPS.SUMM */,
    QV FLOAT /* TYPE OF COLUMN OPS.QV */,
    DESCR2 VARCHAR(50) /* TYPE OF COLUMN OPS.DESCR */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_DOCS0_ID
RETURNS (
    NEXTID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_FIXLOPSODT
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SP_FIXOPSDATES
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SP_LINKEDDOCS_1 (
    PSD DATE,
    PED DATE,
    PCLID VARCHAR(15),
    PDOCNR VARCHAR(15))
RETURNS (
    ID INTEGER,
    DETE DATE,
    CLID VARCHAR(15),
    DOCTYP VARCHAR(10),
    DOCST VARCHAR(6),
    DOCNR VARCHAR(15),
    DESCR VARCHAR(80),
    SUMM NUMERIC(15,4),
    PVN NUMERIC(15,4))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_LINKEDDOCS_2 (
    PSD DATE,
    PED DATE,
    PCLID VARCHAR(15),
    PDOCNR VARCHAR(15))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN OPS.ID */,
    DOCID INTEGER /* TYPE OF COLUMN OPS.DOCID */,
    DESCR VARCHAR(50) /* TYPE OF COLUMN OPS.DESCR */,
    AC11 VARCHAR(8) /* TYPE OF COLUMN OPS.AC11 */,
    AC12 VARCHAR(8) /* TYPE OF COLUMN OPS.AC12 */,
    AC13 VARCHAR(5) /* TYPE OF COLUMN OPS.AC13 */,
    AC14 VARCHAR(8) /* TYPE OF COLUMN OPS.AC14 */,
    AC15 VARCHAR(5) /* TYPE OF COLUMN OPS.AC15 */,
    AC21 VARCHAR(8) /* TYPE OF COLUMN OPS.AC21 */,
    AC22 VARCHAR(8) /* TYPE OF COLUMN OPS.AC22 */,
    AC23 VARCHAR(5) /* TYPE OF COLUMN OPS.AC23 */,
    AC24 VARCHAR(8) /* TYPE OF COLUMN OPS.AC24 */,
    AC25 VARCHAR(5) /* TYPE OF COLUMN OPS.AC25 */,
    SUMMC NUMERIC(15,2) /* TYPE OF COLUMN OPS.SUMMC */,
    CUR VARCHAR(3) /* TYPE OF COLUMN OPS.CUR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN OPS.SUMM */,
    QV FLOAT /* TYPE OF COLUMN OPS.QV */,
    NL SMALLINT /* TYPE OF COLUMN OPS.NL */,
    ZDT TIMESTAMP /* TYPE OF COLUMN OPS.ZDT */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_OPS_DELETE (
    ORIGINAL_ID INTEGER,
    ORIGINAL_DOCID INTEGER,
    ISNULL_DESCR INTEGER,
    ORIGINAL_DESCR VARCHAR(50),
    ORIGINAL_AC11 VARCHAR(8),
    ISNULL_AC12 INTEGER,
    ORIGINAL_AC12 VARCHAR(8),
    ISNULL_AC13 INTEGER,
    ORIGINAL_AC13 VARCHAR(5),
    ISNULL_AC14 INTEGER,
    ORIGINAL_AC14 VARCHAR(8),
    ISNULL_AC15 INTEGER,
    ORIGINAL_AC15 VARCHAR(5),
    ORIGINAL_AC21 VARCHAR(8),
    ISNULL_AC22 INTEGER,
    ORIGINAL_AC22 VARCHAR(8),
    ISNULL_AC23 INTEGER,
    ORIGINAL_AC23 VARCHAR(5),
    ISNULL_AC24 INTEGER,
    ORIGINAL_AC24 VARCHAR(8),
    ISNULL_AC25 INTEGER,
    ORIGINAL_AC25 VARCHAR(5),
    ORIGINAL_SUMMC NUMERIC(15,4),
    ORIGINAL_CUR VARCHAR(3),
    ORIGINAL_SUMM NUMERIC(15,4),
    ISNULL_QV INTEGER,
    ORIGINAL_QV FLOAT,
    ISNULL_ZDT INTEGER,
    ORIGINAL_ZDT TIMESTAMP)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SP_OPS_DELETE_LOG (
    ID INTEGER,
    USR VARCHAR(15),
    ORIGINAL_DOCID INTEGER,
    ORIGINAL_AC11 VARCHAR(8),
    ORIGINAL_AC12 VARCHAR(8),
    ORIGINAL_AC13 VARCHAR(5),
    ORIGINAL_AC14 VARCHAR(8),
    ORIGINAL_AC15 VARCHAR(5),
    ORIGINAL_AC21 VARCHAR(8),
    ORIGINAL_AC22 VARCHAR(8),
    ORIGINAL_AC23 VARCHAR(5),
    ORIGINAL_AC24 VARCHAR(8),
    ORIGINAL_AC25 VARCHAR(5),
    ORIGINAL_SUMMC NUMERIC(15,4),
    ORIGINAL_CUR VARCHAR(3),
    ORIGINAL_SUMM NUMERIC(15,4),
    ORIGINAL_QV FLOAT,
    ORIGINAL_ZDT TIMESTAMP)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SP_OPS_FILTER_AND (
    PDATE1 DATE,
    PDATE2 DATE,
    PTEXT VARCHAR(50),
    PCLID VARCHAR(15),
    PAC11 VARCHAR(8),
    PAC12 VARCHAR(8),
    PAC13 VARCHAR(5),
    PAC14 VARCHAR(8),
    PAC15 VARCHAR(5),
    PAC21 VARCHAR(8),
    PAC22 VARCHAR(8),
    PAC23 VARCHAR(5),
    PAC24 VARCHAR(8),
    PAC25 VARCHAR(5),
    PDOCGR VARCHAR(10))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN OPS.ID */,
    DOCID INTEGER /* TYPE OF COLUMN OPS.DOCID */,
    DESCR VARCHAR(50) /* TYPE OF COLUMN OPS.DESCR */,
    AC11 VARCHAR(8) /* TYPE OF COLUMN OPS.AC11 */,
    AC12 VARCHAR(8) /* TYPE OF COLUMN OPS.AC12 */,
    AC13 VARCHAR(5) /* TYPE OF COLUMN OPS.AC13 */,
    AC14 VARCHAR(8) /* TYPE OF COLUMN OPS.AC14 */,
    AC15 VARCHAR(5) /* TYPE OF COLUMN OPS.AC15 */,
    AC21 VARCHAR(8) /* TYPE OF COLUMN OPS.AC21 */,
    AC22 VARCHAR(8) /* TYPE OF COLUMN OPS.AC22 */,
    AC23 VARCHAR(5) /* TYPE OF COLUMN OPS.AC23 */,
    AC24 VARCHAR(8) /* TYPE OF COLUMN OPS.AC24 */,
    AC25 VARCHAR(5) /* TYPE OF COLUMN OPS.AC25 */,
    SUMMC NUMERIC(15,2) /* TYPE OF COLUMN OPS.SUMMC */,
    CUR VARCHAR(3) /* TYPE OF COLUMN OPS.CUR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN OPS.SUMM */,
    QV FLOAT /* TYPE OF COLUMN OPS.QV */,
    NL SMALLINT /* TYPE OF COLUMN OPS.NL */,
    ZDT TIMESTAMP /* TYPE OF COLUMN OPS.ZDT */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_OPS_FILTER_OR (
    PDATE1 DATE,
    PDATE2 DATE,
    PTEXT VARCHAR(50),
    PCLID VARCHAR(15),
    PAC11 VARCHAR(8),
    PAC12 VARCHAR(8),
    PAC13 VARCHAR(5),
    PAC14 VARCHAR(8),
    PAC15 VARCHAR(5),
    PAC21 VARCHAR(8),
    PAC22 VARCHAR(8),
    PAC23 VARCHAR(5),
    PAC24 VARCHAR(8),
    PAC25 VARCHAR(5),
    PDOCGR VARCHAR(10))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN OPS.ID */,
    DOCID INTEGER /* TYPE OF COLUMN OPS.DOCID */,
    DESCR VARCHAR(50) /* TYPE OF COLUMN OPS.DESCR */,
    AC11 VARCHAR(8) /* TYPE OF COLUMN OPS.AC11 */,
    AC12 VARCHAR(8) /* TYPE OF COLUMN OPS.AC12 */,
    AC13 VARCHAR(5) /* TYPE OF COLUMN OPS.AC13 */,
    AC14 VARCHAR(8) /* TYPE OF COLUMN OPS.AC14 */,
    AC15 VARCHAR(5) /* TYPE OF COLUMN OPS.AC15 */,
    AC21 VARCHAR(8) /* TYPE OF COLUMN OPS.AC21 */,
    AC22 VARCHAR(8) /* TYPE OF COLUMN OPS.AC22 */,
    AC23 VARCHAR(5) /* TYPE OF COLUMN OPS.AC23 */,
    AC24 VARCHAR(8) /* TYPE OF COLUMN OPS.AC24 */,
    AC25 VARCHAR(5) /* TYPE OF COLUMN OPS.AC25 */,
    SUMMC NUMERIC(15,2) /* TYPE OF COLUMN OPS.SUMMC */,
    CUR VARCHAR(3) /* TYPE OF COLUMN OPS.CUR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN OPS.SUMM */,
    QV FLOAT /* TYPE OF COLUMN OPS.QV */,
    NL SMALLINT /* TYPE OF COLUMN OPS.NL */,
    ZDT TIMESTAMP /* TYPE OF COLUMN OPS.ZDT */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_OPS_ID
RETURNS (
    NEXTID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_OPS_IDK (
    PK INTEGER)
RETURNS (
    NEXTID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_OPS_INSERT (
    PID INTEGER,
    PDOCID INTEGER,
    PDESCR VARCHAR(50),
    PAC11 VARCHAR(8),
    PAC12 VARCHAR(8),
    PAC13 VARCHAR(5),
    PAC14 VARCHAR(8),
    PAC15 VARCHAR(5),
    PAC21 VARCHAR(8),
    PAC22 VARCHAR(8),
    PAC23 VARCHAR(5),
    PAC24 VARCHAR(8),
    PAC25 VARCHAR(5),
    PSUMMC NUMERIC(15,4),
    PCUR VARCHAR(3),
    PSUMM NUMERIC(15,4),
    PQV FLOAT,
    PNL SMALLINT)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN OPS.ID */,
    DOCID INTEGER /* TYPE OF COLUMN OPS.DOCID */,
    DESCR VARCHAR(50) /* TYPE OF COLUMN OPS.DESCR */,
    AC11 VARCHAR(8) /* TYPE OF COLUMN OPS.AC11 */,
    AC12 VARCHAR(8) /* TYPE OF COLUMN OPS.AC12 */,
    AC13 VARCHAR(5) /* TYPE OF COLUMN OPS.AC13 */,
    AC14 VARCHAR(8) /* TYPE OF COLUMN OPS.AC14 */,
    AC15 VARCHAR(5) /* TYPE OF COLUMN OPS.AC15 */,
    AC21 VARCHAR(8) /* TYPE OF COLUMN OPS.AC21 */,
    AC22 VARCHAR(8) /* TYPE OF COLUMN OPS.AC22 */,
    AC23 VARCHAR(5) /* TYPE OF COLUMN OPS.AC23 */,
    AC24 VARCHAR(8) /* TYPE OF COLUMN OPS.AC24 */,
    AC25 VARCHAR(5) /* TYPE OF COLUMN OPS.AC25 */,
    SUMMC NUMERIC(15,2) /* TYPE OF COLUMN OPS.SUMMC */,
    CUR VARCHAR(3) /* TYPE OF COLUMN OPS.CUR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN OPS.SUMM */,
    QV FLOAT /* TYPE OF COLUMN OPS.QV */,
    NL SMALLINT /* TYPE OF COLUMN OPS.NL */,
    ZDT TIMESTAMP /* TYPE OF COLUMN OPS.ZDT */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_OPS_UPDATE (
    PDOCID INTEGER,
    PDESCR VARCHAR(50),
    PAC11 VARCHAR(8),
    PAC12 VARCHAR(8),
    PAC13 VARCHAR(5),
    PAC14 VARCHAR(8),
    PAC15 VARCHAR(5),
    PAC21 VARCHAR(8),
    PAC22 VARCHAR(8),
    PAC23 VARCHAR(5),
    PAC24 VARCHAR(8),
    PAC25 VARCHAR(5),
    PSUMMC NUMERIC(15,4),
    PCUR VARCHAR(3),
    PSUMM NUMERIC(15,4),
    PQV FLOAT,
    PNL SMALLINT,
    ORIGINAL_ID INTEGER,
    ORIGINAL_DOCID INTEGER,
    ISNULL_DESCR INTEGER,
    ORIGINAL_DESCR VARCHAR(50),
    ORIGINAL_AC11 VARCHAR(8),
    ISNULL_AC12 INTEGER,
    ORIGINAL_AC12 VARCHAR(8),
    ISNULL_AC13 INTEGER,
    ORIGINAL_AC13 VARCHAR(5),
    ISNULL_AC14 INTEGER,
    ORIGINAL_AC14 VARCHAR(8),
    ISNULL_AC15 INTEGER,
    ORIGINAL_AC15 VARCHAR(5),
    ORIGINAL_AC21 VARCHAR(8),
    ISNULL_AC22 INTEGER,
    ORIGINAL_AC22 VARCHAR(8),
    ISNULL_AC23 INTEGER,
    ORIGINAL_AC23 VARCHAR(5),
    ISNULL_AC24 INTEGER,
    ORIGINAL_AC24 VARCHAR(8),
    ISNULL_AC25 INTEGER,
    ORIGINAL_AC25 VARCHAR(5),
    ORIGINAL_SUMMC NUMERIC(15,4),
    ORIGINAL_CUR VARCHAR(3),
    ORIGINAL_SUMM NUMERIC(15,4),
    ISNULL_QV INTEGER,
    ORIGINAL_QV FLOAT,
    ISNULL_NL INTEGER,
    ORIGINAL_NL SMALLINT,
    ISNULL_ZDT INTEGER,
    ORIGINAL_ZDT TIMESTAMP,
    PID INTEGER)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN OPS.ID */,
    DOCID INTEGER /* TYPE OF COLUMN OPS.DOCID */,
    DESCR VARCHAR(50) /* TYPE OF COLUMN OPS.DESCR */,
    AC11 VARCHAR(8) /* TYPE OF COLUMN OPS.AC11 */,
    AC12 VARCHAR(8) /* TYPE OF COLUMN OPS.AC12 */,
    AC13 VARCHAR(5) /* TYPE OF COLUMN OPS.AC13 */,
    AC14 VARCHAR(8) /* TYPE OF COLUMN OPS.AC14 */,
    AC15 VARCHAR(5) /* TYPE OF COLUMN OPS.AC15 */,
    AC21 VARCHAR(8) /* TYPE OF COLUMN OPS.AC21 */,
    AC22 VARCHAR(8) /* TYPE OF COLUMN OPS.AC22 */,
    AC23 VARCHAR(5) /* TYPE OF COLUMN OPS.AC23 */,
    AC24 VARCHAR(8) /* TYPE OF COLUMN OPS.AC24 */,
    AC25 VARCHAR(5) /* TYPE OF COLUMN OPS.AC25 */,
    SUMMC NUMERIC(15,2) /* TYPE OF COLUMN OPS.SUMMC */,
    CUR VARCHAR(3) /* TYPE OF COLUMN OPS.CUR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN OPS.SUMM */,
    QV FLOAT /* TYPE OF COLUMN OPS.QV */,
    NL SMALLINT /* TYPE OF COLUMN OPS.NL */,
    ZDT TIMESTAMP /* TYPE OF COLUMN OPS.ZDT */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_OPS_UPDATE_LOG (
    ID INTEGER,
    USR VARCHAR(15),
    ORIGINAL_DOCID INTEGER,
    ORIGINAL_AC11 VARCHAR(8),
    ORIGINAL_AC12 VARCHAR(8),
    ORIGINAL_AC13 VARCHAR(5),
    ORIGINAL_AC14 VARCHAR(8),
    ORIGINAL_AC15 VARCHAR(5),
    ORIGINAL_AC21 VARCHAR(8),
    ORIGINAL_AC22 VARCHAR(8),
    ORIGINAL_AC23 VARCHAR(5),
    ORIGINAL_AC24 VARCHAR(8),
    ORIGINAL_AC25 VARCHAR(5),
    ORIGINAL_SUMMC NUMERIC(15,4),
    ORIGINAL_CUR VARCHAR(3),
    ORIGINAL_SUMM NUMERIC(15,4),
    ORIGINAL_QV FLOAT,
    ORIGINAL_ZDT TIMESTAMP)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SP_OPSD_DELETE (
    ORIGINAL_ID INTEGER,
    ORIGINAL_DATE DATE,
    ISNULL_NRX INTEGER,
    ORIGINAL_NRX VARCHAR(5),
    ISNULL_DOCTYP INTEGER,
    ORIGINAL_DOCTYP VARCHAR(10),
    ISNULL_DOCST INTEGER,
    ORIGINAL_DOCST VARCHAR(6),
    ISNULL_DOCNR INTEGER,
    ORIGINAL_DOCNR VARCHAR(15),
    ISNULL_CLID INTEGER,
    ORIGINAL_CLID VARCHAR(15),
    ISNULL_CLID2 INTEGER,
    ORIGINAL_CLID2 VARCHAR(15),
    ISNULL_DESCR INTEGER,
    ORIGINAL_DESCR VARCHAR(80),
    ORIGINAL_SUMM NUMERIC(15,4),
    ORIGINAL_PVN NUMERIC(15,4),
    ORIGINAL_ZNR INTEGER,
    ISNULL_ZU INTEGER,
    ORIGINAL_ZU VARCHAR(20),
    ISNULL_ZDT INTEGER,
    ORIGINAL_ZDT TIMESTAMP,
    ISNULL_DT2 INTEGER,
    ORIGINAL_DT2 DATE)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SP_OPSD_DELETE_LOG (
    ID INTEGER,
    USR VARCHAR(15),
    ORIGINAL_DATE DATE,
    ORIGINAL_NRX VARCHAR(5),
    ORIGINAL_DOCTYP VARCHAR(10),
    ORIGINAL_DOCST VARCHAR(6),
    ORIGINAL_DOCNR VARCHAR(15),
    ORIGINAL_CLID VARCHAR(15),
    ORIGINAL_CLID2 VARCHAR(15),
    ORIGINAL_DESCR VARCHAR(80),
    ORIGINAL_SUMM NUMERIC(15,4),
    ORIGINAL_PVN NUMERIC(15,4),
    ORIGINAL_ZNR INTEGER,
    ORIGINAL_ZDT TIMESTAMP)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SP_OPSD_FILTER_AND (
    PDATE1 DATE,
    PDATE2 DATE,
    PTEXT VARCHAR(50),
    PCLID VARCHAR(15),
    PAC11 VARCHAR(8),
    PAC12 VARCHAR(8),
    PAC13 VARCHAR(5),
    PAC14 VARCHAR(8),
    PAC15 VARCHAR(5),
    PAC21 VARCHAR(8),
    PAC22 VARCHAR(8),
    PAC23 VARCHAR(5),
    PAC24 VARCHAR(8),
    PAC25 VARCHAR(5),
    PDOCGR VARCHAR(10))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN OPSD.ID */,
    DETE DATE /* TYPE OF COLUMN OPSD.DETE */,
    NRX VARCHAR(5) /* TYPE OF COLUMN OPSD.NRX */,
    DOCTYP VARCHAR(10) /* TYPE OF COLUMN OPSD.DOCTYP */,
    DOCST VARCHAR(6) /* TYPE OF COLUMN OPSD.DOCST */,
    DOCNR VARCHAR(15) /* TYPE OF COLUMN OPSD.DOCNR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN OPSD.CLID */,
    CLID2 VARCHAR(15) /* TYPE OF COLUMN OPSD.CLID2 */,
    DESCR VARCHAR(80) /* TYPE OF COLUMN OPSD.DESCR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN OPSD.SUMM */,
    PVN NUMERIC(15,2) /* TYPE OF COLUMN OPSD.PVN */,
    OPT INTEGER /* TYPE OF COLUMN OPSD.OPT */,
    ZNR INTEGER /* TYPE OF COLUMN OPSD.ZNR */,
    ZU VARCHAR(20) /* TYPE OF COLUMN OPSD.ZU */,
    ZDT TIMESTAMP /* TYPE OF COLUMN OPSD.ZDT */,
    DT2 DATE /* TYPE OF COLUMN OPSD.DT2 */,
    YR SMALLINT /* TYPE OF COLUMN OPSD.YR */,
    NL SMALLINT /* TYPE OF COLUMN OPSD.NL */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_OPSD_FILTER_OR (
    PDATE1 DATE,
    PDATE2 DATE,
    PTEXT VARCHAR(50),
    PCLID VARCHAR(15),
    PAC11 VARCHAR(8),
    PAC12 VARCHAR(8),
    PAC13 VARCHAR(5),
    PAC14 VARCHAR(8),
    PAC15 VARCHAR(5),
    PAC21 VARCHAR(8),
    PAC22 VARCHAR(8),
    PAC23 VARCHAR(5),
    PAC24 VARCHAR(8),
    PAC25 VARCHAR(5),
    PDOCGR VARCHAR(10))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN OPSD.ID */,
    DETE DATE /* TYPE OF COLUMN OPSD.DETE */,
    NRX VARCHAR(5) /* TYPE OF COLUMN OPSD.NRX */,
    DOCTYP VARCHAR(10) /* TYPE OF COLUMN OPSD.DOCTYP */,
    DOCST VARCHAR(6) /* TYPE OF COLUMN OPSD.DOCST */,
    DOCNR VARCHAR(15) /* TYPE OF COLUMN OPSD.DOCNR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN OPSD.CLID */,
    CLID2 VARCHAR(15) /* TYPE OF COLUMN OPSD.CLID2 */,
    DESCR VARCHAR(80) /* TYPE OF COLUMN OPSD.DESCR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN OPSD.SUMM */,
    PVN NUMERIC(15,2) /* TYPE OF COLUMN OPSD.PVN */,
    OPT INTEGER /* TYPE OF COLUMN OPSD.OPT */,
    ZNR INTEGER /* TYPE OF COLUMN OPSD.ZNR */,
    ZU VARCHAR(20) /* TYPE OF COLUMN OPSD.ZU */,
    ZDT TIMESTAMP /* TYPE OF COLUMN OPSD.ZDT */,
    DT2 DATE /* TYPE OF COLUMN OPSD.DT2 */,
    YR SMALLINT /* TYPE OF COLUMN OPSD.YR */,
    NL SMALLINT /* TYPE OF COLUMN OPSD.NL */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_OPSD_GETNEXTNRFORYEARA (
    YR INTEGER)
RETURNS (
    NEXTNR INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_OPSD_GETNEXTNRFORYEARA_K (
    YR INTEGER,
    PK INTEGER)
RETURNS (
    NEXTNR INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_OPSD_ID
RETURNS (
    NEXTID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_OPSD_IDK (
    PK INTEGER)
RETURNS (
    NEXTID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_OPSD_INSERT (
    PID INTEGER,
    PDETE DATE,
    PNRX VARCHAR(5),
    PDOCTYP VARCHAR(10),
    PDOCST VARCHAR(6),
    PDOCNR VARCHAR(15),
    PCLID VARCHAR(15),
    PCLID2 VARCHAR(15),
    PDESCR VARCHAR(80),
    PSUMM NUMERIC(15,4),
    PPVN NUMERIC(15,4),
    POPT INTEGER,
    PZNR INTEGER,
    PZU VARCHAR(20),
    PZDT TIMESTAMP,
    PDT2 DATE,
    PNL SMALLINT)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN OPSD.ID */,
    DETE DATE /* TYPE OF COLUMN OPSD.DETE */,
    NRX VARCHAR(5) /* TYPE OF COLUMN OPSD.NRX */,
    DOCTYP VARCHAR(10) /* TYPE OF COLUMN OPSD.DOCTYP */,
    DOCST VARCHAR(6) /* TYPE OF COLUMN OPSD.DOCST */,
    DOCNR VARCHAR(15) /* TYPE OF COLUMN OPSD.DOCNR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN OPSD.CLID */,
    CLID2 VARCHAR(15) /* TYPE OF COLUMN OPSD.CLID2 */,
    DESCR VARCHAR(80) /* TYPE OF COLUMN OPSD.DESCR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN OPSD.SUMM */,
    PVN NUMERIC(15,2) /* TYPE OF COLUMN OPSD.PVN */,
    OPT INTEGER /* TYPE OF COLUMN OPSD.OPT */,
    ZNR INTEGER /* TYPE OF COLUMN OPSD.ZNR */,
    ZU VARCHAR(20) /* TYPE OF COLUMN OPSD.ZU */,
    ZDT TIMESTAMP /* TYPE OF COLUMN OPSD.ZDT */,
    DT2 DATE /* TYPE OF COLUMN OPSD.DT2 */,
    YR SMALLINT /* TYPE OF COLUMN OPSD.YR */,
    NL SMALLINT /* TYPE OF COLUMN OPSD.NL */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_OPSD_UPDATE (
    PDETE DATE,
    PNRX VARCHAR(5),
    PDOCTYP VARCHAR(10),
    PDOCST VARCHAR(6),
    PDOCNR VARCHAR(15),
    PCLID VARCHAR(15),
    PCLID2 VARCHAR(15),
    PDESCR VARCHAR(80),
    PSUMM NUMERIC(15,4),
    PPVN NUMERIC(15,4),
    POPT INTEGER,
    PZNR INTEGER,
    PZU VARCHAR(20),
    PZDT TIMESTAMP,
    PDT2 DATE,
    PNL SMALLINT,
    ORIGINAL_ID INTEGER,
    ORIGINAL_DATE DATE,
    ISNULL_NRX INTEGER,
    ORIGINAL_NRX VARCHAR(5),
    ISNULL_DOCTYP INTEGER,
    ORIGINAL_DOCTYP VARCHAR(10),
    ISNULL_DOCST INTEGER,
    ORIGINAL_DOCST VARCHAR(6),
    ISNULL_DOCNR INTEGER,
    ORIGINAL_DOCNR VARCHAR(15),
    ISNULL_CLID INTEGER,
    ORIGINAL_CLID VARCHAR(15),
    ISNULL_CLID2 INTEGER,
    ORIGINAL_CLID2 VARCHAR(15),
    ISNULL_DESCR INTEGER,
    ORIGINAL_DESCR VARCHAR(80),
    ORIGINAL_SUMM NUMERIC(15,4),
    ORIGINAL_PVN NUMERIC(15,4),
    ISNULL_OPT INTEGER,
    ORIGINAL_OPT INTEGER,
    ORIGINAL_ZNR INTEGER,
    ISNULL_ZU INTEGER,
    ORIGINAL_ZU VARCHAR(20),
    ISNULL_ZDT INTEGER,
    ORIGINAL_ZDT TIMESTAMP,
    ISNULL_DT2 INTEGER,
    ORIGINAL_DT2 DATE,
    ISNULL_NL INTEGER,
    ORIGINAL_NL SMALLINT,
    ISNULL_YR INTEGER,
    ORIGINAL_YR INTEGER,
    PID INTEGER)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN OPSD.ID */,
    DETE DATE /* TYPE OF COLUMN OPSD.DETE */,
    NRX VARCHAR(5) /* TYPE OF COLUMN OPSD.NRX */,
    DOCTYP VARCHAR(10) /* TYPE OF COLUMN OPSD.DOCTYP */,
    DOCST VARCHAR(6) /* TYPE OF COLUMN OPSD.DOCST */,
    DOCNR VARCHAR(15) /* TYPE OF COLUMN OPSD.DOCNR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN OPSD.CLID */,
    CLID2 VARCHAR(15) /* TYPE OF COLUMN OPSD.CLID2 */,
    DESCR VARCHAR(80) /* TYPE OF COLUMN OPSD.DESCR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN OPSD.SUMM */,
    PVN NUMERIC(15,2) /* TYPE OF COLUMN OPSD.PVN */,
    OPT INTEGER /* TYPE OF COLUMN OPSD.OPT */,
    ZNR INTEGER /* TYPE OF COLUMN OPSD.ZNR */,
    ZU VARCHAR(20) /* TYPE OF COLUMN OPSD.ZU */,
    ZDT TIMESTAMP /* TYPE OF COLUMN OPSD.ZDT */,
    DT2 DATE /* TYPE OF COLUMN OPSD.DT2 */,
    YR SMALLINT /* TYPE OF COLUMN OPSD.YR */,
    NL SMALLINT /* TYPE OF COLUMN OPSD.NL */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_OPSD_UPDATE_LOG (
    ID INTEGER,
    USR VARCHAR(15),
    ORIGINAL_DATE DATE,
    ORIGINAL_NRX VARCHAR(5),
    ORIGINAL_DOCTYP VARCHAR(10),
    ORIGINAL_DOCST VARCHAR(6),
    ORIGINAL_DOCNR VARCHAR(15),
    ORIGINAL_CLID VARCHAR(15),
    ORIGINAL_CLID2 VARCHAR(15),
    ORIGINAL_DESCR VARCHAR(80),
    ORIGINAL_SUMM NUMERIC(15,4),
    ORIGINAL_PVN NUMERIC(15,4),
    ORIGINAL_ZNR INTEGER,
    ORIGINAL_ZDT TIMESTAMP)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SP_PARAMS (
    USERNAME VARCHAR(20))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN PARAMS.ID */,
    PNAME VARCHAR(20) /* TYPE OF COLUMN PARAMS.PNAME */,
    PVALUE VARCHAR(50) /* TYPE OF COLUMN PARAMS.PVALUE */,
    USR VARCHAR(15) /* TYPE OF COLUMN PARAMS.USR */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REKINS_11 (
    PDID INTEGER)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN OPS.ID */,
    DOCID INTEGER /* TYPE OF COLUMN OPS.DOCID */,
    DESCR VARCHAR(50) /* TYPE OF COLUMN OPS.DESCR */,
    AC11 VARCHAR(8) /* TYPE OF COLUMN OPS.AC11 */,
    AC12 VARCHAR(8) /* TYPE OF COLUMN OPS.AC12 */,
    AC13 VARCHAR(5) /* TYPE OF COLUMN OPS.AC13 */,
    AC14 VARCHAR(8) /* TYPE OF COLUMN OPS.AC14 */,
    AC15 VARCHAR(5) /* TYPE OF COLUMN OPS.AC15 */,
    AC21 VARCHAR(8) /* TYPE OF COLUMN OPS.AC21 */,
    AC22 VARCHAR(8) /* TYPE OF COLUMN OPS.AC22 */,
    AC23 VARCHAR(5) /* TYPE OF COLUMN OPS.AC23 */,
    AC24 VARCHAR(8) /* TYPE OF COLUMN OPS.AC24 */,
    AC25 VARCHAR(5) /* TYPE OF COLUMN OPS.AC25 */,
    SUMMC NUMERIC(15,2) /* TYPE OF COLUMN OPS.SUMMC */,
    CUR VARCHAR(3) /* TYPE OF COLUMN OPS.CUR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN OPS.SUMM */,
    QV FLOAT /* TYPE OF COLUMN OPS.QV */,
    NL SMALLINT /* TYPE OF COLUMN OPS.NL */,
    ZDT TIMESTAMP /* TYPE OF COLUMN OPS.ZDT */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_APGR_01 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN ROPS2A.ID */,
    SPID INTEGER /* TYPE OF COLUMN ROPS2A.SPID */,
    AC VARCHAR(8) /* TYPE OF COLUMN ROPS2A.AC */,
    RAC VARCHAR(8) /* TYPE OF COLUMN ROPS2A.RAC */,
    NAME VARCHAR(150) /* TYPE OF COLUMN ROPS2A.NAME */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.B0 */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.SCR */,
    TDB NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.TDB */,
    TCR NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.TCR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN ROPS2A.CLID */,
    NAME1 VARCHAR(100) /* TYPE OF COLUMN ROPS2A.NAME1 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN ROPS2A.REGNR */,
    RNAME VARCHAR(150) /* TYPE OF COLUMN ROPS2A.RNAME */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_APGR_01_CLID (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN ROPS2A.ID */,
    SPID INTEGER /* TYPE OF COLUMN ROPS2A.SPID */,
    AC VARCHAR(8) /* TYPE OF COLUMN ROPS2A.AC */,
    RAC VARCHAR(8) /* TYPE OF COLUMN ROPS2A.RAC */,
    NAME VARCHAR(150) /* TYPE OF COLUMN ROPS2A.NAME */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.B0 */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.SCR */,
    TDB NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.TDB */,
    TCR NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.TCR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN ROPS2A.CLID */,
    NAME1 VARCHAR(100) /* TYPE OF COLUMN ROPS2A.NAME1 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN ROPS2A.REGNR */,
    RNAME VARCHAR(150) /* TYPE OF COLUMN ROPS2A.RNAME */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_APGR_01_CLID2 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN ROPS2A.ID */,
    SPID INTEGER /* TYPE OF COLUMN ROPS2A.SPID */,
    AC VARCHAR(8) /* TYPE OF COLUMN ROPS2A.AC */,
    RAC VARCHAR(8) /* TYPE OF COLUMN ROPS2A.RAC */,
    NAME VARCHAR(150) /* TYPE OF COLUMN ROPS2A.NAME */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.B0 */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.SCR */,
    TDB NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.TDB */,
    TCR NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.TCR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN ROPS2A.CLID */,
    NAME1 VARCHAR(100) /* TYPE OF COLUMN ROPS2A.NAME1 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN ROPS2A.REGNR */,
    RNAME VARCHAR(150) /* TYPE OF COLUMN ROPS2A.RNAME */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_APGR_02 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN ROPS2A.ID */,
    SPID INTEGER /* TYPE OF COLUMN ROPS2A.SPID */,
    AC VARCHAR(8) /* TYPE OF COLUMN ROPS2A.AC */,
    RAC VARCHAR(8) /* TYPE OF COLUMN ROPS2A.RAC */,
    NAME VARCHAR(150) /* TYPE OF COLUMN ROPS2A.NAME */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.B0 */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.SCR */,
    TDB NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.TDB */,
    TCR NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.TCR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN ROPS2A.CLID */,
    NAME1 VARCHAR(100) /* TYPE OF COLUMN ROPS2A.NAME1 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN ROPS2A.REGNR */,
    RNAME VARCHAR(150) /* TYPE OF COLUMN ROPS2A.RNAME */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_APGR_02_CLID (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN ROPS2A.ID */,
    SPID INTEGER /* TYPE OF COLUMN ROPS2A.SPID */,
    AC VARCHAR(8) /* TYPE OF COLUMN ROPS2A.AC */,
    RAC VARCHAR(8) /* TYPE OF COLUMN ROPS2A.RAC */,
    NAME VARCHAR(150) /* TYPE OF COLUMN ROPS2A.NAME */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.B0 */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.SCR */,
    TDB NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.TDB */,
    TCR NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.TCR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN ROPS2A.CLID */,
    NAME1 VARCHAR(100) /* TYPE OF COLUMN ROPS2A.NAME1 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN ROPS2A.REGNR */,
    RNAME VARCHAR(150) /* TYPE OF COLUMN ROPS2A.RNAME */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_APGR_10 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN ROPS2A.ID */,
    SPID INTEGER /* TYPE OF COLUMN ROPS2A.SPID */,
    AC VARCHAR(8) /* TYPE OF COLUMN ROPS2A.AC */,
    RAC VARCHAR(8) /* TYPE OF COLUMN ROPS2A.RAC */,
    NAME VARCHAR(150) /* TYPE OF COLUMN ROPS2A.NAME */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.B0 */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.SCR */,
    TDB NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.TDB */,
    TCR NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.TCR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN ROPS2A.CLID */,
    NAME1 VARCHAR(100) /* TYPE OF COLUMN ROPS2A.NAME1 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN ROPS2A.REGNR */,
    RNAME VARCHAR(150) /* TYPE OF COLUMN ROPS2A.RNAME */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_APGR_10_CLID (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN ROPS2A.ID */,
    SPID INTEGER /* TYPE OF COLUMN ROPS2A.SPID */,
    AC VARCHAR(8) /* TYPE OF COLUMN ROPS2A.AC */,
    RAC VARCHAR(8) /* TYPE OF COLUMN ROPS2A.RAC */,
    NAME VARCHAR(150) /* TYPE OF COLUMN ROPS2A.NAME */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.B0 */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.SCR */,
    TDB NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.TDB */,
    TCR NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.TCR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN ROPS2A.CLID */,
    NAME1 VARCHAR(100) /* TYPE OF COLUMN ROPS2A.NAME1 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN ROPS2A.REGNR */,
    RNAME VARCHAR(150) /* TYPE OF COLUMN ROPS2A.RNAME */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_APGR_11 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN ROPS2A.ID */,
    SPID INTEGER /* TYPE OF COLUMN ROPS2A.SPID */,
    AC VARCHAR(8) /* TYPE OF COLUMN ROPS2A.AC */,
    RAC VARCHAR(8) /* TYPE OF COLUMN ROPS2A.RAC */,
    NAME VARCHAR(150) /* TYPE OF COLUMN ROPS2A.NAME */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.B0 */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.SCR */,
    TDB NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.TDB */,
    TCR NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.TCR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN ROPS2A.CLID */,
    NAME1 VARCHAR(100) /* TYPE OF COLUMN ROPS2A.NAME1 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN ROPS2A.REGNR */,
    RNAME VARCHAR(150) /* TYPE OF COLUMN ROPS2A.RNAME */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_APGR_21 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PACLEN INTEGER)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN ROPS2A.ID */,
    SPID INTEGER /* TYPE OF COLUMN ROPS2A.SPID */,
    AC VARCHAR(8) /* TYPE OF COLUMN ROPS2A.AC */,
    RAC VARCHAR(8) /* TYPE OF COLUMN ROPS2A.RAC */,
    NAME VARCHAR(150) /* TYPE OF COLUMN ROPS2A.NAME */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.B0 */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.SCR */,
    TDB NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.TDB */,
    TCR NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.TCR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN ROPS2A.CLID */,
    NAME1 VARCHAR(100) /* TYPE OF COLUMN ROPS2A.NAME1 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN ROPS2A.REGNR */,
    RNAME VARCHAR(150) /* TYPE OF COLUMN ROPS2A.RNAME */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_APGR_CUR_01 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCUR VARCHAR(3))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN ROPS2A.ID */,
    SPID INTEGER /* TYPE OF COLUMN ROPS2A.SPID */,
    AC VARCHAR(8) /* TYPE OF COLUMN ROPS2A.AC */,
    RAC VARCHAR(8) /* TYPE OF COLUMN ROPS2A.RAC */,
    NAME VARCHAR(150) /* TYPE OF COLUMN ROPS2A.NAME */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.B0 */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.SCR */,
    TDB NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.TDB */,
    TCR NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.TCR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN ROPS2A.CLID */,
    NAME1 VARCHAR(100) /* TYPE OF COLUMN ROPS2A.NAME1 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN ROPS2A.REGNR */,
    RNAME VARCHAR(150) /* TYPE OF COLUMN ROPS2A.RNAME */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_APGR_CUR_01_CLID (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(8),
    PCUR VARCHAR(3))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN ROPS2A.ID */,
    SPID INTEGER /* TYPE OF COLUMN ROPS2A.SPID */,
    AC VARCHAR(8) /* TYPE OF COLUMN ROPS2A.AC */,
    RAC VARCHAR(8) /* TYPE OF COLUMN ROPS2A.RAC */,
    NAME VARCHAR(150) /* TYPE OF COLUMN ROPS2A.NAME */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.B0 */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.SCR */,
    TDB NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.TDB */,
    TCR NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.TCR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN ROPS2A.CLID */,
    NAME1 VARCHAR(100) /* TYPE OF COLUMN ROPS2A.NAME1 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN ROPS2A.REGNR */,
    RNAME VARCHAR(150) /* TYPE OF COLUMN ROPS2A.RNAME */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_APGR_DZ_11 (
    SDT DATE,
    EDT DATE)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN ROPS3A.ID */,
    SPID INTEGER /* TYPE OF COLUMN ROPS3A.SPID */,
    RAC VARCHAR(8) /* TYPE OF COLUMN ROPS3A.RAC */,
    NAME VARCHAR(100) /* TYPE OF COLUMN ROPS3A.NAME */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN ROPS3A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN ROPS3A.SCR */,
    AC1 VARCHAR(8) /* TYPE OF COLUMN ROPS3A.AC1 */,
    CLID VARCHAR(15) /* TYPE OF COLUMN ROPS3A.CLID */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_APGR_DZ_12 (
    SDT DATE,
    EDT DATE)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN ROPS2A.ID */,
    SPID INTEGER /* TYPE OF COLUMN ROPS2A.SPID */,
    AC VARCHAR(8) /* TYPE OF COLUMN ROPS2A.AC */,
    RAC VARCHAR(8) /* TYPE OF COLUMN ROPS2A.RAC */,
    NAME VARCHAR(150) /* TYPE OF COLUMN ROPS2A.NAME */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.B0 */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.SCR */,
    TDB NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.TDB */,
    TCR NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.TCR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN ROPS2A.CLID */,
    NAME1 VARCHAR(100) /* TYPE OF COLUMN ROPS2A.NAME1 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN ROPS2A.REGNR */,
    RNAME VARCHAR(150) /* TYPE OF COLUMN ROPS2A.RNAME */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_APGR_FULL_11 (
    SDT DATE,
    EDT DATE,
    PAC1 VARCHAR(8),
    PAC2 VARCHAR(8),
    PAC3 VARCHAR(5),
    PAC4 VARCHAR(8),
    PAC5 VARCHAR(5),
    PCLID VARCHAR(15),
    PXAC1 INTEGER,
    PXAC2 INTEGER,
    PXAC3 INTEGER,
    PXAC4 INTEGER,
    PXAC5 INTEGER,
    PXCLID INTEGER)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN TREPAPAN.ID */,
    SPID INTEGER /* TYPE OF COLUMN TREPAPAN.SPID */,
    AC1 VARCHAR(8) /* TYPE OF COLUMN TREPAPAN.AC1 */,
    AC2 VARCHAR(8) /* TYPE OF COLUMN TREPAPAN.AC2 */,
    AC3 VARCHAR(15) /* TYPE OF COLUMN TREPAPAN.AC3 */,
    AC4 VARCHAR(15) /* TYPE OF COLUMN TREPAPAN.AC4 */,
    AC5 VARCHAR(15) /* TYPE OF COLUMN TREPAPAN.AC5 */,
    CL VARCHAR(15) /* TYPE OF COLUMN TREPAPAN.CL */,
    S1 NUMERIC(15,2) /* TYPE OF COLUMN TREPAPAN.S1 */,
    S2 NUMERIC(15,2) /* TYPE OF COLUMN TREPAPAN.S2 */,
    S3 NUMERIC(15,2) /* TYPE OF COLUMN TREPAPAN.S3 */,
    S4 NUMERIC(15,2) /* TYPE OF COLUMN TREPAPAN.S4 */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_APGR_FULL_12 (
    SDT DATE,
    EDT DATE,
    PAC1 VARCHAR(8),
    PAC2 VARCHAR(8),
    PAC3 VARCHAR(5),
    PAC4 VARCHAR(8),
    PAC5 VARCHAR(5),
    PCLID VARCHAR(15))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN TREPAPAN.ID */,
    SPID INTEGER /* TYPE OF COLUMN TREPAPAN.SPID */,
    AC1 VARCHAR(8) /* TYPE OF COLUMN TREPAPAN.AC1 */,
    AC2 VARCHAR(8) /* TYPE OF COLUMN TREPAPAN.AC2 */,
    AC3 VARCHAR(15) /* TYPE OF COLUMN TREPAPAN.AC3 */,
    AC4 VARCHAR(15) /* TYPE OF COLUMN TREPAPAN.AC4 */,
    AC5 VARCHAR(15) /* TYPE OF COLUMN TREPAPAN.AC5 */,
    CL VARCHAR(15) /* TYPE OF COLUMN TREPAPAN.CL */,
    S1 NUMERIC(15,2) /* TYPE OF COLUMN TREPAPAN.S1 */,
    S2 NUMERIC(15,2) /* TYPE OF COLUMN TREPAPAN.S2 */,
    S3 NUMERIC(15,2) /* TYPE OF COLUMN TREPAPAN.S3 */,
    S4 NUMERIC(15,2) /* TYPE OF COLUMN TREPAPAN.S4 */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_APGR_MT_11 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN TREPMT.ID */,
    SPID INTEGER /* TYPE OF COLUMN TREPMT.SPID */,
    AD VARCHAR(3) /* TYPE OF COLUMN TREPMT.AD */,
    AC1 VARCHAR(15) /* TYPE OF COLUMN TREPMT.AC1 */,
    AC2 VARCHAR(15) /* TYPE OF COLUMN TREPMT.AC2 */,
    ACN1 VARCHAR(100) /* TYPE OF COLUMN TREPMT.ACN1 */,
    ACN2 VARCHAR(100) /* TYPE OF COLUMN TREPMT.ACN2 */,
    M1 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M1 */,
    M2 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M2 */,
    M3 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M3 */,
    M4 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M4 */,
    M5 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M5 */,
    M6 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M6 */,
    M7 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M7 */,
    M8 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M8 */,
    M9 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M9 */,
    M10 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M10 */,
    M11 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M11 */,
    M12 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M12 */,
    N1 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N1 */,
    N2 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N2 */,
    N3 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N3 */,
    N4 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N4 */,
    N5 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N5 */,
    N6 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N6 */,
    N7 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N7 */,
    N8 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N8 */,
    N9 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N9 */,
    N10 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N10 */,
    N11 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N11 */,
    N12 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N12 */,
    MT NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.MT */,
    NT NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.NT */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_APGR_MT_12 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN TREPMT.ID */,
    SPID INTEGER /* TYPE OF COLUMN TREPMT.SPID */,
    AD VARCHAR(3) /* TYPE OF COLUMN TREPMT.AD */,
    AC1 VARCHAR(15) /* TYPE OF COLUMN TREPMT.AC1 */,
    AC2 VARCHAR(15) /* TYPE OF COLUMN TREPMT.AC2 */,
    ACN1 VARCHAR(100) /* TYPE OF COLUMN TREPMT.ACN1 */,
    ACN2 VARCHAR(100) /* TYPE OF COLUMN TREPMT.ACN2 */,
    M1 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M1 */,
    M2 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M2 */,
    M3 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M3 */,
    M4 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M4 */,
    M5 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M5 */,
    M6 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M6 */,
    M7 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M7 */,
    M8 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M8 */,
    M9 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M9 */,
    M10 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M10 */,
    M11 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M11 */,
    M12 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M12 */,
    N1 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N1 */,
    N2 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N2 */,
    N3 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N3 */,
    N4 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N4 */,
    N5 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N5 */,
    N6 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N6 */,
    N7 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N7 */,
    N8 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N8 */,
    N9 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N9 */,
    N10 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N10 */,
    N11 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N11 */,
    N12 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N12 */,
    MT NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.MT */,
    NT NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.NT */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_APGR_MT_21 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN TREPMT.ID */,
    SPID INTEGER /* TYPE OF COLUMN TREPMT.SPID */,
    AD VARCHAR(3) /* TYPE OF COLUMN TREPMT.AD */,
    AC1 VARCHAR(15) /* TYPE OF COLUMN TREPMT.AC1 */,
    AC2 VARCHAR(15) /* TYPE OF COLUMN TREPMT.AC2 */,
    ACN1 VARCHAR(100) /* TYPE OF COLUMN TREPMT.ACN1 */,
    ACN2 VARCHAR(100) /* TYPE OF COLUMN TREPMT.ACN2 */,
    M1 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M1 */,
    M2 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M2 */,
    M3 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M3 */,
    M4 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M4 */,
    M5 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M5 */,
    M6 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M6 */,
    M7 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M7 */,
    M8 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M8 */,
    M9 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M9 */,
    M10 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M10 */,
    M11 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M11 */,
    M12 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M12 */,
    N1 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N1 */,
    N2 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N2 */,
    N3 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N3 */,
    N4 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N4 */,
    N5 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N5 */,
    N6 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N6 */,
    N7 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N7 */,
    N8 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N8 */,
    N9 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N9 */,
    N10 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N10 */,
    N11 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N11 */,
    N12 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N12 */,
    MT NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.MT */,
    NT NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.NT */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_APGR_MT_22 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN TREPMT.ID */,
    SPID INTEGER /* TYPE OF COLUMN TREPMT.SPID */,
    AD VARCHAR(3) /* TYPE OF COLUMN TREPMT.AD */,
    AC1 VARCHAR(15) /* TYPE OF COLUMN TREPMT.AC1 */,
    AC2 VARCHAR(15) /* TYPE OF COLUMN TREPMT.AC2 */,
    ACN1 VARCHAR(100) /* TYPE OF COLUMN TREPMT.ACN1 */,
    ACN2 VARCHAR(100) /* TYPE OF COLUMN TREPMT.ACN2 */,
    M1 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M1 */,
    M2 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M2 */,
    M3 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M3 */,
    M4 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M4 */,
    M5 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M5 */,
    M6 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M6 */,
    M7 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M7 */,
    M8 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M8 */,
    M9 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M9 */,
    M10 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M10 */,
    M11 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M11 */,
    M12 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M12 */,
    N1 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N1 */,
    N2 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N2 */,
    N3 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N3 */,
    N4 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N4 */,
    N5 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N5 */,
    N6 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N6 */,
    N7 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N7 */,
    N8 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N8 */,
    N9 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N9 */,
    N10 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N10 */,
    N11 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N11 */,
    N12 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N12 */,
    MT NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.MT */,
    NT NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.NT */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_APGR_NP_11 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN ROPS2A.ID */,
    SPID INTEGER /* TYPE OF COLUMN ROPS2A.SPID */,
    AC VARCHAR(8) /* TYPE OF COLUMN ROPS2A.AC */,
    RAC VARCHAR(8) /* TYPE OF COLUMN ROPS2A.RAC */,
    NAME VARCHAR(150) /* TYPE OF COLUMN ROPS2A.NAME */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.B0 */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.SCR */,
    TDB NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.TDB */,
    TCR NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.TCR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN ROPS2A.CLID */,
    NAME1 VARCHAR(100) /* TYPE OF COLUMN ROPS2A.NAME1 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN ROPS2A.REGNR */,
    RNAME VARCHAR(150) /* TYPE OF COLUMN ROPS2A.RNAME */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_APGR_NP_12 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PACLEN INTEGER)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN ROPS2A.ID */,
    SPID INTEGER /* TYPE OF COLUMN ROPS2A.SPID */,
    AC VARCHAR(8) /* TYPE OF COLUMN ROPS2A.AC */,
    RAC VARCHAR(8) /* TYPE OF COLUMN ROPS2A.RAC */,
    NAME VARCHAR(150) /* TYPE OF COLUMN ROPS2A.NAME */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.B0 */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.SCR */,
    TDB NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.TDB */,
    TCR NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.TCR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN ROPS2A.CLID */,
    NAME1 VARCHAR(100) /* TYPE OF COLUMN ROPS2A.NAME1 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN ROPS2A.REGNR */,
    RNAME VARCHAR(150) /* TYPE OF COLUMN ROPS2A.RNAME */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_BAL_11 (
    SDT DATE,
    EDT DATE)
RETURNS (
    AC VARCHAR(8),
    S1 MONEY,
    S2 MONEY)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_BAL_12 (
    SDT DATE,
    EDT DATE,
    PBALID VARCHAR(10))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN BALA21.ID */,
    SPID INTEGER /* TYPE OF COLUMN BALA21.SPID */,
    BID INTEGER /* TYPE OF COLUMN BALA21.BID */,
    S1 NUMERIC(15,2) /* TYPE OF COLUMN BALA21.S1 */,
    S2 NUMERIC(15,2) /* TYPE OF COLUMN BALA21.S2 */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_BAL_13 (
    PBALID VARCHAR(10))
RETURNS (
    AC VARCHAR(8) /* TYPE OF COLUMN ACP21.AC */,
    NAME VARCHAR(100) /* TYPE OF COLUMN ACP21.NAME */,
    ID1 VARCHAR(15) /* TYPE OF COLUMN ACP21.ID1 */,
    ID2 VARCHAR(15) /* TYPE OF COLUMN ACP21.ID2 */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_BAL_21 (
    SDT DATE,
    EDT DATE)
RETURNS (
    AC VARCHAR(8),
    M0 MONEY,
    M1 MONEY,
    M2 MONEY,
    M3 MONEY,
    M4 MONEY,
    M5 MONEY,
    M6 MONEY,
    M7 MONEY,
    M8 MONEY,
    M9 MONEY,
    M10 MONEY,
    M11 MONEY,
    M12 MONEY)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_BAL_22 (
    SDT DATE,
    EDT DATE,
    PBALID VARCHAR(10))
RETURNS (
    ID INTEGER,
    SPID INTEGER,
    BID INTEGER,
    M0 MONEY,
    M1 MONEY,
    M2 MONEY,
    M3 MONEY,
    M4 MONEY,
    M5 MONEY,
    M6 MONEY,
    M7 MONEY,
    M8 MONEY,
    M9 MONEY,
    M10 MONEY,
    M11 MONEY,
    M12 MONEY)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_CURCHECK_01 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(8),
    PCUR VARCHAR(3))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN ROPS1A.ID */,
    SPID INTEGER /* TYPE OF COLUMN ROPS1A.SPID */,
    DID INTEGER /* TYPE OF COLUMN ROPS1A.DID */,
    DETE DATE /* TYPE OF COLUMN ROPS1A.DETE */,
    NRX VARCHAR(5) /* TYPE OF COLUMN ROPS1A.NRX */,
    DOCTYP VARCHAR(10) /* TYPE OF COLUMN ROPS1A.DOCTYP */,
    DOCTYP1 VARCHAR(10) /* TYPE OF COLUMN ROPS1A.DOCTYP1 */,
    DOCTYP2 VARCHAR(10) /* TYPE OF COLUMN ROPS1A.DOCTYP2 */,
    DOCST VARCHAR(6) /* TYPE OF COLUMN ROPS1A.DOCST */,
    DOCNR VARCHAR(15) /* TYPE OF COLUMN ROPS1A.DOCNR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN ROPS1A.CLID */,
    CLID2 VARCHAR(15) /* TYPE OF COLUMN ROPS1A.CLID2 */,
    NAME VARCHAR(100) /* TYPE OF COLUMN ROPS1A.NAME */,
    NAME2 VARCHAR(100) /* TYPE OF COLUMN ROPS1A.NAME2 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN ROPS1A.REGNR */,
    REGNR2 VARCHAR(15) /* TYPE OF COLUMN ROPS1A.REGNR2 */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.B0 */,
    DESCR VARCHAR(80) /* TYPE OF COLUMN ROPS1A.DESCR */,
    DESCR2 VARCHAR(80) /* TYPE OF COLUMN ROPS1A.DESCR2 */,
    AC1 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.AC1 */,
    AC2 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.AC2 */,
    SAC1 VARCHAR(100) /* TYPE OF COLUMN ROPS1A.SAC1 */,
    SAC2 VARCHAR(100) /* TYPE OF COLUMN ROPS1A.SAC2 */,
    SUMMC NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SUMMC */,
    CUR VARCHAR(3) /* TYPE OF COLUMN ROPS1A.CUR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SUMM */,
    PVN NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.PVN */,
    RAC VARCHAR(8) /* TYPE OF COLUMN ROPS1A.RAC */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SCR */,
    RAC2 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.RAC2 */,
    RAC3 VARCHAR(5) /* TYPE OF COLUMN ROPS1A.RAC3 */,
    RAC4 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.RAC4 */,
    RAC5 VARCHAR(5) /* TYPE OF COLUMN ROPS1A.RAC5 */,
    QV FLOAT /* TYPE OF COLUMN ROPS1A.QV */,
    ZNR INTEGER /* TYPE OF COLUMN ROPS1A.ZNR */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_CURRDIFF_01 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(8),
    PCUR VARCHAR(3))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN ROPS2A.ID */,
    SPID INTEGER /* TYPE OF COLUMN ROPS2A.SPID */,
    AC VARCHAR(8) /* TYPE OF COLUMN ROPS2A.AC */,
    RAC VARCHAR(8) /* TYPE OF COLUMN ROPS2A.RAC */,
    NAME VARCHAR(150) /* TYPE OF COLUMN ROPS2A.NAME */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.B0 */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.SCR */,
    TDB NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.TDB */,
    TCR NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.TCR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN ROPS2A.CLID */,
    NAME1 VARCHAR(100) /* TYPE OF COLUMN ROPS2A.NAME1 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN ROPS2A.REGNR */,
    RNAME VARCHAR(150) /* TYPE OF COLUMN ROPS2A.RNAME */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_DARZ_1 (
    SDT DATE,
    EDT DATE)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN TREPDARZ1.ID */,
    SPID INTEGER /* TYPE OF COLUMN TREPDARZ1.SPID */,
    DID INTEGER /* TYPE OF COLUMN TREPDARZ1.DID */,
    RID INTEGER /* TYPE OF COLUMN TREPDARZ1.RID */,
    DETE DATE /* TYPE OF COLUMN TREPDARZ1.DETE */,
    NRX VARCHAR(5) /* TYPE OF COLUMN TREPDARZ1.NRX */,
    DOCTYP VARCHAR(10) /* TYPE OF COLUMN TREPDARZ1.DOCTYP */,
    DOCST VARCHAR(6) /* TYPE OF COLUMN TREPDARZ1.DOCST */,
    DOCNR VARCHAR(15) /* TYPE OF COLUMN TREPDARZ1.DOCNR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN TREPDARZ1.CLID */,
    NAME VARCHAR(100) /* TYPE OF COLUMN TREPDARZ1.NAME */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN TREPDARZ1.REGNR */,
    DESCR VARCHAR(80) /* TYPE OF COLUMN TREPDARZ1.DESCR */,
    AC1 VARCHAR(8) /* TYPE OF COLUMN TREPDARZ1.AC1 */,
    AC2 VARCHAR(8) /* TYPE OF COLUMN TREPDARZ1.AC2 */,
    AA NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ1.AA */,
    A1 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ1.A1 */,
    A2 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ1.A2 */,
    A3 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ1.A3 */,
    A4 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ1.A4 */,
    A5 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ1.A5 */,
    A6 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ1.A6 */,
    A7 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ1.A7 */,
    A8 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ1.A8 */,
    A9 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ1.A9 */,
    A10 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ1.A10 */,
    A11 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ1.A11 */,
    A12 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ1.A12 */,
    A13 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ1.A13 */,
    A14 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ1.A14 */,
    A15 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ1.A15 */,
    A16 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ1.A16 */,
    A17 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ1.A17 */,
    A18 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ1.A18 */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_DARZ_2 (
    SDT DATE,
    EDT DATE)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN TREPDARZ2.ID */,
    SPID INTEGER /* TYPE OF COLUMN TREPDARZ2.SPID */,
    RID0 INTEGER /* TYPE OF COLUMN TREPDARZ2.RID0 */,
    A1 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ2.A1 */,
    A2 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ2.A2 */,
    A3 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ2.A3 */,
    A4 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ2.A4 */,
    A5 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ2.A5 */,
    A6 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ2.A6 */,
    A7 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ2.A7 */,
    A8 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ2.A8 */,
    A9 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ2.A9 */,
    A10 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ2.A10 */,
    A11 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ2.A11 */,
    A12 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ2.A12 */,
    A13 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ2.A13 */,
    A14 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ2.A14 */,
    A15 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ2.A15 */,
    A16 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ2.A16 */,
    A17 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ2.A17 */,
    A18 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ2.A18 */,
    A19 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ2.A19 */,
    A20 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ2.A20 */,
    A21 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ2.A21 */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_DARZ_3 (
    SDT DATE,
    EDT DATE)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN TREPDARZ1.ID */,
    SPID INTEGER /* TYPE OF COLUMN TREPDARZ1.SPID */,
    DID INTEGER /* TYPE OF COLUMN TREPDARZ1.DID */,
    RID INTEGER /* TYPE OF COLUMN TREPDARZ1.RID */,
    DETE DATE /* TYPE OF COLUMN TREPDARZ1.DETE */,
    NRX VARCHAR(5) /* TYPE OF COLUMN TREPDARZ1.NRX */,
    DOCTYP VARCHAR(10) /* TYPE OF COLUMN TREPDARZ1.DOCTYP */,
    DOCST VARCHAR(6) /* TYPE OF COLUMN TREPDARZ1.DOCST */,
    DOCNR VARCHAR(15) /* TYPE OF COLUMN TREPDARZ1.DOCNR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN TREPDARZ1.CLID */,
    NAME VARCHAR(100) /* TYPE OF COLUMN TREPDARZ1.NAME */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN TREPDARZ1.REGNR */,
    DESCR VARCHAR(80) /* TYPE OF COLUMN TREPDARZ1.DESCR */,
    AC1 VARCHAR(8) /* TYPE OF COLUMN TREPDARZ1.AC1 */,
    AC2 VARCHAR(8) /* TYPE OF COLUMN TREPDARZ1.AC2 */,
    AA NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ1.AA */,
    A1 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ1.A1 */,
    A2 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ1.A2 */,
    A3 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ1.A3 */,
    A4 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ1.A4 */,
    A5 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ1.A5 */,
    A6 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ1.A6 */,
    A7 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ1.A7 */,
    A8 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ1.A8 */,
    A9 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ1.A9 */,
    A10 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ1.A10 */,
    A11 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ1.A11 */,
    A12 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ1.A12 */,
    A13 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ1.A13 */,
    A14 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ1.A14 */,
    A15 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ1.A15 */,
    A16 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ1.A16 */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_DARZ_4 (
    SDT DATE,
    EDT DATE)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN TREPDARZ2.ID */,
    SPID INTEGER /* TYPE OF COLUMN TREPDARZ2.SPID */,
    RID0 INTEGER /* TYPE OF COLUMN TREPDARZ2.RID0 */,
    A1 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ2.A1 */,
    A2 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ2.A2 */,
    A3 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ2.A3 */,
    A4 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ2.A4 */,
    A5 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ2.A5 */,
    A6 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ2.A6 */,
    A7 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ2.A7 */,
    A8 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ2.A8 */,
    A9 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ2.A9 */,
    A10 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ2.A10 */,
    A11 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ2.A11 */,
    A12 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ2.A12 */,
    A13 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ2.A13 */,
    A14 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ2.A14 */,
    A15 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ2.A15 */,
    A16 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ2.A16 */,
    A17 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ2.A17 */,
    A18 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ2.A18 */,
    A19 NUMERIC(15,2) /* TYPE OF COLUMN TREPDARZ2.A19 */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_DOKS_11 (
    PDATE1 DATE,
    PDATE2 DATE,
    PTEXT VARCHAR(50),
    PCLID VARCHAR(15),
    PAC11 VARCHAR(8),
    PAC12 VARCHAR(8),
    PAC13 VARCHAR(5),
    PAC14 VARCHAR(8),
    PAC15 VARCHAR(5),
    PAC21 VARCHAR(8),
    PAC22 VARCHAR(8),
    PAC23 VARCHAR(5),
    PAC24 VARCHAR(8),
    PAC25 VARCHAR(5),
    PDOCGR VARCHAR(10),
    PANDOR VARCHAR(3))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN ROPS1A.ID */,
    SPID INTEGER /* TYPE OF COLUMN ROPS1A.SPID */,
    DID INTEGER /* TYPE OF COLUMN ROPS1A.DID */,
    DETE DATE /* TYPE OF COLUMN ROPS1A.DETE */,
    NRX VARCHAR(5) /* TYPE OF COLUMN ROPS1A.NRX */,
    DOCTYP VARCHAR(10) /* TYPE OF COLUMN ROPS1A.DOCTYP */,
    DOCTYP1 VARCHAR(10) /* TYPE OF COLUMN ROPS1A.DOCTYP1 */,
    DOCTYP2 VARCHAR(10) /* TYPE OF COLUMN ROPS1A.DOCTYP2 */,
    DOCST VARCHAR(6) /* TYPE OF COLUMN ROPS1A.DOCST */,
    DOCNR VARCHAR(15) /* TYPE OF COLUMN ROPS1A.DOCNR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN ROPS1A.CLID */,
    CLID2 VARCHAR(15) /* TYPE OF COLUMN ROPS1A.CLID2 */,
    NAME VARCHAR(100) /* TYPE OF COLUMN ROPS1A.NAME */,
    NAME2 VARCHAR(100) /* TYPE OF COLUMN ROPS1A.NAME2 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN ROPS1A.REGNR */,
    REGNR2 VARCHAR(15) /* TYPE OF COLUMN ROPS1A.REGNR2 */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.B0 */,
    DESCR VARCHAR(80) /* TYPE OF COLUMN ROPS1A.DESCR */,
    DESCR2 VARCHAR(80) /* TYPE OF COLUMN ROPS1A.DESCR2 */,
    AC1 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.AC1 */,
    AC2 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.AC2 */,
    SAC1 VARCHAR(100) /* TYPE OF COLUMN ROPS1A.SAC1 */,
    SAC2 VARCHAR(100) /* TYPE OF COLUMN ROPS1A.SAC2 */,
    SUMMC NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SUMMC */,
    CUR VARCHAR(3) /* TYPE OF COLUMN ROPS1A.CUR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SUMM */,
    PVN NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.PVN */,
    RAC VARCHAR(8) /* TYPE OF COLUMN ROPS1A.RAC */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SCR */,
    RAC2 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.RAC2 */,
    RAC3 VARCHAR(5) /* TYPE OF COLUMN ROPS1A.RAC3 */,
    RAC4 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.RAC4 */,
    RAC5 VARCHAR(5) /* TYPE OF COLUMN ROPS1A.RAC5 */,
    QV FLOAT /* TYPE OF COLUMN ROPS1A.QV */,
    ZNR INTEGER /* TYPE OF COLUMN ROPS1A.ZNR */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_KG_11 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN ROPS1A.ID */,
    SPID INTEGER /* TYPE OF COLUMN ROPS1A.SPID */,
    DID INTEGER /* TYPE OF COLUMN ROPS1A.DID */,
    DETE DATE /* TYPE OF COLUMN ROPS1A.DETE */,
    NRX VARCHAR(5) /* TYPE OF COLUMN ROPS1A.NRX */,
    DOCTYP VARCHAR(10) /* TYPE OF COLUMN ROPS1A.DOCTYP */,
    DOCTYP1 VARCHAR(10) /* TYPE OF COLUMN ROPS1A.DOCTYP1 */,
    DOCTYP2 VARCHAR(10) /* TYPE OF COLUMN ROPS1A.DOCTYP2 */,
    DOCST VARCHAR(6) /* TYPE OF COLUMN ROPS1A.DOCST */,
    DOCNR VARCHAR(15) /* TYPE OF COLUMN ROPS1A.DOCNR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN ROPS1A.CLID */,
    CLID2 VARCHAR(15) /* TYPE OF COLUMN ROPS1A.CLID2 */,
    NAME VARCHAR(100) /* TYPE OF COLUMN ROPS1A.NAME */,
    NAME2 VARCHAR(100) /* TYPE OF COLUMN ROPS1A.NAME2 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN ROPS1A.REGNR */,
    REGNR2 VARCHAR(15) /* TYPE OF COLUMN ROPS1A.REGNR2 */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.B0 */,
    DESCR VARCHAR(80) /* TYPE OF COLUMN ROPS1A.DESCR */,
    DESCR2 VARCHAR(80) /* TYPE OF COLUMN ROPS1A.DESCR2 */,
    AC1 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.AC1 */,
    AC2 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.AC2 */,
    SAC1 VARCHAR(100) /* TYPE OF COLUMN ROPS1A.SAC1 */,
    SAC2 VARCHAR(100) /* TYPE OF COLUMN ROPS1A.SAC2 */,
    SUMMC NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SUMMC */,
    CUR VARCHAR(3) /* TYPE OF COLUMN ROPS1A.CUR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SUMM */,
    PVN NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.PVN */,
    RAC VARCHAR(8) /* TYPE OF COLUMN ROPS1A.RAC */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SCR */,
    RAC2 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.RAC2 */,
    RAC3 VARCHAR(5) /* TYPE OF COLUMN ROPS1A.RAC3 */,
    RAC4 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.RAC4 */,
    RAC5 VARCHAR(5) /* TYPE OF COLUMN ROPS1A.RAC5 */,
    QV FLOAT /* TYPE OF COLUMN ROPS1A.QV */,
    ZNR INTEGER /* TYPE OF COLUMN ROPS1A.ZNR */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_KIEO_1 (
    PDID INTEGER)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN ROPS1A.ID */,
    SPID INTEGER /* TYPE OF COLUMN ROPS1A.SPID */,
    DID INTEGER /* TYPE OF COLUMN ROPS1A.DID */,
    DETE DATE /* TYPE OF COLUMN ROPS1A.DETE */,
    NRX VARCHAR(5) /* TYPE OF COLUMN ROPS1A.NRX */,
    DOCTYP VARCHAR(10) /* TYPE OF COLUMN ROPS1A.DOCTYP */,
    DOCTYP1 VARCHAR(10) /* TYPE OF COLUMN ROPS1A.DOCTYP1 */,
    DOCTYP2 VARCHAR(10) /* TYPE OF COLUMN ROPS1A.DOCTYP2 */,
    DOCST VARCHAR(6) /* TYPE OF COLUMN ROPS1A.DOCST */,
    DOCNR VARCHAR(15) /* TYPE OF COLUMN ROPS1A.DOCNR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN ROPS1A.CLID */,
    CLID2 VARCHAR(15) /* TYPE OF COLUMN ROPS1A.CLID2 */,
    NAME VARCHAR(100) /* TYPE OF COLUMN ROPS1A.NAME */,
    NAME2 VARCHAR(100) /* TYPE OF COLUMN ROPS1A.NAME2 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN ROPS1A.REGNR */,
    REGNR2 VARCHAR(15) /* TYPE OF COLUMN ROPS1A.REGNR2 */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.B0 */,
    DESCR VARCHAR(80) /* TYPE OF COLUMN ROPS1A.DESCR */,
    DESCR2 VARCHAR(80) /* TYPE OF COLUMN ROPS1A.DESCR2 */,
    AC1 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.AC1 */,
    AC2 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.AC2 */,
    SAC1 VARCHAR(100) /* TYPE OF COLUMN ROPS1A.SAC1 */,
    SAC2 VARCHAR(100) /* TYPE OF COLUMN ROPS1A.SAC2 */,
    SUMMC NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SUMMC */,
    CUR VARCHAR(3) /* TYPE OF COLUMN ROPS1A.CUR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SUMM */,
    PVN NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.PVN */,
    RAC VARCHAR(8) /* TYPE OF COLUMN ROPS1A.RAC */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SCR */,
    RAC2 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.RAC2 */,
    RAC3 VARCHAR(5) /* TYPE OF COLUMN ROPS1A.RAC3 */,
    RAC4 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.RAC4 */,
    RAC5 VARCHAR(5) /* TYPE OF COLUMN ROPS1A.RAC5 */,
    QV FLOAT /* TYPE OF COLUMN ROPS1A.QV */,
    ZNR INTEGER /* TYPE OF COLUMN ROPS1A.ZNR */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_KIEO_21 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN ROPS1A.ID */,
    SPID INTEGER /* TYPE OF COLUMN ROPS1A.SPID */,
    DID INTEGER /* TYPE OF COLUMN ROPS1A.DID */,
    DETE DATE /* TYPE OF COLUMN ROPS1A.DETE */,
    NRX VARCHAR(5) /* TYPE OF COLUMN ROPS1A.NRX */,
    DOCTYP VARCHAR(10) /* TYPE OF COLUMN ROPS1A.DOCTYP */,
    DOCTYP1 VARCHAR(10) /* TYPE OF COLUMN ROPS1A.DOCTYP1 */,
    DOCTYP2 VARCHAR(10) /* TYPE OF COLUMN ROPS1A.DOCTYP2 */,
    DOCST VARCHAR(6) /* TYPE OF COLUMN ROPS1A.DOCST */,
    DOCNR VARCHAR(15) /* TYPE OF COLUMN ROPS1A.DOCNR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN ROPS1A.CLID */,
    CLID2 VARCHAR(15) /* TYPE OF COLUMN ROPS1A.CLID2 */,
    NAME VARCHAR(100) /* TYPE OF COLUMN ROPS1A.NAME */,
    NAME2 VARCHAR(100) /* TYPE OF COLUMN ROPS1A.NAME2 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN ROPS1A.REGNR */,
    REGNR2 VARCHAR(15) /* TYPE OF COLUMN ROPS1A.REGNR2 */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.B0 */,
    DESCR VARCHAR(80) /* TYPE OF COLUMN ROPS1A.DESCR */,
    DESCR2 VARCHAR(80) /* TYPE OF COLUMN ROPS1A.DESCR2 */,
    AC1 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.AC1 */,
    AC2 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.AC2 */,
    SAC1 VARCHAR(100) /* TYPE OF COLUMN ROPS1A.SAC1 */,
    SAC2 VARCHAR(100) /* TYPE OF COLUMN ROPS1A.SAC2 */,
    SUMMC NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SUMMC */,
    CUR VARCHAR(3) /* TYPE OF COLUMN ROPS1A.CUR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SUMM */,
    PVN NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.PVN */,
    RAC VARCHAR(8) /* TYPE OF COLUMN ROPS1A.RAC */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SCR */,
    RAC2 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.RAC2 */,
    RAC3 VARCHAR(5) /* TYPE OF COLUMN ROPS1A.RAC3 */,
    RAC4 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.RAC4 */,
    RAC5 VARCHAR(5) /* TYPE OF COLUMN ROPS1A.RAC5 */,
    QV FLOAT /* TYPE OF COLUMN ROPS1A.QV */,
    ZNR INTEGER /* TYPE OF COLUMN ROPS1A.ZNR */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_KIZO_21 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN ROPS1A.ID */,
    SPID INTEGER /* TYPE OF COLUMN ROPS1A.SPID */,
    DID INTEGER /* TYPE OF COLUMN ROPS1A.DID */,
    DETE DATE /* TYPE OF COLUMN ROPS1A.DETE */,
    NRX VARCHAR(5) /* TYPE OF COLUMN ROPS1A.NRX */,
    DOCTYP VARCHAR(10) /* TYPE OF COLUMN ROPS1A.DOCTYP */,
    DOCTYP1 VARCHAR(10) /* TYPE OF COLUMN ROPS1A.DOCTYP1 */,
    DOCTYP2 VARCHAR(10) /* TYPE OF COLUMN ROPS1A.DOCTYP2 */,
    DOCST VARCHAR(6) /* TYPE OF COLUMN ROPS1A.DOCST */,
    DOCNR VARCHAR(15) /* TYPE OF COLUMN ROPS1A.DOCNR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN ROPS1A.CLID */,
    CLID2 VARCHAR(15) /* TYPE OF COLUMN ROPS1A.CLID2 */,
    NAME VARCHAR(100) /* TYPE OF COLUMN ROPS1A.NAME */,
    NAME2 VARCHAR(100) /* TYPE OF COLUMN ROPS1A.NAME2 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN ROPS1A.REGNR */,
    REGNR2 VARCHAR(15) /* TYPE OF COLUMN ROPS1A.REGNR2 */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.B0 */,
    DESCR VARCHAR(80) /* TYPE OF COLUMN ROPS1A.DESCR */,
    DESCR2 VARCHAR(80) /* TYPE OF COLUMN ROPS1A.DESCR2 */,
    AC1 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.AC1 */,
    AC2 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.AC2 */,
    SAC1 VARCHAR(100) /* TYPE OF COLUMN ROPS1A.SAC1 */,
    SAC2 VARCHAR(100) /* TYPE OF COLUMN ROPS1A.SAC2 */,
    SUMMC NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SUMMC */,
    CUR VARCHAR(3) /* TYPE OF COLUMN ROPS1A.CUR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SUMM */,
    PVN NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.PVN */,
    RAC VARCHAR(8) /* TYPE OF COLUMN ROPS1A.RAC */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SCR */,
    RAC2 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.RAC2 */,
    RAC3 VARCHAR(5) /* TYPE OF COLUMN ROPS1A.RAC3 */,
    RAC4 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.RAC4 */,
    RAC5 VARCHAR(5) /* TYPE OF COLUMN ROPS1A.RAC5 */,
    QV FLOAT /* TYPE OF COLUMN ROPS1A.QV */,
    ZNR INTEGER /* TYPE OF COLUMN ROPS1A.ZNR */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_KORESP_01 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN ROPS3A.ID */,
    SPID INTEGER /* TYPE OF COLUMN ROPS3A.SPID */,
    RAC VARCHAR(8) /* TYPE OF COLUMN ROPS3A.RAC */,
    NAME VARCHAR(100) /* TYPE OF COLUMN ROPS3A.NAME */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN ROPS3A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN ROPS3A.SCR */,
    AC1 VARCHAR(8) /* TYPE OF COLUMN ROPS3A.AC1 */,
    CLID VARCHAR(15) /* TYPE OF COLUMN ROPS3A.CLID */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_KORESP_01_CLID (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN ROPS3A.ID */,
    SPID INTEGER /* TYPE OF COLUMN ROPS3A.SPID */,
    RAC VARCHAR(8) /* TYPE OF COLUMN ROPS3A.RAC */,
    NAME VARCHAR(100) /* TYPE OF COLUMN ROPS3A.NAME */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN ROPS3A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN ROPS3A.SCR */,
    AC1 VARCHAR(8) /* TYPE OF COLUMN ROPS3A.AC1 */,
    CLID VARCHAR(15) /* TYPE OF COLUMN ROPS3A.CLID */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_KORESP_01_CLID2 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN ROPS3A.ID */,
    SPID INTEGER /* TYPE OF COLUMN ROPS3A.SPID */,
    RAC VARCHAR(8) /* TYPE OF COLUMN ROPS3A.RAC */,
    NAME VARCHAR(100) /* TYPE OF COLUMN ROPS3A.NAME */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN ROPS3A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN ROPS3A.SCR */,
    AC1 VARCHAR(8) /* TYPE OF COLUMN ROPS3A.AC1 */,
    CLID VARCHAR(15) /* TYPE OF COLUMN ROPS3A.CLID */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_KORESP_01_CUR (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15),
    PCUR VARCHAR(3))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN ROPS3A.ID */,
    SPID INTEGER /* TYPE OF COLUMN ROPS3A.SPID */,
    RAC VARCHAR(8) /* TYPE OF COLUMN ROPS3A.RAC */,
    NAME VARCHAR(100) /* TYPE OF COLUMN ROPS3A.NAME */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN ROPS3A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN ROPS3A.SCR */,
    AC1 VARCHAR(8) /* TYPE OF COLUMN ROPS3A.AC1 */,
    CLID VARCHAR(15) /* TYPE OF COLUMN ROPS3A.CLID */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_KORESP_02 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN ROPS3A.ID */,
    SPID INTEGER /* TYPE OF COLUMN ROPS3A.SPID */,
    RAC VARCHAR(8) /* TYPE OF COLUMN ROPS3A.RAC */,
    NAME VARCHAR(100) /* TYPE OF COLUMN ROPS3A.NAME */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN ROPS3A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN ROPS3A.SCR */,
    AC1 VARCHAR(8) /* TYPE OF COLUMN ROPS3A.AC1 */,
    CLID VARCHAR(15) /* TYPE OF COLUMN ROPS3A.CLID */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_KORESP_02_CLID (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN ROPS3A.ID */,
    SPID INTEGER /* TYPE OF COLUMN ROPS3A.SPID */,
    RAC VARCHAR(8) /* TYPE OF COLUMN ROPS3A.RAC */,
    NAME VARCHAR(100) /* TYPE OF COLUMN ROPS3A.NAME */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN ROPS3A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN ROPS3A.SCR */,
    AC1 VARCHAR(8) /* TYPE OF COLUMN ROPS3A.AC1 */,
    CLID VARCHAR(15) /* TYPE OF COLUMN ROPS3A.CLID */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_KORESP_11 (
    PSD DATE,
    PED DATE,
    PAC VARCHAR(8))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN ROPS1A.ID */,
    SPID INTEGER /* TYPE OF COLUMN ROPS1A.SPID */,
    DID INTEGER /* TYPE OF COLUMN ROPS1A.DID */,
    DETE DATE /* TYPE OF COLUMN ROPS1A.DETE */,
    NRX VARCHAR(5) /* TYPE OF COLUMN ROPS1A.NRX */,
    DOCTYP VARCHAR(10) /* TYPE OF COLUMN ROPS1A.DOCTYP */,
    DOCTYP1 VARCHAR(10) /* TYPE OF COLUMN ROPS1A.DOCTYP1 */,
    DOCTYP2 VARCHAR(10) /* TYPE OF COLUMN ROPS1A.DOCTYP2 */,
    DOCST VARCHAR(6) /* TYPE OF COLUMN ROPS1A.DOCST */,
    DOCNR VARCHAR(15) /* TYPE OF COLUMN ROPS1A.DOCNR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN ROPS1A.CLID */,
    CLID2 VARCHAR(15) /* TYPE OF COLUMN ROPS1A.CLID2 */,
    NAME VARCHAR(100) /* TYPE OF COLUMN ROPS1A.NAME */,
    NAME2 VARCHAR(100) /* TYPE OF COLUMN ROPS1A.NAME2 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN ROPS1A.REGNR */,
    REGNR2 VARCHAR(15) /* TYPE OF COLUMN ROPS1A.REGNR2 */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.B0 */,
    DESCR VARCHAR(80) /* TYPE OF COLUMN ROPS1A.DESCR */,
    DESCR2 VARCHAR(80) /* TYPE OF COLUMN ROPS1A.DESCR2 */,
    AC1 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.AC1 */,
    AC2 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.AC2 */,
    SAC1 VARCHAR(100) /* TYPE OF COLUMN ROPS1A.SAC1 */,
    SAC2 VARCHAR(100) /* TYPE OF COLUMN ROPS1A.SAC2 */,
    SUMMC NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SUMMC */,
    CUR VARCHAR(3) /* TYPE OF COLUMN ROPS1A.CUR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SUMM */,
    PVN NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.PVN */,
    RAC VARCHAR(8) /* TYPE OF COLUMN ROPS1A.RAC */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SCR */,
    RAC2 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.RAC2 */,
    RAC3 VARCHAR(5) /* TYPE OF COLUMN ROPS1A.RAC3 */,
    RAC4 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.RAC4 */,
    RAC5 VARCHAR(5) /* TYPE OF COLUMN ROPS1A.RAC5 */,
    QV FLOAT /* TYPE OF COLUMN ROPS1A.QV */,
    ZNR INTEGER /* TYPE OF COLUMN ROPS1A.ZNR */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_KORESP_11_CLID (
    PSD DATE,
    PED DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN ROPS1A.ID */,
    SPID INTEGER /* TYPE OF COLUMN ROPS1A.SPID */,
    DID INTEGER /* TYPE OF COLUMN ROPS1A.DID */,
    DETE DATE /* TYPE OF COLUMN ROPS1A.DETE */,
    NRX VARCHAR(5) /* TYPE OF COLUMN ROPS1A.NRX */,
    DOCTYP VARCHAR(10) /* TYPE OF COLUMN ROPS1A.DOCTYP */,
    DOCTYP1 VARCHAR(10) /* TYPE OF COLUMN ROPS1A.DOCTYP1 */,
    DOCTYP2 VARCHAR(10) /* TYPE OF COLUMN ROPS1A.DOCTYP2 */,
    DOCST VARCHAR(6) /* TYPE OF COLUMN ROPS1A.DOCST */,
    DOCNR VARCHAR(15) /* TYPE OF COLUMN ROPS1A.DOCNR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN ROPS1A.CLID */,
    CLID2 VARCHAR(15) /* TYPE OF COLUMN ROPS1A.CLID2 */,
    NAME VARCHAR(100) /* TYPE OF COLUMN ROPS1A.NAME */,
    NAME2 VARCHAR(100) /* TYPE OF COLUMN ROPS1A.NAME2 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN ROPS1A.REGNR */,
    REGNR2 VARCHAR(15) /* TYPE OF COLUMN ROPS1A.REGNR2 */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.B0 */,
    DESCR VARCHAR(80) /* TYPE OF COLUMN ROPS1A.DESCR */,
    DESCR2 VARCHAR(80) /* TYPE OF COLUMN ROPS1A.DESCR2 */,
    AC1 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.AC1 */,
    AC2 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.AC2 */,
    SAC1 VARCHAR(100) /* TYPE OF COLUMN ROPS1A.SAC1 */,
    SAC2 VARCHAR(100) /* TYPE OF COLUMN ROPS1A.SAC2 */,
    SUMMC NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SUMMC */,
    CUR VARCHAR(3) /* TYPE OF COLUMN ROPS1A.CUR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SUMM */,
    PVN NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.PVN */,
    RAC VARCHAR(8) /* TYPE OF COLUMN ROPS1A.RAC */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SCR */,
    RAC2 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.RAC2 */,
    RAC3 VARCHAR(5) /* TYPE OF COLUMN ROPS1A.RAC3 */,
    RAC4 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.RAC4 */,
    RAC5 VARCHAR(5) /* TYPE OF COLUMN ROPS1A.RAC5 */,
    QV FLOAT /* TYPE OF COLUMN ROPS1A.QV */,
    ZNR INTEGER /* TYPE OF COLUMN ROPS1A.ZNR */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_KORESP_11_CLID2 (
    PSD DATE,
    PED DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN ROPS1A.ID */,
    SPID INTEGER /* TYPE OF COLUMN ROPS1A.SPID */,
    DID INTEGER /* TYPE OF COLUMN ROPS1A.DID */,
    DETE DATE /* TYPE OF COLUMN ROPS1A.DETE */,
    NRX VARCHAR(5) /* TYPE OF COLUMN ROPS1A.NRX */,
    DOCTYP VARCHAR(10) /* TYPE OF COLUMN ROPS1A.DOCTYP */,
    DOCTYP1 VARCHAR(10) /* TYPE OF COLUMN ROPS1A.DOCTYP1 */,
    DOCTYP2 VARCHAR(10) /* TYPE OF COLUMN ROPS1A.DOCTYP2 */,
    DOCST VARCHAR(6) /* TYPE OF COLUMN ROPS1A.DOCST */,
    DOCNR VARCHAR(15) /* TYPE OF COLUMN ROPS1A.DOCNR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN ROPS1A.CLID */,
    CLID2 VARCHAR(15) /* TYPE OF COLUMN ROPS1A.CLID2 */,
    NAME VARCHAR(100) /* TYPE OF COLUMN ROPS1A.NAME */,
    NAME2 VARCHAR(100) /* TYPE OF COLUMN ROPS1A.NAME2 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN ROPS1A.REGNR */,
    REGNR2 VARCHAR(15) /* TYPE OF COLUMN ROPS1A.REGNR2 */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.B0 */,
    DESCR VARCHAR(80) /* TYPE OF COLUMN ROPS1A.DESCR */,
    DESCR2 VARCHAR(80) /* TYPE OF COLUMN ROPS1A.DESCR2 */,
    AC1 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.AC1 */,
    AC2 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.AC2 */,
    SAC1 VARCHAR(100) /* TYPE OF COLUMN ROPS1A.SAC1 */,
    SAC2 VARCHAR(100) /* TYPE OF COLUMN ROPS1A.SAC2 */,
    SUMMC NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SUMMC */,
    CUR VARCHAR(3) /* TYPE OF COLUMN ROPS1A.CUR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SUMM */,
    PVN NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.PVN */,
    RAC VARCHAR(8) /* TYPE OF COLUMN ROPS1A.RAC */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SCR */,
    RAC2 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.RAC2 */,
    RAC3 VARCHAR(5) /* TYPE OF COLUMN ROPS1A.RAC3 */,
    RAC4 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.RAC4 */,
    RAC5 VARCHAR(5) /* TYPE OF COLUMN ROPS1A.RAC5 */,
    QV FLOAT /* TYPE OF COLUMN ROPS1A.QV */,
    ZNR INTEGER /* TYPE OF COLUMN ROPS1A.ZNR */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_KORESP_11_CUR (
    PSD DATE,
    PED DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15),
    PCUR VARCHAR(3))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN ROPS1A.ID */,
    SPID INTEGER /* TYPE OF COLUMN ROPS1A.SPID */,
    DID INTEGER /* TYPE OF COLUMN ROPS1A.DID */,
    DETE DATE /* TYPE OF COLUMN ROPS1A.DETE */,
    NRX VARCHAR(5) /* TYPE OF COLUMN ROPS1A.NRX */,
    DOCTYP VARCHAR(10) /* TYPE OF COLUMN ROPS1A.DOCTYP */,
    DOCTYP1 VARCHAR(10) /* TYPE OF COLUMN ROPS1A.DOCTYP1 */,
    DOCTYP2 VARCHAR(10) /* TYPE OF COLUMN ROPS1A.DOCTYP2 */,
    DOCST VARCHAR(6) /* TYPE OF COLUMN ROPS1A.DOCST */,
    DOCNR VARCHAR(15) /* TYPE OF COLUMN ROPS1A.DOCNR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN ROPS1A.CLID */,
    CLID2 VARCHAR(15) /* TYPE OF COLUMN ROPS1A.CLID2 */,
    NAME VARCHAR(100) /* TYPE OF COLUMN ROPS1A.NAME */,
    NAME2 VARCHAR(100) /* TYPE OF COLUMN ROPS1A.NAME2 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN ROPS1A.REGNR */,
    REGNR2 VARCHAR(15) /* TYPE OF COLUMN ROPS1A.REGNR2 */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.B0 */,
    DESCR VARCHAR(80) /* TYPE OF COLUMN ROPS1A.DESCR */,
    DESCR2 VARCHAR(80) /* TYPE OF COLUMN ROPS1A.DESCR2 */,
    AC1 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.AC1 */,
    AC2 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.AC2 */,
    SAC1 VARCHAR(100) /* TYPE OF COLUMN ROPS1A.SAC1 */,
    SAC2 VARCHAR(100) /* TYPE OF COLUMN ROPS1A.SAC2 */,
    SUMMC NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SUMMC */,
    CUR VARCHAR(3) /* TYPE OF COLUMN ROPS1A.CUR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SUMM */,
    PVN NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.PVN */,
    RAC VARCHAR(8) /* TYPE OF COLUMN ROPS1A.RAC */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SCR */,
    RAC2 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.RAC2 */,
    RAC3 VARCHAR(5) /* TYPE OF COLUMN ROPS1A.RAC3 */,
    RAC4 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.RAC4 */,
    RAC5 VARCHAR(5) /* TYPE OF COLUMN ROPS1A.RAC5 */,
    QV FLOAT /* TYPE OF COLUMN ROPS1A.QV */,
    ZNR INTEGER /* TYPE OF COLUMN ROPS1A.ZNR */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_NPMT_11 (
    SDT DATE,
    EDT DATE,
    PAD VARCHAR(3))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN TREPMT.ID */,
    SPID INTEGER /* TYPE OF COLUMN TREPMT.SPID */,
    AD VARCHAR(3) /* TYPE OF COLUMN TREPMT.AD */,
    AC1 VARCHAR(15) /* TYPE OF COLUMN TREPMT.AC1 */,
    AC2 VARCHAR(15) /* TYPE OF COLUMN TREPMT.AC2 */,
    ACN1 VARCHAR(100) /* TYPE OF COLUMN TREPMT.ACN1 */,
    ACN2 VARCHAR(100) /* TYPE OF COLUMN TREPMT.ACN2 */,
    M1 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M1 */,
    M2 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M2 */,
    M3 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M3 */,
    M4 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M4 */,
    M5 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M5 */,
    M6 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M6 */,
    M7 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M7 */,
    M8 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M8 */,
    M9 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M9 */,
    M10 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M10 */,
    M11 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M11 */,
    M12 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M12 */,
    N1 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N1 */,
    N2 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N2 */,
    N3 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N3 */,
    N4 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N4 */,
    N5 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N5 */,
    N6 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N6 */,
    N7 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N7 */,
    N8 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N8 */,
    N9 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N9 */,
    N10 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N10 */,
    N11 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N11 */,
    N12 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N12 */,
    MT NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.MT */,
    NT NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.NT */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_NPMT_12 (
    SDT DATE,
    EDT DATE,
    PAD VARCHAR(3))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN TREPMT.ID */,
    SPID INTEGER /* TYPE OF COLUMN TREPMT.SPID */,
    AD VARCHAR(3) /* TYPE OF COLUMN TREPMT.AD */,
    AC1 VARCHAR(15) /* TYPE OF COLUMN TREPMT.AC1 */,
    AC2 VARCHAR(15) /* TYPE OF COLUMN TREPMT.AC2 */,
    ACN1 VARCHAR(100) /* TYPE OF COLUMN TREPMT.ACN1 */,
    ACN2 VARCHAR(100) /* TYPE OF COLUMN TREPMT.ACN2 */,
    M1 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M1 */,
    M2 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M2 */,
    M3 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M3 */,
    M4 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M4 */,
    M5 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M5 */,
    M6 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M6 */,
    M7 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M7 */,
    M8 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M8 */,
    M9 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M9 */,
    M10 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M10 */,
    M11 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M11 */,
    M12 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M12 */,
    N1 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N1 */,
    N2 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N2 */,
    N3 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N3 */,
    N4 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N4 */,
    N5 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N5 */,
    N6 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N6 */,
    N7 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N7 */,
    N8 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N8 */,
    N9 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N9 */,
    N10 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N10 */,
    N11 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N11 */,
    N12 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N12 */,
    MT NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.MT */,
    NT NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.NT */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_NPMT_13 (
    SDT DATE,
    EDT DATE,
    PAD VARCHAR(3))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN TREPMT.ID */,
    SPID INTEGER /* TYPE OF COLUMN TREPMT.SPID */,
    AD VARCHAR(3) /* TYPE OF COLUMN TREPMT.AD */,
    AC1 VARCHAR(15) /* TYPE OF COLUMN TREPMT.AC1 */,
    AC2 VARCHAR(15) /* TYPE OF COLUMN TREPMT.AC2 */,
    ACN1 VARCHAR(100) /* TYPE OF COLUMN TREPMT.ACN1 */,
    ACN2 VARCHAR(100) /* TYPE OF COLUMN TREPMT.ACN2 */,
    M1 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M1 */,
    M2 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M2 */,
    M3 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M3 */,
    M4 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M4 */,
    M5 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M5 */,
    M6 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M6 */,
    M7 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M7 */,
    M8 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M8 */,
    M9 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M9 */,
    M10 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M10 */,
    M11 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M11 */,
    M12 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M12 */,
    N1 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N1 */,
    N2 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N2 */,
    N3 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N3 */,
    N4 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N4 */,
    N5 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N5 */,
    N6 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N6 */,
    N7 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N7 */,
    N8 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N8 */,
    N9 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N9 */,
    N10 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N10 */,
    N11 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N11 */,
    N12 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N12 */,
    MT NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.MT */,
    NT NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.NT */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_NPMT_14 (
    SDT DATE,
    EDT DATE)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN TREPMT.ID */,
    SPID INTEGER /* TYPE OF COLUMN TREPMT.SPID */,
    AD VARCHAR(3) /* TYPE OF COLUMN TREPMT.AD */,
    AC1 VARCHAR(15) /* TYPE OF COLUMN TREPMT.AC1 */,
    AC2 VARCHAR(15) /* TYPE OF COLUMN TREPMT.AC2 */,
    ACN1 VARCHAR(100) /* TYPE OF COLUMN TREPMT.ACN1 */,
    ACN2 VARCHAR(100) /* TYPE OF COLUMN TREPMT.ACN2 */,
    M1 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M1 */,
    M2 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M2 */,
    M3 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M3 */,
    M4 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M4 */,
    M5 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M5 */,
    M6 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M6 */,
    M7 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M7 */,
    M8 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M8 */,
    M9 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M9 */,
    M10 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M10 */,
    M11 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M11 */,
    M12 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M12 */,
    N1 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N1 */,
    N2 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N2 */,
    N3 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N3 */,
    N4 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N4 */,
    N5 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N5 */,
    N6 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N6 */,
    N7 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N7 */,
    N8 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N8 */,
    N9 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N9 */,
    N10 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N10 */,
    N11 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N11 */,
    N12 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N12 */,
    MT NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.MT */,
    NT NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.NT */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_NPMT_21 (
    SDT DATE,
    EDT DATE,
    PAD VARCHAR(3))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN TREPMT.ID */,
    SPID INTEGER /* TYPE OF COLUMN TREPMT.SPID */,
    AD VARCHAR(3) /* TYPE OF COLUMN TREPMT.AD */,
    AC1 VARCHAR(15) /* TYPE OF COLUMN TREPMT.AC1 */,
    AC2 VARCHAR(15) /* TYPE OF COLUMN TREPMT.AC2 */,
    ACN1 VARCHAR(100) /* TYPE OF COLUMN TREPMT.ACN1 */,
    ACN2 VARCHAR(100) /* TYPE OF COLUMN TREPMT.ACN2 */,
    M1 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M1 */,
    M2 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M2 */,
    M3 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M3 */,
    M4 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M4 */,
    M5 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M5 */,
    M6 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M6 */,
    M7 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M7 */,
    M8 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M8 */,
    M9 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M9 */,
    M10 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M10 */,
    M11 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M11 */,
    M12 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M12 */,
    N1 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N1 */,
    N2 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N2 */,
    N3 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N3 */,
    N4 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N4 */,
    N5 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N5 */,
    N6 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N6 */,
    N7 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N7 */,
    N8 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N8 */,
    N9 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N9 */,
    N10 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N10 */,
    N11 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N11 */,
    N12 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N12 */,
    MT NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.MT */,
    NT NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.NT */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_NPMT_22 (
    SDT DATE,
    EDT DATE,
    PAD VARCHAR(3))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN TREPMT.ID */,
    SPID INTEGER /* TYPE OF COLUMN TREPMT.SPID */,
    AD VARCHAR(3) /* TYPE OF COLUMN TREPMT.AD */,
    AC1 VARCHAR(15) /* TYPE OF COLUMN TREPMT.AC1 */,
    AC2 VARCHAR(15) /* TYPE OF COLUMN TREPMT.AC2 */,
    ACN1 VARCHAR(100) /* TYPE OF COLUMN TREPMT.ACN1 */,
    ACN2 VARCHAR(100) /* TYPE OF COLUMN TREPMT.ACN2 */,
    M1 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M1 */,
    M2 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M2 */,
    M3 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M3 */,
    M4 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M4 */,
    M5 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M5 */,
    M6 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M6 */,
    M7 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M7 */,
    M8 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M8 */,
    M9 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M9 */,
    M10 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M10 */,
    M11 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M11 */,
    M12 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M12 */,
    N1 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N1 */,
    N2 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N2 */,
    N3 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N3 */,
    N4 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N4 */,
    N5 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N5 */,
    N6 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N6 */,
    N7 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N7 */,
    N8 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N8 */,
    N9 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N9 */,
    N10 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N10 */,
    N11 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N11 */,
    N12 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N12 */,
    MT NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.MT */,
    NT NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.NT */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_NPMT_24 (
    SDT DATE,
    EDT DATE)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN TREPMT.ID */,
    SPID INTEGER /* TYPE OF COLUMN TREPMT.SPID */,
    AD VARCHAR(3) /* TYPE OF COLUMN TREPMT.AD */,
    AC1 VARCHAR(15) /* TYPE OF COLUMN TREPMT.AC1 */,
    AC2 VARCHAR(15) /* TYPE OF COLUMN TREPMT.AC2 */,
    ACN1 VARCHAR(100) /* TYPE OF COLUMN TREPMT.ACN1 */,
    ACN2 VARCHAR(100) /* TYPE OF COLUMN TREPMT.ACN2 */,
    M1 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M1 */,
    M2 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M2 */,
    M3 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M3 */,
    M4 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M4 */,
    M5 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M5 */,
    M6 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M6 */,
    M7 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M7 */,
    M8 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M8 */,
    M9 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M9 */,
    M10 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M10 */,
    M11 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M11 */,
    M12 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M12 */,
    N1 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N1 */,
    N2 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N2 */,
    N3 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N3 */,
    N4 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N4 */,
    N5 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N5 */,
    N6 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N6 */,
    N7 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N7 */,
    N8 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N8 */,
    N9 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N9 */,
    N10 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N10 */,
    N11 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N11 */,
    N12 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N12 */,
    MT NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.MT */,
    NT NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.NT */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_NPMT_31 (
    SDT DATE,
    EDT DATE)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN TREPMT.ID */,
    SPID INTEGER /* TYPE OF COLUMN TREPMT.SPID */,
    AD VARCHAR(3) /* TYPE OF COLUMN TREPMT.AD */,
    AC1 VARCHAR(15) /* TYPE OF COLUMN TREPMT.AC1 */,
    AC2 VARCHAR(15) /* TYPE OF COLUMN TREPMT.AC2 */,
    ACN1 VARCHAR(100) /* TYPE OF COLUMN TREPMT.ACN1 */,
    ACN2 VARCHAR(100) /* TYPE OF COLUMN TREPMT.ACN2 */,
    M1 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M1 */,
    M2 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M2 */,
    M3 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M3 */,
    M4 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M4 */,
    M5 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M5 */,
    M6 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M6 */,
    M7 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M7 */,
    M8 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M8 */,
    M9 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M9 */,
    M10 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M10 */,
    M11 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M11 */,
    M12 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M12 */,
    N1 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N1 */,
    N2 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N2 */,
    N3 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N3 */,
    N4 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N4 */,
    N5 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N5 */,
    N6 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N6 */,
    N7 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N7 */,
    N8 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N8 */,
    N9 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N9 */,
    N10 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N10 */,
    N11 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N11 */,
    N12 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N12 */,
    MT NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.MT */,
    NT NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.NT */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_NPMT_41 (
    SDT DATE,
    EDT DATE,
    PAD VARCHAR(3))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN TREPMT.ID */,
    SPID INTEGER /* TYPE OF COLUMN TREPMT.SPID */,
    AD VARCHAR(3) /* TYPE OF COLUMN TREPMT.AD */,
    AC1 VARCHAR(15) /* TYPE OF COLUMN TREPMT.AC1 */,
    AC2 VARCHAR(15) /* TYPE OF COLUMN TREPMT.AC2 */,
    ACN1 VARCHAR(100) /* TYPE OF COLUMN TREPMT.ACN1 */,
    ACN2 VARCHAR(100) /* TYPE OF COLUMN TREPMT.ACN2 */,
    M1 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M1 */,
    M2 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M2 */,
    M3 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M3 */,
    M4 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M4 */,
    M5 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M5 */,
    M6 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M6 */,
    M7 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M7 */,
    M8 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M8 */,
    M9 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M9 */,
    M10 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M10 */,
    M11 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M11 */,
    M12 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M12 */,
    N1 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N1 */,
    N2 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N2 */,
    N3 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N3 */,
    N4 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N4 */,
    N5 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N5 */,
    N6 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N6 */,
    N7 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N7 */,
    N8 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N8 */,
    N9 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N9 */,
    N10 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N10 */,
    N11 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N11 */,
    N12 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N12 */,
    MT NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.MT */,
    NT NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.NT */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_NPMT_42 (
    SDT DATE,
    EDT DATE,
    PAD VARCHAR(3))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN TREPMT.ID */,
    SPID INTEGER /* TYPE OF COLUMN TREPMT.SPID */,
    AD VARCHAR(3) /* TYPE OF COLUMN TREPMT.AD */,
    AC1 VARCHAR(15) /* TYPE OF COLUMN TREPMT.AC1 */,
    AC2 VARCHAR(15) /* TYPE OF COLUMN TREPMT.AC2 */,
    ACN1 VARCHAR(100) /* TYPE OF COLUMN TREPMT.ACN1 */,
    ACN2 VARCHAR(100) /* TYPE OF COLUMN TREPMT.ACN2 */,
    M1 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M1 */,
    M2 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M2 */,
    M3 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M3 */,
    M4 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M4 */,
    M5 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M5 */,
    M6 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M6 */,
    M7 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M7 */,
    M8 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M8 */,
    M9 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M9 */,
    M10 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M10 */,
    M11 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M11 */,
    M12 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M12 */,
    N1 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N1 */,
    N2 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N2 */,
    N3 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N3 */,
    N4 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N4 */,
    N5 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N5 */,
    N6 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N6 */,
    N7 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N7 */,
    N8 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N8 */,
    N9 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N9 */,
    N10 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N10 */,
    N11 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N11 */,
    N12 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N12 */,
    MT NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.MT */,
    NT NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.NT */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_NPMT_43 (
    SDT DATE,
    EDT DATE,
    PAD VARCHAR(3))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN TREPMT.ID */,
    SPID INTEGER /* TYPE OF COLUMN TREPMT.SPID */,
    AD VARCHAR(3) /* TYPE OF COLUMN TREPMT.AD */,
    AC1 VARCHAR(15) /* TYPE OF COLUMN TREPMT.AC1 */,
    AC2 VARCHAR(15) /* TYPE OF COLUMN TREPMT.AC2 */,
    ACN1 VARCHAR(100) /* TYPE OF COLUMN TREPMT.ACN1 */,
    ACN2 VARCHAR(100) /* TYPE OF COLUMN TREPMT.ACN2 */,
    M1 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M1 */,
    M2 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M2 */,
    M3 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M3 */,
    M4 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M4 */,
    M5 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M5 */,
    M6 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M6 */,
    M7 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M7 */,
    M8 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M8 */,
    M9 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M9 */,
    M10 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M10 */,
    M11 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M11 */,
    M12 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M12 */,
    N1 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N1 */,
    N2 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N2 */,
    N3 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N3 */,
    N4 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N4 */,
    N5 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N5 */,
    N6 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N6 */,
    N7 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N7 */,
    N8 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N8 */,
    N9 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N9 */,
    N10 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N10 */,
    N11 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N11 */,
    N12 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N12 */,
    MT NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.MT */,
    NT NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.NT */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_NPMT_44 (
    SDT DATE,
    EDT DATE)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN TREPMT.ID */,
    SPID INTEGER /* TYPE OF COLUMN TREPMT.SPID */,
    AD VARCHAR(3) /* TYPE OF COLUMN TREPMT.AD */,
    AC1 VARCHAR(15) /* TYPE OF COLUMN TREPMT.AC1 */,
    AC2 VARCHAR(15) /* TYPE OF COLUMN TREPMT.AC2 */,
    ACN1 VARCHAR(100) /* TYPE OF COLUMN TREPMT.ACN1 */,
    ACN2 VARCHAR(100) /* TYPE OF COLUMN TREPMT.ACN2 */,
    M1 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M1 */,
    M2 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M2 */,
    M3 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M3 */,
    M4 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M4 */,
    M5 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M5 */,
    M6 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M6 */,
    M7 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M7 */,
    M8 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M8 */,
    M9 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M9 */,
    M10 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M10 */,
    M11 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M11 */,
    M12 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.M12 */,
    N1 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N1 */,
    N2 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N2 */,
    N3 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N3 */,
    N4 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N4 */,
    N5 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N5 */,
    N6 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N6 */,
    N7 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N7 */,
    N8 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N8 */,
    N9 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N9 */,
    N10 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N10 */,
    N11 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N11 */,
    N12 NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.N12 */,
    MT NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.MT */,
    NT NUMERIC(15,2) /* TYPE OF COLUMN TREPMT.NT */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_PERS_11 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN ROPS2A.ID */,
    SPID INTEGER /* TYPE OF COLUMN ROPS2A.SPID */,
    AC VARCHAR(8) /* TYPE OF COLUMN ROPS2A.AC */,
    RAC VARCHAR(8) /* TYPE OF COLUMN ROPS2A.RAC */,
    NAME VARCHAR(150) /* TYPE OF COLUMN ROPS2A.NAME */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.B0 */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.SCR */,
    TDB NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.TDB */,
    TCR NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.TCR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN ROPS2A.CLID */,
    NAME1 VARCHAR(100) /* TYPE OF COLUMN ROPS2A.NAME1 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN ROPS2A.REGNR */,
    RNAME VARCHAR(150) /* TYPE OF COLUMN ROPS2A.RNAME */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_PERS_12 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN ROPS2A.ID */,
    SPID INTEGER /* TYPE OF COLUMN ROPS2A.SPID */,
    AC VARCHAR(8) /* TYPE OF COLUMN ROPS2A.AC */,
    RAC VARCHAR(8) /* TYPE OF COLUMN ROPS2A.RAC */,
    NAME VARCHAR(150) /* TYPE OF COLUMN ROPS2A.NAME */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.B0 */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.SCR */,
    TDB NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.TDB */,
    TCR NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.TCR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN ROPS2A.CLID */,
    NAME1 VARCHAR(100) /* TYPE OF COLUMN ROPS2A.NAME1 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN ROPS2A.REGNR */,
    RNAME VARCHAR(150) /* TYPE OF COLUMN ROPS2A.RNAME */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_PERS_13 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN TREPA1.ID */,
    SPID INTEGER /* TYPE OF COLUMN TREPA1.SPID */,
    I1 VARCHAR(15) /* TYPE OF COLUMN TREPA1.I1 */,
    NM VARCHAR(100) /* TYPE OF COLUMN TREPA1.NM */,
    DT DATE /* TYPE OF COLUMN TREPA1.DT */,
    ST VARCHAR(6) /* TYPE OF COLUMN TREPA1.ST */,
    NR VARCHAR(15) /* TYPE OF COLUMN TREPA1.NR */,
    S1 NUMERIC(15,2) /* TYPE OF COLUMN TREPA1.S1 */,
    S2 NUMERIC(15,2) /* TYPE OF COLUMN TREPA1.S2 */,
    S3 NUMERIC(15,2) /* TYPE OF COLUMN TREPA1.S3 */,
    S4 NUMERIC(15,2) /* TYPE OF COLUMN TREPA1.S4 */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_PERS_14 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN TREPA1.ID */,
    SPID INTEGER /* TYPE OF COLUMN TREPA1.SPID */,
    I1 VARCHAR(15) /* TYPE OF COLUMN TREPA1.I1 */,
    NM VARCHAR(100) /* TYPE OF COLUMN TREPA1.NM */,
    DT DATE /* TYPE OF COLUMN TREPA1.DT */,
    ST VARCHAR(6) /* TYPE OF COLUMN TREPA1.ST */,
    NR VARCHAR(15) /* TYPE OF COLUMN TREPA1.NR */,
    S1 NUMERIC(15,2) /* TYPE OF COLUMN TREPA1.S1 */,
    S2 NUMERIC(15,2) /* TYPE OF COLUMN TREPA1.S2 */,
    S3 NUMERIC(15,2) /* TYPE OF COLUMN TREPA1.S3 */,
    S4 NUMERIC(15,2) /* TYPE OF COLUMN TREPA1.S4 */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_PERS_15 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN TREPA1.ID */,
    SPID INTEGER /* TYPE OF COLUMN TREPA1.SPID */,
    I1 VARCHAR(15) /* TYPE OF COLUMN TREPA1.I1 */,
    NM VARCHAR(100) /* TYPE OF COLUMN TREPA1.NM */,
    DT DATE /* TYPE OF COLUMN TREPA1.DT */,
    ST VARCHAR(6) /* TYPE OF COLUMN TREPA1.ST */,
    NR VARCHAR(15) /* TYPE OF COLUMN TREPA1.NR */,
    S1 NUMERIC(15,2) /* TYPE OF COLUMN TREPA1.S1 */,
    S2 NUMERIC(15,2) /* TYPE OF COLUMN TREPA1.S2 */,
    S3 NUMERIC(15,2) /* TYPE OF COLUMN TREPA1.S3 */,
    S4 NUMERIC(15,2) /* TYPE OF COLUMN TREPA1.S4 */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_PERS_16 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN TREPA1.ID */,
    SPID INTEGER /* TYPE OF COLUMN TREPA1.SPID */,
    I1 VARCHAR(15) /* TYPE OF COLUMN TREPA1.I1 */,
    NM VARCHAR(100) /* TYPE OF COLUMN TREPA1.NM */,
    DT DATE /* TYPE OF COLUMN TREPA1.DT */,
    ST VARCHAR(6) /* TYPE OF COLUMN TREPA1.ST */,
    NR VARCHAR(15) /* TYPE OF COLUMN TREPA1.NR */,
    S1 NUMERIC(15,2) /* TYPE OF COLUMN TREPA1.S1 */,
    S2 NUMERIC(15,2) /* TYPE OF COLUMN TREPA1.S2 */,
    S3 NUMERIC(15,2) /* TYPE OF COLUMN TREPA1.S3 */,
    S4 NUMERIC(15,2) /* TYPE OF COLUMN TREPA1.S4 */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_PVN_10 (
    SDT DATE,
    EDT DATE)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN ROPS2A.ID */,
    SPID INTEGER /* TYPE OF COLUMN ROPS2A.SPID */,
    AC VARCHAR(8) /* TYPE OF COLUMN ROPS2A.AC */,
    RAC VARCHAR(8) /* TYPE OF COLUMN ROPS2A.RAC */,
    NAME VARCHAR(150) /* TYPE OF COLUMN ROPS2A.NAME */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.B0 */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.SCR */,
    TDB NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.TDB */,
    TCR NUMERIC(15,2) /* TYPE OF COLUMN ROPS2A.TCR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN ROPS2A.CLID */,
    NAME1 VARCHAR(100) /* TYPE OF COLUMN ROPS2A.NAME1 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN ROPS2A.REGNR */,
    RNAME VARCHAR(150) /* TYPE OF COLUMN ROPS2A.RNAME */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_PVN_21 (
    PSD DATE,
    PED DATE,
    RG1 MONEY,
    RG2 MONEY)
RETURNS (
    DID INTEGER /* TYPE OF COLUMN TTEMP_PVN1.DID */,
    CLID VARCHAR(15) /* TYPE OF COLUMN TTEMP_PVN1.CLID */,
    DOCTYP1 VARCHAR(10) /* TYPE OF COLUMN TTEMP_PVN1.DOCTYP1 */,
    DOCTYP2 VARCHAR(10) /* TYPE OF COLUMN TTEMP_PVN1.DOCTYP2 */,
    DOCTYPC INTEGER /* TYPE OF COLUMN TTEMP_PVN1.DOCTYPC */,
    RAC5 VARCHAR(8) /* TYPE OF COLUMN TTEMP_PVN1.RAC5 */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN TTEMP_PVN1.SUMM */,
    PVN NUMERIC(15,2) /* TYPE OF COLUMN TTEMP_PVN1.PVN */,
    SUMMC NUMERIC(15,2) /* TYPE OF COLUMN TTEMP_PVN1.SUMMC */,
    CUR VARCHAR(3) /* TYPE OF COLUMN TTEMP_PVN1.CUR */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_PVN_22 (
    PSD DATE,
    PED DATE,
    RG1 MONEY,
    RG2 MONEY)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN ROPS1A.ID */,
    SPID INTEGER /* TYPE OF COLUMN ROPS1A.SPID */,
    DID INTEGER /* TYPE OF COLUMN ROPS1A.DID */,
    DETE DATE /* TYPE OF COLUMN ROPS1A.DETE */,
    NRX VARCHAR(5) /* TYPE OF COLUMN ROPS1A.NRX */,
    DOCTYP VARCHAR(10) /* TYPE OF COLUMN ROPS1A.DOCTYP */,
    DOCTYP1 VARCHAR(10) /* TYPE OF COLUMN ROPS1A.DOCTYP1 */,
    DOCTYP2 VARCHAR(10) /* TYPE OF COLUMN ROPS1A.DOCTYP2 */,
    DOCST VARCHAR(6) /* TYPE OF COLUMN ROPS1A.DOCST */,
    DOCNR VARCHAR(15) /* TYPE OF COLUMN ROPS1A.DOCNR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN ROPS1A.CLID */,
    CLID2 VARCHAR(15) /* TYPE OF COLUMN ROPS1A.CLID2 */,
    NAME VARCHAR(100) /* TYPE OF COLUMN ROPS1A.NAME */,
    NAME2 VARCHAR(100) /* TYPE OF COLUMN ROPS1A.NAME2 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN ROPS1A.REGNR */,
    REGNR2 VARCHAR(15) /* TYPE OF COLUMN ROPS1A.REGNR2 */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.B0 */,
    DESCR VARCHAR(80) /* TYPE OF COLUMN ROPS1A.DESCR */,
    DESCR2 VARCHAR(80) /* TYPE OF COLUMN ROPS1A.DESCR2 */,
    AC1 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.AC1 */,
    AC2 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.AC2 */,
    SAC1 VARCHAR(100) /* TYPE OF COLUMN ROPS1A.SAC1 */,
    SAC2 VARCHAR(100) /* TYPE OF COLUMN ROPS1A.SAC2 */,
    SUMMC NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SUMMC */,
    CUR VARCHAR(3) /* TYPE OF COLUMN ROPS1A.CUR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SUMM */,
    PVN NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.PVN */,
    RAC VARCHAR(8) /* TYPE OF COLUMN ROPS1A.RAC */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SCR */,
    RAC2 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.RAC2 */,
    RAC3 VARCHAR(5) /* TYPE OF COLUMN ROPS1A.RAC3 */,
    RAC4 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.RAC4 */,
    RAC5 VARCHAR(5) /* TYPE OF COLUMN ROPS1A.RAC5 */,
    QV FLOAT /* TYPE OF COLUMN ROPS1A.QV */,
    ZNR INTEGER /* TYPE OF COLUMN ROPS1A.ZNR */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_PVN_31 (
    PSD DATE,
    PED DATE,
    RG1 MONEY,
    RG2 MONEY)
RETURNS (
    DID INTEGER /* TYPE OF COLUMN TTEMP_PVN1.DID */,
    CLID VARCHAR(15) /* TYPE OF COLUMN TTEMP_PVN1.CLID */,
    DOCTYP1 VARCHAR(10) /* TYPE OF COLUMN TTEMP_PVN1.DOCTYP1 */,
    DOCTYP2 VARCHAR(10) /* TYPE OF COLUMN TTEMP_PVN1.DOCTYP2 */,
    DOCTYPC INTEGER /* TYPE OF COLUMN TTEMP_PVN1.DOCTYPC */,
    RAC5 VARCHAR(8) /* TYPE OF COLUMN TTEMP_PVN1.RAC5 */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN TTEMP_PVN1.SUMM */,
    PVN NUMERIC(15,2) /* TYPE OF COLUMN TTEMP_PVN1.PVN */,
    SUMMC NUMERIC(15,2) /* TYPE OF COLUMN TTEMP_PVN1.SUMMC */,
    CUR VARCHAR(3) /* TYPE OF COLUMN TTEMP_PVN1.CUR */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_PVN_32 (
    PSD DATE,
    PED DATE,
    RG1 MONEY,
    RG2 MONEY)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN ROPS1A.ID */,
    SPID INTEGER /* TYPE OF COLUMN ROPS1A.SPID */,
    DID INTEGER /* TYPE OF COLUMN ROPS1A.DID */,
    DETE DATE /* TYPE OF COLUMN ROPS1A.DETE */,
    NRX VARCHAR(5) /* TYPE OF COLUMN ROPS1A.NRX */,
    DOCTYP VARCHAR(10) /* TYPE OF COLUMN ROPS1A.DOCTYP */,
    DOCTYP1 VARCHAR(10) /* TYPE OF COLUMN ROPS1A.DOCTYP1 */,
    DOCTYP2 VARCHAR(10) /* TYPE OF COLUMN ROPS1A.DOCTYP2 */,
    DOCST VARCHAR(6) /* TYPE OF COLUMN ROPS1A.DOCST */,
    DOCNR VARCHAR(15) /* TYPE OF COLUMN ROPS1A.DOCNR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN ROPS1A.CLID */,
    CLID2 VARCHAR(15) /* TYPE OF COLUMN ROPS1A.CLID2 */,
    NAME VARCHAR(100) /* TYPE OF COLUMN ROPS1A.NAME */,
    NAME2 VARCHAR(100) /* TYPE OF COLUMN ROPS1A.NAME2 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN ROPS1A.REGNR */,
    REGNR2 VARCHAR(15) /* TYPE OF COLUMN ROPS1A.REGNR2 */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.B0 */,
    DESCR VARCHAR(80) /* TYPE OF COLUMN ROPS1A.DESCR */,
    DESCR2 VARCHAR(80) /* TYPE OF COLUMN ROPS1A.DESCR2 */,
    AC1 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.AC1 */,
    AC2 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.AC2 */,
    SAC1 VARCHAR(100) /* TYPE OF COLUMN ROPS1A.SAC1 */,
    SAC2 VARCHAR(100) /* TYPE OF COLUMN ROPS1A.SAC2 */,
    SUMMC NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SUMMC */,
    CUR VARCHAR(3) /* TYPE OF COLUMN ROPS1A.CUR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SUMM */,
    PVN NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.PVN */,
    RAC VARCHAR(8) /* TYPE OF COLUMN ROPS1A.RAC */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SCR */,
    RAC2 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.RAC2 */,
    RAC3 VARCHAR(5) /* TYPE OF COLUMN ROPS1A.RAC3 */,
    RAC4 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.RAC4 */,
    RAC5 VARCHAR(5) /* TYPE OF COLUMN ROPS1A.RAC5 */,
    QV FLOAT /* TYPE OF COLUMN ROPS1A.QV */,
    ZNR INTEGER /* TYPE OF COLUMN ROPS1A.ZNR */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_PVN_41 (
    PSD DATE,
    PED DATE,
    RG1 MONEY,
    RG2 MONEY)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN ROPS1A.ID */,
    SPID INTEGER /* TYPE OF COLUMN ROPS1A.SPID */,
    DID INTEGER /* TYPE OF COLUMN ROPS1A.DID */,
    DETE DATE /* TYPE OF COLUMN ROPS1A.DETE */,
    NRX VARCHAR(5) /* TYPE OF COLUMN ROPS1A.NRX */,
    DOCTYP VARCHAR(10) /* TYPE OF COLUMN ROPS1A.DOCTYP */,
    DOCTYP1 VARCHAR(10) /* TYPE OF COLUMN ROPS1A.DOCTYP1 */,
    DOCTYP2 VARCHAR(10) /* TYPE OF COLUMN ROPS1A.DOCTYP2 */,
    DOCST VARCHAR(6) /* TYPE OF COLUMN ROPS1A.DOCST */,
    DOCNR VARCHAR(15) /* TYPE OF COLUMN ROPS1A.DOCNR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN ROPS1A.CLID */,
    CLID2 VARCHAR(15) /* TYPE OF COLUMN ROPS1A.CLID2 */,
    NAME VARCHAR(100) /* TYPE OF COLUMN ROPS1A.NAME */,
    NAME2 VARCHAR(100) /* TYPE OF COLUMN ROPS1A.NAME2 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN ROPS1A.REGNR */,
    REGNR2 VARCHAR(15) /* TYPE OF COLUMN ROPS1A.REGNR2 */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.B0 */,
    DESCR VARCHAR(80) /* TYPE OF COLUMN ROPS1A.DESCR */,
    DESCR2 VARCHAR(80) /* TYPE OF COLUMN ROPS1A.DESCR2 */,
    AC1 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.AC1 */,
    AC2 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.AC2 */,
    SAC1 VARCHAR(100) /* TYPE OF COLUMN ROPS1A.SAC1 */,
    SAC2 VARCHAR(100) /* TYPE OF COLUMN ROPS1A.SAC2 */,
    SUMMC NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SUMMC */,
    CUR VARCHAR(3) /* TYPE OF COLUMN ROPS1A.CUR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SUMM */,
    PVN NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.PVN */,
    RAC VARCHAR(8) /* TYPE OF COLUMN ROPS1A.RAC */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SCR */,
    RAC2 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.RAC2 */,
    RAC3 VARCHAR(5) /* TYPE OF COLUMN ROPS1A.RAC3 */,
    RAC4 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.RAC4 */,
    RAC5 VARCHAR(5) /* TYPE OF COLUMN ROPS1A.RAC5 */,
    QV FLOAT /* TYPE OF COLUMN ROPS1A.QV */,
    ZNR INTEGER /* TYPE OF COLUMN ROPS1A.ZNR */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_PVN_42 (
    PSD DATE,
    PED DATE,
    RG1 MONEY,
    RG2 MONEY)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN ROPS1A.ID */,
    SPID INTEGER /* TYPE OF COLUMN ROPS1A.SPID */,
    DID INTEGER /* TYPE OF COLUMN ROPS1A.DID */,
    DETE DATE /* TYPE OF COLUMN ROPS1A.DETE */,
    NRX VARCHAR(5) /* TYPE OF COLUMN ROPS1A.NRX */,
    DOCTYP VARCHAR(10) /* TYPE OF COLUMN ROPS1A.DOCTYP */,
    DOCTYP1 VARCHAR(10) /* TYPE OF COLUMN ROPS1A.DOCTYP1 */,
    DOCTYP2 VARCHAR(10) /* TYPE OF COLUMN ROPS1A.DOCTYP2 */,
    DOCST VARCHAR(6) /* TYPE OF COLUMN ROPS1A.DOCST */,
    DOCNR VARCHAR(15) /* TYPE OF COLUMN ROPS1A.DOCNR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN ROPS1A.CLID */,
    CLID2 VARCHAR(15) /* TYPE OF COLUMN ROPS1A.CLID2 */,
    NAME VARCHAR(100) /* TYPE OF COLUMN ROPS1A.NAME */,
    NAME2 VARCHAR(100) /* TYPE OF COLUMN ROPS1A.NAME2 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN ROPS1A.REGNR */,
    REGNR2 VARCHAR(15) /* TYPE OF COLUMN ROPS1A.REGNR2 */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.B0 */,
    DESCR VARCHAR(80) /* TYPE OF COLUMN ROPS1A.DESCR */,
    DESCR2 VARCHAR(80) /* TYPE OF COLUMN ROPS1A.DESCR2 */,
    AC1 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.AC1 */,
    AC2 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.AC2 */,
    SAC1 VARCHAR(100) /* TYPE OF COLUMN ROPS1A.SAC1 */,
    SAC2 VARCHAR(100) /* TYPE OF COLUMN ROPS1A.SAC2 */,
    SUMMC NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SUMMC */,
    CUR VARCHAR(3) /* TYPE OF COLUMN ROPS1A.CUR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SUMM */,
    PVN NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.PVN */,
    RAC VARCHAR(8) /* TYPE OF COLUMN ROPS1A.RAC */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SCR */,
    RAC2 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.RAC2 */,
    RAC3 VARCHAR(5) /* TYPE OF COLUMN ROPS1A.RAC3 */,
    RAC4 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.RAC4 */,
    RAC5 VARCHAR(5) /* TYPE OF COLUMN ROPS1A.RAC5 */,
    QV FLOAT /* TYPE OF COLUMN ROPS1A.QV */,
    ZNR INTEGER /* TYPE OF COLUMN ROPS1A.ZNR */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_PVN_51 (
    PSD DATE,
    PED DATE,
    RG1 MONEY,
    RG2 MONEY)
RETURNS (
    DID INTEGER /* TYPE OF COLUMN TTEMP_PVN1.DID */,
    CLID VARCHAR(15) /* TYPE OF COLUMN TTEMP_PVN1.CLID */,
    DOCTYP1 VARCHAR(10) /* TYPE OF COLUMN TTEMP_PVN1.DOCTYP1 */,
    DOCTYP2 VARCHAR(10) /* TYPE OF COLUMN TTEMP_PVN1.DOCTYP2 */,
    DOCTYPC INTEGER /* TYPE OF COLUMN TTEMP_PVN1.DOCTYPC */,
    RAC5 VARCHAR(8) /* TYPE OF COLUMN TTEMP_PVN1.RAC5 */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN TTEMP_PVN1.SUMM */,
    PVN NUMERIC(15,2) /* TYPE OF COLUMN TTEMP_PVN1.PVN */,
    SUMMC NUMERIC(15,2) /* TYPE OF COLUMN TTEMP_PVN1.SUMMC */,
    CUR VARCHAR(3) /* TYPE OF COLUMN TTEMP_PVN1.CUR */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_PVN_52 (
    PSD DATE,
    PED DATE,
    RG1 MONEY,
    RG2 MONEY)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN ROPS1A.ID */,
    SPID INTEGER /* TYPE OF COLUMN ROPS1A.SPID */,
    DID INTEGER /* TYPE OF COLUMN ROPS1A.DID */,
    DETE DATE /* TYPE OF COLUMN ROPS1A.DETE */,
    NRX VARCHAR(5) /* TYPE OF COLUMN ROPS1A.NRX */,
    DOCTYP VARCHAR(10) /* TYPE OF COLUMN ROPS1A.DOCTYP */,
    DOCTYP1 VARCHAR(10) /* TYPE OF COLUMN ROPS1A.DOCTYP1 */,
    DOCTYP2 VARCHAR(10) /* TYPE OF COLUMN ROPS1A.DOCTYP2 */,
    DOCST VARCHAR(6) /* TYPE OF COLUMN ROPS1A.DOCST */,
    DOCNR VARCHAR(15) /* TYPE OF COLUMN ROPS1A.DOCNR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN ROPS1A.CLID */,
    CLID2 VARCHAR(15) /* TYPE OF COLUMN ROPS1A.CLID2 */,
    NAME VARCHAR(100) /* TYPE OF COLUMN ROPS1A.NAME */,
    NAME2 VARCHAR(100) /* TYPE OF COLUMN ROPS1A.NAME2 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN ROPS1A.REGNR */,
    REGNR2 VARCHAR(15) /* TYPE OF COLUMN ROPS1A.REGNR2 */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.B0 */,
    DESCR VARCHAR(80) /* TYPE OF COLUMN ROPS1A.DESCR */,
    DESCR2 VARCHAR(80) /* TYPE OF COLUMN ROPS1A.DESCR2 */,
    AC1 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.AC1 */,
    AC2 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.AC2 */,
    SAC1 VARCHAR(100) /* TYPE OF COLUMN ROPS1A.SAC1 */,
    SAC2 VARCHAR(100) /* TYPE OF COLUMN ROPS1A.SAC2 */,
    SUMMC NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SUMMC */,
    CUR VARCHAR(3) /* TYPE OF COLUMN ROPS1A.CUR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SUMM */,
    PVN NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.PVN */,
    RAC VARCHAR(8) /* TYPE OF COLUMN ROPS1A.RAC */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SCR */,
    RAC2 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.RAC2 */,
    RAC3 VARCHAR(5) /* TYPE OF COLUMN ROPS1A.RAC3 */,
    RAC4 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.RAC4 */,
    RAC5 VARCHAR(5) /* TYPE OF COLUMN ROPS1A.RAC5 */,
    QV FLOAT /* TYPE OF COLUMN ROPS1A.QV */,
    ZNR INTEGER /* TYPE OF COLUMN ROPS1A.ZNR */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_PVN_CHECK_01 (
    PSD DATE,
    PED DATE,
    RG1 MONEY,
    LIKME MONEY)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN ROPS1A.ID */,
    SPID INTEGER /* TYPE OF COLUMN ROPS1A.SPID */,
    DID INTEGER /* TYPE OF COLUMN ROPS1A.DID */,
    DETE DATE /* TYPE OF COLUMN ROPS1A.DETE */,
    NRX VARCHAR(5) /* TYPE OF COLUMN ROPS1A.NRX */,
    DOCTYP VARCHAR(10) /* TYPE OF COLUMN ROPS1A.DOCTYP */,
    DOCTYP1 VARCHAR(10) /* TYPE OF COLUMN ROPS1A.DOCTYP1 */,
    DOCTYP2 VARCHAR(10) /* TYPE OF COLUMN ROPS1A.DOCTYP2 */,
    DOCST VARCHAR(6) /* TYPE OF COLUMN ROPS1A.DOCST */,
    DOCNR VARCHAR(15) /* TYPE OF COLUMN ROPS1A.DOCNR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN ROPS1A.CLID */,
    CLID2 VARCHAR(15) /* TYPE OF COLUMN ROPS1A.CLID2 */,
    NAME VARCHAR(100) /* TYPE OF COLUMN ROPS1A.NAME */,
    NAME2 VARCHAR(100) /* TYPE OF COLUMN ROPS1A.NAME2 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN ROPS1A.REGNR */,
    REGNR2 VARCHAR(15) /* TYPE OF COLUMN ROPS1A.REGNR2 */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.B0 */,
    DESCR VARCHAR(80) /* TYPE OF COLUMN ROPS1A.DESCR */,
    DESCR2 VARCHAR(80) /* TYPE OF COLUMN ROPS1A.DESCR2 */,
    AC1 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.AC1 */,
    AC2 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.AC2 */,
    SAC1 VARCHAR(100) /* TYPE OF COLUMN ROPS1A.SAC1 */,
    SAC2 VARCHAR(100) /* TYPE OF COLUMN ROPS1A.SAC2 */,
    SUMMC NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SUMMC */,
    CUR VARCHAR(3) /* TYPE OF COLUMN ROPS1A.CUR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SUMM */,
    PVN NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.PVN */,
    RAC VARCHAR(8) /* TYPE OF COLUMN ROPS1A.RAC */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SCR */,
    RAC2 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.RAC2 */,
    RAC3 VARCHAR(5) /* TYPE OF COLUMN ROPS1A.RAC3 */,
    RAC4 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.RAC4 */,
    RAC5 VARCHAR(5) /* TYPE OF COLUMN ROPS1A.RAC5 */,
    QV FLOAT /* TYPE OF COLUMN ROPS1A.QV */,
    ZNR INTEGER /* TYPE OF COLUMN ROPS1A.ZNR */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_PVN_CHECK_02 (
    PSD DATE,
    PED DATE,
    RG1 MONEY,
    LIKME MONEY)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN ROPS1A.ID */,
    SPID INTEGER /* TYPE OF COLUMN ROPS1A.SPID */,
    DID INTEGER /* TYPE OF COLUMN ROPS1A.DID */,
    DETE DATE /* TYPE OF COLUMN ROPS1A.DETE */,
    NRX VARCHAR(5) /* TYPE OF COLUMN ROPS1A.NRX */,
    DOCTYP VARCHAR(10) /* TYPE OF COLUMN ROPS1A.DOCTYP */,
    DOCTYP1 VARCHAR(10) /* TYPE OF COLUMN ROPS1A.DOCTYP1 */,
    DOCTYP2 VARCHAR(10) /* TYPE OF COLUMN ROPS1A.DOCTYP2 */,
    DOCST VARCHAR(6) /* TYPE OF COLUMN ROPS1A.DOCST */,
    DOCNR VARCHAR(15) /* TYPE OF COLUMN ROPS1A.DOCNR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN ROPS1A.CLID */,
    CLID2 VARCHAR(15) /* TYPE OF COLUMN ROPS1A.CLID2 */,
    NAME VARCHAR(100) /* TYPE OF COLUMN ROPS1A.NAME */,
    NAME2 VARCHAR(100) /* TYPE OF COLUMN ROPS1A.NAME2 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN ROPS1A.REGNR */,
    REGNR2 VARCHAR(15) /* TYPE OF COLUMN ROPS1A.REGNR2 */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.B0 */,
    DESCR VARCHAR(80) /* TYPE OF COLUMN ROPS1A.DESCR */,
    DESCR2 VARCHAR(80) /* TYPE OF COLUMN ROPS1A.DESCR2 */,
    AC1 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.AC1 */,
    AC2 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.AC2 */,
    SAC1 VARCHAR(100) /* TYPE OF COLUMN ROPS1A.SAC1 */,
    SAC2 VARCHAR(100) /* TYPE OF COLUMN ROPS1A.SAC2 */,
    SUMMC NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SUMMC */,
    CUR VARCHAR(3) /* TYPE OF COLUMN ROPS1A.CUR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SUMM */,
    PVN NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.PVN */,
    RAC VARCHAR(8) /* TYPE OF COLUMN ROPS1A.RAC */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SCR */,
    RAC2 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.RAC2 */,
    RAC3 VARCHAR(5) /* TYPE OF COLUMN ROPS1A.RAC3 */,
    RAC4 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.RAC4 */,
    RAC5 VARCHAR(5) /* TYPE OF COLUMN ROPS1A.RAC5 */,
    QV FLOAT /* TYPE OF COLUMN ROPS1A.QV */,
    ZNR INTEGER /* TYPE OF COLUMN ROPS1A.ZNR */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_PVNZ_01 (
    SDT DATE,
    EDT DATE)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN TREPPVNZ1.ID */,
    SPID INTEGER /* TYPE OF COLUMN TREPPVNZ1.SPID */,
    DID INTEGER /* TYPE OF COLUMN TREPPVNZ1.DID */,
    RID INTEGER /* TYPE OF COLUMN TREPPVNZ1.RID */,
    DETE DATE /* TYPE OF COLUMN TREPPVNZ1.DETE */,
    NRX VARCHAR(5) /* TYPE OF COLUMN TREPPVNZ1.NRX */,
    DOCTYP VARCHAR(10) /* TYPE OF COLUMN TREPPVNZ1.DOCTYP */,
    DOCST VARCHAR(6) /* TYPE OF COLUMN TREPPVNZ1.DOCST */,
    DOCNR VARCHAR(15) /* TYPE OF COLUMN TREPPVNZ1.DOCNR */,
    DOCSTR VARCHAR(200) /* TYPE OF COLUMN TREPPVNZ1.DOCSTR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN TREPPVNZ1.CLID */,
    NAME VARCHAR(100) /* TYPE OF COLUMN TREPPVNZ1.NAME */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN TREPPVNZ1.REGNR */,
    DESCR VARCHAR(80) /* TYPE OF COLUMN TREPPVNZ1.DESCR */,
    AA NUMERIC(15,2) /* TYPE OF COLUMN TREPPVNZ1.AA */,
    A8 NUMERIC(15,2) /* TYPE OF COLUMN TREPPVNZ1.A8 */,
    A9 NUMERIC(15,2) /* TYPE OF COLUMN TREPPVNZ1.A9 */,
    A10 NUMERIC(15,2) /* TYPE OF COLUMN TREPPVNZ1.A10 */,
    A11 VARCHAR(8) /* TYPE OF COLUMN TREPPVNZ1.A11 */,
    A12 NUMERIC(15,2) /* TYPE OF COLUMN TREPPVNZ1.A12 */,
    A13 NUMERIC(15,2) /* TYPE OF COLUMN TREPPVNZ1.A13 */,
    A14 NUMERIC(15,2) /* TYPE OF COLUMN TREPPVNZ1.A14 */,
    A15 NUMERIC(15,2) /* TYPE OF COLUMN TREPPVNZ1.A15 */,
    A16 NUMERIC(15,2) /* TYPE OF COLUMN TREPPVNZ1.A16 */,
    A17 NUMERIC(15,2) /* TYPE OF COLUMN TREPPVNZ1.A17 */,
    A18 NUMERIC(15,2) /* TYPE OF COLUMN TREPPVNZ1.A18 */,
    A19 NUMERIC(15,2) /* TYPE OF COLUMN TREPPVNZ1.A19 */,
    A20 NUMERIC(15,2) /* TYPE OF COLUMN TREPPVNZ1.A20 */,
    A21 NUMERIC(15,2) /* TYPE OF COLUMN TREPPVNZ1.A21 */,
    A22 NUMERIC(15,2) /* TYPE OF COLUMN TREPPVNZ1.A22 */,
    A23 NUMERIC(15,2) /* TYPE OF COLUMN TREPPVNZ1.A23 */,
    A24 NUMERIC(15,2) /* TYPE OF COLUMN TREPPVNZ1.A24 */,
    A25 NUMERIC(15,2) /* TYPE OF COLUMN TREPPVNZ1.A25 */,
    A26 NUMERIC(15,2) /* TYPE OF COLUMN TREPPVNZ1.A26 */,
    A27 NUMERIC(15,2) /* TYPE OF COLUMN TREPPVNZ1.A27 */,
    A28 NUMERIC(15,2) /* TYPE OF COLUMN TREPPVNZ1.A28 */,
    A29 NUMERIC(15,2) /* TYPE OF COLUMN TREPPVNZ1.A29 */,
    A30 NUMERIC(15,2) /* TYPE OF COLUMN TREPPVNZ1.A30 */,
    A31 NUMERIC(15,2) /* TYPE OF COLUMN TREPPVNZ1.A31 */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_SKAIDRA_01 (
    SDT DATE,
    EDT DATE,
    PSUMM NUMERIC(14,5),
    PPERTYP VARCHAR(5))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN ROPS1A.ID */,
    SPID INTEGER /* TYPE OF COLUMN ROPS1A.SPID */,
    DID INTEGER /* TYPE OF COLUMN ROPS1A.DID */,
    DETE DATE /* TYPE OF COLUMN ROPS1A.DETE */,
    NRX VARCHAR(5) /* TYPE OF COLUMN ROPS1A.NRX */,
    DOCTYP VARCHAR(10) /* TYPE OF COLUMN ROPS1A.DOCTYP */,
    DOCTYP1 VARCHAR(10) /* TYPE OF COLUMN ROPS1A.DOCTYP1 */,
    DOCTYP2 VARCHAR(10) /* TYPE OF COLUMN ROPS1A.DOCTYP2 */,
    DOCST VARCHAR(6) /* TYPE OF COLUMN ROPS1A.DOCST */,
    DOCNR VARCHAR(15) /* TYPE OF COLUMN ROPS1A.DOCNR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN ROPS1A.CLID */,
    CLID2 VARCHAR(15) /* TYPE OF COLUMN ROPS1A.CLID2 */,
    NAME VARCHAR(100) /* TYPE OF COLUMN ROPS1A.NAME */,
    NAME2 VARCHAR(100) /* TYPE OF COLUMN ROPS1A.NAME2 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN ROPS1A.REGNR */,
    REGNR2 VARCHAR(15) /* TYPE OF COLUMN ROPS1A.REGNR2 */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.B0 */,
    DESCR VARCHAR(80) /* TYPE OF COLUMN ROPS1A.DESCR */,
    DESCR2 VARCHAR(80) /* TYPE OF COLUMN ROPS1A.DESCR2 */,
    AC1 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.AC1 */,
    AC2 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.AC2 */,
    SAC1 VARCHAR(100) /* TYPE OF COLUMN ROPS1A.SAC1 */,
    SAC2 VARCHAR(100) /* TYPE OF COLUMN ROPS1A.SAC2 */,
    SUMMC NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SUMMC */,
    CUR VARCHAR(3) /* TYPE OF COLUMN ROPS1A.CUR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SUMM */,
    PVN NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.PVN */,
    RAC VARCHAR(8) /* TYPE OF COLUMN ROPS1A.RAC */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SCR */,
    RAC2 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.RAC2 */,
    RAC3 VARCHAR(5) /* TYPE OF COLUMN ROPS1A.RAC3 */,
    RAC4 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.RAC4 */,
    RAC5 VARCHAR(5) /* TYPE OF COLUMN ROPS1A.RAC5 */,
    QV FLOAT /* TYPE OF COLUMN ROPS1A.QV */,
    ZNR INTEGER /* TYPE OF COLUMN ROPS1A.ZNR */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_REP_SKAIDRA_02 (
    SDT DATE,
    EDT DATE,
    PSUMM NUMERIC(14,5),
    PPERTYP VARCHAR(5))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN ROPS1A.ID */,
    SPID INTEGER /* TYPE OF COLUMN ROPS1A.SPID */,
    DID INTEGER /* TYPE OF COLUMN ROPS1A.DID */,
    DETE DATE /* TYPE OF COLUMN ROPS1A.DETE */,
    NRX VARCHAR(5) /* TYPE OF COLUMN ROPS1A.NRX */,
    DOCTYP VARCHAR(10) /* TYPE OF COLUMN ROPS1A.DOCTYP */,
    DOCTYP1 VARCHAR(10) /* TYPE OF COLUMN ROPS1A.DOCTYP1 */,
    DOCTYP2 VARCHAR(10) /* TYPE OF COLUMN ROPS1A.DOCTYP2 */,
    DOCST VARCHAR(6) /* TYPE OF COLUMN ROPS1A.DOCST */,
    DOCNR VARCHAR(15) /* TYPE OF COLUMN ROPS1A.DOCNR */,
    CLID VARCHAR(15) /* TYPE OF COLUMN ROPS1A.CLID */,
    CLID2 VARCHAR(15) /* TYPE OF COLUMN ROPS1A.CLID2 */,
    NAME VARCHAR(100) /* TYPE OF COLUMN ROPS1A.NAME */,
    NAME2 VARCHAR(100) /* TYPE OF COLUMN ROPS1A.NAME2 */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN ROPS1A.REGNR */,
    REGNR2 VARCHAR(15) /* TYPE OF COLUMN ROPS1A.REGNR2 */,
    B0 NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.B0 */,
    DESCR VARCHAR(80) /* TYPE OF COLUMN ROPS1A.DESCR */,
    DESCR2 VARCHAR(80) /* TYPE OF COLUMN ROPS1A.DESCR2 */,
    AC1 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.AC1 */,
    AC2 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.AC2 */,
    SAC1 VARCHAR(100) /* TYPE OF COLUMN ROPS1A.SAC1 */,
    SAC2 VARCHAR(100) /* TYPE OF COLUMN ROPS1A.SAC2 */,
    SUMMC NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SUMMC */,
    CUR VARCHAR(3) /* TYPE OF COLUMN ROPS1A.CUR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SUMM */,
    PVN NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.PVN */,
    RAC VARCHAR(8) /* TYPE OF COLUMN ROPS1A.RAC */,
    SDB NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SDB */,
    SCR NUMERIC(15,2) /* TYPE OF COLUMN ROPS1A.SCR */,
    RAC2 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.RAC2 */,
    RAC3 VARCHAR(5) /* TYPE OF COLUMN ROPS1A.RAC3 */,
    RAC4 VARCHAR(8) /* TYPE OF COLUMN ROPS1A.RAC4 */,
    RAC5 VARCHAR(5) /* TYPE OF COLUMN ROPS1A.RAC5 */,
    QV FLOAT /* TYPE OF COLUMN ROPS1A.QV */,
    ZNR INTEGER /* TYPE OF COLUMN ROPS1A.ZNR */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_RESET_YEAR_GEN
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SP_SET_KIEONR (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PNR INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SP_SET_KIZONR (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PNR INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SP_SET_USERNAME (
    USERNAME VARCHAR(15))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SP_VWOPS_FILTER_AND (
    PDATE1 DATE,
    PDATE2 DATE,
    PTEXT VARCHAR(50),
    PCLID VARCHAR(15),
    PAC11 VARCHAR(8),
    PAC12 VARCHAR(8),
    PAC13 VARCHAR(5),
    PAC14 VARCHAR(8),
    PAC15 VARCHAR(5),
    PAC21 VARCHAR(8),
    PAC22 VARCHAR(8),
    PAC23 VARCHAR(5),
    PAC24 VARCHAR(8),
    PAC25 VARCHAR(5),
    PDOCGR VARCHAR(10))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN OPS.ID */,
    DOCID INTEGER /* TYPE OF COLUMN OPS.DOCID */,
    DETE DATE /* TYPE OF COLUMN OPSD.DETE */,
    NRX VARCHAR(5) /* TYPE OF COLUMN OPSD.NRX */,
    ZNR INTEGER /* TYPE OF COLUMN OPSD.ZNR */,
    DOCTYP VARCHAR(10) /* TYPE OF COLUMN OPSD.DOCTYP */,
    DOCST VARCHAR(6) /* TYPE OF COLUMN OPSD.DOCST */,
    DOCNR VARCHAR(15) /* TYPE OF COLUMN OPSD.DOCNR */,
    DOCTYP2 VARCHAR(10) /* TYPE OF COLUMN DOCTYP.ID1 */,
    CLID VARCHAR(15) /* TYPE OF COLUMN OPSD.CLID */,
    NAME VARCHAR(100) /* TYPE OF COLUMN PERSONS.NAME */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN PERSONS.REGNR */,
    PVNREGNR VARCHAR(15) /* TYPE OF COLUMN PERSONS.PVNREGNR */,
    CLID2 VARCHAR(15) /* TYPE OF COLUMN OPSD.CLID2 */,
    NAME2 VARCHAR(100) /* TYPE OF COLUMN PERSONS.NAME */,
    REGNR2 VARCHAR(15) /* TYPE OF COLUMN PERSONS.REGNR */,
    DESCR VARCHAR(80) /* TYPE OF COLUMN OPSD.DESCR */,
    AC11 VARCHAR(8) /* TYPE OF COLUMN OPS.AC11 */,
    AC12 VARCHAR(8) /* TYPE OF COLUMN OPS.AC12 */,
    AC13 VARCHAR(5) /* TYPE OF COLUMN OPS.AC13 */,
    AC14 VARCHAR(8) /* TYPE OF COLUMN OPS.AC14 */,
    AC15 VARCHAR(5) /* TYPE OF COLUMN OPS.AC15 */,
    AC21 VARCHAR(8) /* TYPE OF COLUMN OPS.AC21 */,
    AC22 VARCHAR(8) /* TYPE OF COLUMN OPS.AC22 */,
    AC23 VARCHAR(5) /* TYPE OF COLUMN OPS.AC23 */,
    AC24 VARCHAR(8) /* TYPE OF COLUMN OPS.AC24 */,
    AC25 VARCHAR(5) /* TYPE OF COLUMN OPS.AC25 */,
    SUMMC NUMERIC(15,2) /* TYPE OF COLUMN OPS.SUMMC */,
    CUR VARCHAR(3) /* TYPE OF COLUMN OPS.CUR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN OPS.SUMM */,
    QV FLOAT /* TYPE OF COLUMN OPS.QV */,
    DESCR2 VARCHAR(50) /* TYPE OF COLUMN OPS.DESCR */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_VWOPS_FILTER_OR (
    PDATE1 DATE,
    PDATE2 DATE,
    PTEXT VARCHAR(50),
    PCLID VARCHAR(15),
    PAC11 VARCHAR(8),
    PAC12 VARCHAR(8),
    PAC13 VARCHAR(5),
    PAC14 VARCHAR(8),
    PAC15 VARCHAR(5),
    PAC21 VARCHAR(8),
    PAC22 VARCHAR(8),
    PAC23 VARCHAR(5),
    PAC24 VARCHAR(8),
    PAC25 VARCHAR(5),
    PDOCGR VARCHAR(10))
RETURNS (
    ID INTEGER /* TYPE OF COLUMN OPS.ID */,
    DOCID INTEGER /* TYPE OF COLUMN OPS.DOCID */,
    DETE DATE /* TYPE OF COLUMN OPSD.DETE */,
    NRX VARCHAR(5) /* TYPE OF COLUMN OPSD.NRX */,
    ZNR INTEGER /* TYPE OF COLUMN OPSD.ZNR */,
    DOCTYP VARCHAR(10) /* TYPE OF COLUMN OPSD.DOCTYP */,
    DOCST VARCHAR(6) /* TYPE OF COLUMN OPSD.DOCST */,
    DOCNR VARCHAR(15) /* TYPE OF COLUMN OPSD.DOCNR */,
    DOCTYP2 VARCHAR(10) /* TYPE OF COLUMN DOCTYP.ID1 */,
    CLID VARCHAR(15) /* TYPE OF COLUMN OPSD.CLID */,
    NAME VARCHAR(100) /* TYPE OF COLUMN PERSONS.NAME */,
    REGNR VARCHAR(15) /* TYPE OF COLUMN PERSONS.REGNR */,
    PVNREGNR VARCHAR(15) /* TYPE OF COLUMN PERSONS.PVNREGNR */,
    CLID2 VARCHAR(15) /* TYPE OF COLUMN OPSD.CLID2 */,
    NAME2 VARCHAR(100) /* TYPE OF COLUMN PERSONS.NAME */,
    REGNR2 VARCHAR(15) /* TYPE OF COLUMN PERSONS.REGNR */,
    DESCR VARCHAR(80) /* TYPE OF COLUMN OPSD.DESCR */,
    AC11 VARCHAR(8) /* TYPE OF COLUMN OPS.AC11 */,
    AC12 VARCHAR(8) /* TYPE OF COLUMN OPS.AC12 */,
    AC13 VARCHAR(5) /* TYPE OF COLUMN OPS.AC13 */,
    AC14 VARCHAR(8) /* TYPE OF COLUMN OPS.AC14 */,
    AC15 VARCHAR(5) /* TYPE OF COLUMN OPS.AC15 */,
    AC21 VARCHAR(8) /* TYPE OF COLUMN OPS.AC21 */,
    AC22 VARCHAR(8) /* TYPE OF COLUMN OPS.AC22 */,
    AC23 VARCHAR(5) /* TYPE OF COLUMN OPS.AC23 */,
    AC24 VARCHAR(8) /* TYPE OF COLUMN OPS.AC24 */,
    AC25 VARCHAR(5) /* TYPE OF COLUMN OPS.AC25 */,
    SUMMC NUMERIC(15,2) /* TYPE OF COLUMN OPS.SUMMC */,
    CUR VARCHAR(3) /* TYPE OF COLUMN OPS.CUR */,
    SUMM NUMERIC(15,2) /* TYPE OF COLUMN OPS.SUMM */,
    QV FLOAT /* TYPE OF COLUMN OPS.QV */,
    DESCR2 VARCHAR(50) /* TYPE OF COLUMN OPS.DESCR */)
AS
BEGIN
  SUSPEND;
END^






SET TERM ; ^



/******************************************************************************/
/***                                 Tables                                 ***/
/******************************************************************************/



CREATE TABLE ACP1 (
    ACPID  CHAR(1) NOT NULL,
    NAME   VARCHAR(50)
);

CREATE TABLE ACP21 (
    AC    VARCHAR(8) NOT NULL,
    NAME  VARCHAR(100),
    ID1   VARCHAR(15),
    ID2   VARCHAR(15)
);

CREATE TABLE ACP211 (
    IDX   VARCHAR(15) NOT NULL,
    NAME  VARCHAR(50),
    ID1   CHAR(2)
);

CREATE TABLE ACP22 (
    IDX   VARCHAR(15) NOT NULL,
    NAME  VARCHAR(50)
);

CREATE TABLE ACP23 (
    IDX   VARCHAR(5) NOT NULL,
    NAME  VARCHAR(50),
    ID1   CHAR(2),
    ID2   INTEGER
);

CREATE TABLE ACP24 (
    IDX    VARCHAR(8) NOT NULL,
    NAME   VARCHAR(50),
    UNIT   VARCHAR(10),
    PRICE  MONEY DEFAULT 0.0
);

CREATE TABLE ACP25 (
    IDX   VARCHAR(5) NOT NULL,
    NAME  VARCHAR(150),
    ID1   CHAR(2)
);

CREATE TABLE ACP25A (
    IDX   VARCHAR(5) NOT NULL,
    NAME  VARCHAR(50)
);

CREATE TABLE ACP6 (
    IDX   VARCHAR(15) NOT NULL,
    NAME  VARCHAR(50)
);

CREATE TABLE ACPLAN (
    AC    VARCHAR(8) NOT NULL,
    NAME  VARCHAR(90),
    B0    NUMERIC(15,4),
    AP1   VARCHAR(15),
    AP2   VARCHAR(15),
    AP3   VARCHAR(15),
    AP4   VARCHAR(15),
    AP5   VARCHAR(15)
);

CREATE TABLE ACPVN (
    ID    VARCHAR(8) NOT NULL,
    NM    VARCHAR(250),
    T     FLOAT,
    PZ1   VARCHAR(5),
    PZ2   INTEGER NOT NULL,
    PZ2A  INTEGER NOT NULL,
    PZ3   INTEGER NOT NULL,
    PZ4   INTEGER NOT NULL,
    PZ5   INTEGER NOT NULL
);

CREATE TABLE BAL0 (
    ID       INTEGER NOT NULL,
    AC11     VARCHAR(8) NOT NULL,
    AC24     VARCHAR(8),
    CLID     VARCHAR(15),
    SUMMDC   MONEY NOT NULL,
    SUMMCC   MONEY NOT NULL,
    CUR      VARCHAR(3) NOT NULL,
    CURRATE  NUMERIC(15,4) NOT NULL,
    SUMMD    MONEY NOT NULL,
    SUMMC    MONEY NOT NULL
);

CREATE TABLE BALA1 (
    BALID  VARCHAR(10) NOT NULL,
    DESCR  VARCHAR(50),
    TA     VARCHAR(50),
    TP     VARCHAR(50)
);

CREATE TABLE BALA2 (
    ID     INTEGER NOT NULL,
    NR     VARCHAR(5),
    BALID  VARCHAR(10),
    DC     DMV2,
    TP     DMV2 DEFAULT 'V',
    DESCR  VARCHAR(150),
    NR1    VARCHAR(5),
    NR2    VARCHAR(5),
    S1     MONEY,
    S2     MONEY
);

CREATE TABLE BALA21 (
    ID    INTEGER NOT NULL,
    SPID  INTEGER,
    BID   INTEGER,
    S1    MONEY,
    S2    MONEY
);

CREATE TABLE BALA3 (
    ID   INTEGER NOT NULL,
    ID2  INTEGER,
    TP   DMV2 DEFAULT 'Db',
    AC   VARCHAR(8)
);

CREATE TABLE BANKS (
    ID    VARCHAR(8) NOT NULL,
    NAME  VARCHAR(50) NOT NULL
);

CREATE TABLE CURRENCY (
    ID    VARCHAR(3) NOT NULL,
    DETE  DATE NOT NULL,
    RATE  NUMERIC(15,4) NOT NULL
);

CREATE TABLE DOCS0 (
    ID      INTEGER NOT NULL,
    DETE    DATE NOT NULL,
    DOCTYP  VARCHAR(10),
    DOCST   VARCHAR(6),
    DOCNR   VARCHAR(15),
    CLID    VARCHAR(15),
    DESCR   VARCHAR(80),
    SUMM    MONEY NOT NULL,
    PVN     MONEY NOT NULL,
    AC      VARCHAR(8) NOT NULL
);

CREATE TABLE DOCTYP (
    ID      VARCHAR(10) NOT NULL,
    NAME    VARCHAR(50),
    ID1     VARCHAR(10),
    NAME1   VARCHAR(50),
    TPZ     VARCHAR(10),
    PVNPAZ  VARCHAR(10)
);

CREATE TABLE DOCTYPA (
    ID    VARCHAR(10) NOT NULL,
    NAME  VARCHAR(50)
);

CREATE TABLE DOCTYPB (
    IDA  VARCHAR(10) NOT NULL,
    ID   VARCHAR(10) NOT NULL
);

CREATE TABLE LOGX (
    ID   INTEGER NOT NULL,
    LID  VARCHAR(5),
    DT   TIMESTAMP,
    USR  VARCHAR(15)
);

CREATE TABLE LOPS (
    IDL    INTEGER NOT NULL,
    ID     INTEGER,
    DTL    TIMESTAMP,
    DTLD   TIMESTAMP,
    USL    VARCHAR(15),
    TPL    INTEGER,
    DOCID  INTEGER,
    AC11   VARCHAR(8) NOT NULL,
    AC12   VARCHAR(8),
    AC13   VARCHAR(5),
    AC14   VARCHAR(8),
    AC15   VARCHAR(5),
    AC21   VARCHAR(8) NOT NULL,
    AC22   VARCHAR(8),
    AC23   VARCHAR(5),
    AC24   VARCHAR(8),
    AC25   VARCHAR(5),
    SUMMC  MONEY NOT NULL,
    CUR    VARCHAR(3) NOT NULL,
    SUMM   MONEY NOT NULL,
    QV     FLOAT,
    NL     SMALLINT,
    ODT    TIMESTAMP
);

CREATE TABLE LOPSD (
    IDL     INTEGER NOT NULL,
    ID      INTEGER,
    DTLD    TIMESTAMP,
    USL     VARCHAR(15),
    TPL     INTEGER,
    DETE    DATE,
    NRX     VARCHAR(5),
    DOCTYP  VARCHAR(10),
    DOCST   VARCHAR(6),
    DOCNR   VARCHAR(15),
    CLID    VARCHAR(15),
    CLID2   VARCHAR(15),
    DESCR   VARCHAR(80),
    SUMM    MONEY,
    PVN     MONEY,
    OPT     INTEGER,
    ZNR     INTEGER NOT NULL,
    ZU      VARCHAR(20),
    ZDT     TIMESTAMP,
    NL      SMALLINT,
    ODT     TIMESTAMP
);

CREATE TABLE LXOP (
    ID  INTEGER NOT NULL,
    AD  INTEGER,
    AR  INTEGER
);

CREATE TABLE OPS (
    ID     INTEGER NOT NULL,
    DOCID  INTEGER NOT NULL,
    DESCR  VARCHAR(50),
    AC11   VARCHAR(8) NOT NULL,
    AC12   VARCHAR(8),
    AC13   VARCHAR(5),
    AC14   VARCHAR(8),
    AC15   VARCHAR(5),
    AC21   VARCHAR(8) NOT NULL,
    AC22   VARCHAR(8),
    AC23   VARCHAR(5),
    AC24   VARCHAR(8),
    AC25   VARCHAR(5),
    SUMMC  MONEY NOT NULL,
    CUR    VARCHAR(3) DEFAULT 'EUR' NOT NULL,
    SUMM   MONEY NOT NULL,
    QV     FLOAT DEFAULT 0.0,
    NL     SMALLINT DEFAULT 0,
    ZDT    TIMESTAMP
);

CREATE TABLE OPSD (
    ID      INTEGER NOT NULL,
    DETE    DATE NOT NULL,
    NRX     VARCHAR(5),
    DOCTYP  VARCHAR(10),
    DOCST   VARCHAR(6),
    DOCNR   VARCHAR(15),
    CLID    VARCHAR(15),
    CLID2   VARCHAR(15),
    DESCR   VARCHAR(80),
    SUMM    MONEY NOT NULL,
    PVN     MONEY NOT NULL,
    OPT     INTEGER DEFAULT 0 NOT NULL,
    ZNR     INTEGER DEFAULT 0 NOT NULL,
    ZU      VARCHAR(20),
    ZDT     TIMESTAMP DEFAULT LOCALTIMESTAMP(0) NOT NULL,
    DT2     DATE,
    NL      SMALLINT DEFAULT 0,
    YR      COMPUTED BY (extract(year from dete))
);

CREATE TABLE OPSD_YEAR_SEQ (
    YR      INTEGER NOT NULL,
    NEXTNR  INTEGER NOT NULL
);

CREATE TABLE PARAMS (
    ID      INTEGER NOT NULL,
    PNAME   VARCHAR(20),
    PVALUE  VARCHAR(50),
    USR     VARCHAR(15)
);

CREATE TABLE PERSONS (
    CLID      VARCHAR(15) NOT NULL,
    NAME      VARCHAR(100),
    REGNR     VARCHAR(15),
    PVNREGNR  VARCHAR(15),
    TP        VARCHAR(15) DEFAULT 'KR',
    TP2       VARCHAR(5) DEFAULT 'JP',
    TP3       VARCHAR(5) DEFAULT 'Ir',
    ADDR      VARCHAR(100),
    ADDR2     VARCHAR(100),
    BANKID    VARCHAR(8),
    BANK      VARCHAR(50),
    BANKACC   VARCHAR(25),
    PHONE     VARCHAR(10),
    ATK       VARCHAR(6),
    ACT       INTEGER DEFAULT 1
);

CREATE TABLE PERSONTYP (
    ID    INTEGER NOT NULL,
    IDX   VARCHAR(15) NOT NULL,
    NAME  VARCHAR(50)
);

CREATE TABLE ROPS1A (
    ID       INTEGER NOT NULL,
    SPID     INTEGER,
    DID      INTEGER,
    DETE     DATE,
    NRX      VARCHAR(5),
    DOCTYP   VARCHAR(10),
    DOCTYP1  VARCHAR(10),
    DOCTYP2  VARCHAR(10),
    DOCST    VARCHAR(6),
    DOCNR    VARCHAR(15),
    CLID     VARCHAR(15),
    CLID2    VARCHAR(15),
    NAME     VARCHAR(100),
    NAME2    VARCHAR(100),
    REGNR    VARCHAR(15),
    REGNR2   VARCHAR(15),
    B0       MONEY,
    DESCR    VARCHAR(80),
    DESCR2   VARCHAR(80),
    AC1      VARCHAR(8),
    AC2      VARCHAR(8),
    SAC1     VARCHAR(100),
    SAC2     VARCHAR(100),
    SUMMC    MONEY,
    CUR      VARCHAR(3),
    SUMM     MONEY,
    PVN      MONEY,
    RAC      VARCHAR(8),
    SDB      MONEY,
    SCR      MONEY,
    RAC2     VARCHAR(8),
    RAC3     VARCHAR(5),
    RAC4     VARCHAR(8),
    RAC5     VARCHAR(5),
    QV       FLOAT,
    ZNR      INTEGER
);

CREATE TABLE ROPS2A (
    ID     INTEGER NOT NULL,
    SPID   INTEGER,
    AC     VARCHAR(8),
    RAC    VARCHAR(8),
    NAME   VARCHAR(150),
    B0     MONEY,
    SDB    MONEY,
    SCR    MONEY,
    TDB    MONEY,
    TCR    MONEY,
    CLID   VARCHAR(15),
    NAME1  VARCHAR(100),
    REGNR  VARCHAR(15),
    RNAME  VARCHAR(150)
);

CREATE TABLE ROPS2B (
    ID    INTEGER NOT NULL,
    SPID  INTEGER,
    AC    VARCHAR(8),
    NAME  VARCHAR(100),
    B0    MONEY,
    SDB   MONEY,
    SCR   MONEY,
    TDB   MONEY,
    TCR   MONEY
);

CREATE TABLE ROPS3A (
    ID    INTEGER NOT NULL,
    SPID  INTEGER,
    RAC   VARCHAR(8),
    NAME  VARCHAR(100),
    SDB   MONEY,
    SCR   MONEY,
    AC1   VARCHAR(8),
    CLID  VARCHAR(15)
);

CREATE TABLE TABLE1 (
    ID       INTEGER NOT NULL,
    FIELD1   VARCHAR(27),
    FIELD2   INTEGER,
    FIELD3   VARCHAR(100),
    FIELD4   VARCHAR(100),
    FIELD5   INTEGER,
    FIELD6   VARCHAR(100),
    FIELD7   VARCHAR(100),
    FIELD8   INTEGER,
    FIELD9   VARCHAR(100),
    FIELD10  INTEGER,
    FIELD11  INTEGER,
    FIELD12  INTEGER,
    FIELD13  FLOAT,
    FIELD14  FLOAT
);

CREATE TABLE TREM (
    ID    INTEGER NOT NULL,
    AID   VARCHAR(20),
    TEXT  BLOB SUB_TYPE 1 SEGMENT SIZE 80
);

CREATE TABLE TREPA1 (
    ID    INTEGER NOT NULL,
    SPID  INTEGER,
    I1    VARCHAR(15),
    NM    VARCHAR(100),
    DT    DATE,
    ST    VARCHAR(6),
    NR    VARCHAR(15),
    S1    MONEY,
    S2    MONEY,
    S3    MONEY,
    S4    MONEY
);

CREATE TABLE TREPAPAN (
    ID    INTEGER NOT NULL,
    SPID  INTEGER,
    AC1   VARCHAR(8),
    AC2   VARCHAR(8),
    AC3   VARCHAR(15),
    AC4   VARCHAR(15),
    AC5   VARCHAR(15),
    CL    VARCHAR(15),
    S1    MONEY,
    S2    MONEY,
    S3    MONEY,
    S4    MONEY
);

CREATE TABLE TREPDARZ1 (
    ID      INTEGER NOT NULL,
    SPID    INTEGER,
    DID     INTEGER,
    RID     INTEGER,
    DETE    DATE,
    NRX     VARCHAR(5),
    DOCTYP  VARCHAR(10),
    DOCST   VARCHAR(6),
    DOCNR   VARCHAR(15),
    DOCSTR  VARCHAR(200),
    CLID    VARCHAR(15),
    NAME    VARCHAR(100),
    REGNR   VARCHAR(15),
    DESCR   VARCHAR(80),
    AC1     VARCHAR(8),
    AC2     VARCHAR(8),
    AA      MONEY,
    A1      MONEY,
    A2      MONEY,
    A3      MONEY,
    A4      MONEY,
    A5      MONEY,
    A6      MONEY,
    A7      MONEY,
    A8      MONEY,
    A9      MONEY,
    A10     MONEY,
    A11     MONEY,
    A12     MONEY,
    A13     MONEY,
    A14     MONEY,
    A15     MONEY,
    A16     MONEY,
    A17     MONEY,
    A18     MONEY
);

CREATE TABLE TREPDARZ2 (
    ID    INTEGER NOT NULL,
    SPID  INTEGER,
    RID0  INTEGER,
    A1    MONEY,
    A2    MONEY,
    A3    MONEY,
    A4    MONEY,
    A5    MONEY,
    A6    MONEY,
    A7    MONEY,
    A8    MONEY,
    A9    MONEY,
    A10   MONEY,
    A11   MONEY,
    A12   MONEY,
    A13   MONEY,
    A14   MONEY,
    A15   MONEY,
    A16   MONEY,
    A17   MONEY,
    A18   MONEY,
    A19   MONEY,
    A20   MONEY,
    A21   MONEY
);

CREATE TABLE TREPDOCS1 (
    ID    INTEGER NOT NULL,
    SPID  INTEGER,
    SR    VARCHAR(6),
    NR    VARCHAR(9),
    S1    NUMERIC(15,4),
    S2    NUMERIC(15,4)
);

CREATE TABLE TREPDOCS2 (
    ID    INTEGER NOT NULL,
    SPID  INTEGER,
    SR    VARCHAR(6),
    NR1   VARCHAR(9),
    NR2   VARCHAR(9),
    S1    MONEY,
    S2    MONEY,
    VX    CHAR(1)
);

CREATE TABLE TREPDOCSS (
    ID    INTEGER NOT NULL,
    SPID  INTEGER,
    DID   INTEGER,
    S1    NUMERIC(15,4),
    S2    NUMERIC(15,4),
    S3    NUMERIC(15,4)
);

CREATE TABLE TREPMT (
    ID    INTEGER NOT NULL,
    SPID  INTEGER,
    AD    VARCHAR(3),
    AC1   VARCHAR(15),
    AC2   VARCHAR(15),
    ACN1  VARCHAR(100),
    ACN2  VARCHAR(100),
    M1    MONEY,
    M2    MONEY,
    M3    MONEY,
    M4    MONEY,
    M5    MONEY,
    M6    MONEY,
    M7    MONEY,
    M8    MONEY,
    M9    MONEY,
    M10   MONEY,
    M11   MONEY,
    M12   MONEY,
    N1    MONEY,
    N2    MONEY,
    N3    MONEY,
    N4    MONEY,
    N5    MONEY,
    N6    MONEY,
    N7    MONEY,
    N8    MONEY,
    N9    MONEY,
    N10   MONEY,
    N11   MONEY,
    N12   MONEY,
    MT    MONEY,
    NT    MONEY
);

CREATE TABLE TREPOPS (
    ID     INTEGER NOT NULL,
    DOCID  INTEGER NOT NULL,
    DESCR  VARCHAR(50),
    AC11   VARCHAR(8) NOT NULL,
    AC12   VARCHAR(8),
    AC13   VARCHAR(5),
    AC14   VARCHAR(8),
    AC15   VARCHAR(5),
    AC21   VARCHAR(8) NOT NULL,
    AC22   VARCHAR(8),
    AC23   VARCHAR(5),
    AC24   VARCHAR(8),
    AC25   VARCHAR(5),
    SUMMC  MONEY,
    CUR    VARCHAR(3),
    SUMM   MONEY,
    QV     FLOAT,
    NL     SMALLINT,
    ZDT    TIMESTAMP
);

CREATE TABLE TREPOPSD (
    ID      INTEGER NOT NULL,
    DETE    DATE NOT NULL,
    NRX     VARCHAR(5),
    DOCTYP  VARCHAR(10),
    DOCST   VARCHAR(6),
    DOCNR   VARCHAR(15),
    CLID    VARCHAR(15),
    CLID2   VARCHAR(15),
    DESCR   VARCHAR(80),
    SUMM    MONEY NOT NULL,
    PVN     MONEY NOT NULL,
    OPT     INTEGER,
    ZNR     INTEGER,
    ZU      VARCHAR(20),
    ZDT     TIMESTAMP,
    DT2     DATE,
    NL      SMALLINT,
    YR      INTEGER
);

CREATE TABLE TREPPVNZ1 (
    ID      INTEGER NOT NULL,
    SPID    INTEGER,
    DID     INTEGER,
    RID     INTEGER,
    DETE    DATE,
    NRX     VARCHAR(5),
    DOCTYP  VARCHAR(10),
    DOCST   VARCHAR(6),
    DOCNR   VARCHAR(15),
    DOCSTR  VARCHAR(200),
    CLID    VARCHAR(15),
    NAME    VARCHAR(100),
    REGNR   VARCHAR(15),
    DESCR   VARCHAR(80),
    AA      MONEY,
    A8      MONEY,
    A9      MONEY,
    A10     MONEY,
    A11     VARCHAR(8),
    A12     MONEY,
    A13     MONEY,
    A14     MONEY,
    A15     MONEY,
    A16     MONEY,
    A17     MONEY,
    A18     MONEY,
    A19     MONEY,
    A20     MONEY,
    A21     MONEY,
    A22     MONEY,
    A23     MONEY,
    A24     MONEY,
    A25     MONEY,
    A26     MONEY,
    A27     MONEY,
    A28     MONEY,
    A29     MONEY,
    A30     MONEY,
    A31     MONEY
);

CREATE TABLE TREPUDOCS (
    ID    INTEGER NOT NULL,
    SPID  INTEGER,
    LD    INTEGER,
    T0    INTEGER,
    TT    VARCHAR(100),
    T1    CHAR(1),
    T2    CHAR(1),
    T3    CHAR(2),
    DT1   VARCHAR(27),
    SR    VARCHAR(6),
    CT    SMALLINT,
    N1    VARCHAR(9),
    N2    VARCHAR(9),
    S1    FLOAT,
    S2    FLOAT
);

CREATE GLOBAL TEMPORARY TABLE TTEMP_BALA21 (
    ID    INTEGER NOT NULL,
    AC    VARCHAR(8),
    S1    MONEY DEFAULT 0,
    S2    MONEY DEFAULT 0,
    BID   INTEGER DEFAULT 0,
    SPID  COMPUTED BY (CURRENT_CONNECTION)
) ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE TTEMP_BALAC (
    ID    INTEGER NOT NULL,
    BID   INTEGER DEFAULT 0,
    S1    MONEY DEFAULT 0,
    S2    MONEY DEFAULT 0,
    AC    VARCHAR(8),
    SPID  COMPUTED BY (CURRENT_CONNECTION)
) ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE TTEMP_BALMT1 (
    ID    INTEGER NOT NULL,
    SPID  INTEGER DEFAULT 0,
    AC    VARCHAR(8) NOT NULL,
    M0    MONEY DEFAULT 0 NOT NULL,
    M1    MONEY DEFAULT 0 NOT NULL,
    M2    MONEY DEFAULT 0 NOT NULL,
    M3    MONEY DEFAULT 0 NOT NULL,
    M4    MONEY DEFAULT 0 NOT NULL,
    M5    MONEY DEFAULT 0 NOT NULL,
    M6    MONEY DEFAULT 0 NOT NULL,
    M7    MONEY DEFAULT 0 NOT NULL,
    M8    MONEY DEFAULT 0 NOT NULL,
    M9    MONEY DEFAULT 0 NOT NULL,
    M10   MONEY DEFAULT 0 NOT NULL,
    M11   MONEY DEFAULT 0 NOT NULL,
    M12   MONEY DEFAULT 0 NOT NULL
) ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE TTEMP_BALMT2 (
    ID    INTEGER NOT NULL,
    SPID  INTEGER,
    BID   INTEGER DEFAULT 0 NOT NULL,
    M0    MONEY DEFAULT 0 NOT NULL,
    M1    MONEY DEFAULT 0 NOT NULL,
    M2    MONEY DEFAULT 0 NOT NULL,
    M3    MONEY DEFAULT 0 NOT NULL,
    M4    MONEY DEFAULT 0 NOT NULL,
    M5    MONEY DEFAULT 0 NOT NULL,
    M6    MONEY DEFAULT 0 NOT NULL,
    M7    MONEY DEFAULT 0 NOT NULL,
    M8    MONEY DEFAULT 0 NOT NULL,
    M9    MONEY DEFAULT 0 NOT NULL,
    M10   MONEY DEFAULT 0 NOT NULL,
    M11   MONEY DEFAULT 0 NOT NULL,
    M12   MONEY DEFAULT 0 NOT NULL
) ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE TTEMP_DIFF2 (
    IDL1   INTEGER,
    IDL2   INTEGER,
    DOCID  INTEGER,
    ROWID  INTEGER
) ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE TTEMP_PVN1 (
    DID      INTEGER NOT NULL,
    CLID     VARCHAR(15),
    DOCTYP1  VARCHAR(10),
    DOCTYP2  VARCHAR(10),
    DOCTYPC  INTEGER,
    RAC5     VARCHAR(8),
    SUMM     MONEY DEFAULT 0,
    PVN      MONEY DEFAULT 0,
    SUMMC    MONEY DEFAULT 0,
    CUR      VARCHAR(3),
    ID       INTEGER NOT NULL,
    SUMMDOC  MONEY
) ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE TTEMP_PVN2 (
    CLID  VARCHAR(15) NOT NULL
) ON COMMIT DELETE ROWS;

CREATE TABLE TUDOCLISTS (
    ID   INTEGER NOT NULL,
    T1   CHAR(1),
    DT1  VARCHAR(27),
    DT2  VARCHAR(27)
);

CREATE TABLE TUDOCS (
    ID   INTEGER NOT NULL,
    LD   INTEGER,
    T1   CHAR(1),
    T2   CHAR(1),
    T3   CHAR(1),
    DT1  VARCHAR(27),
    SR   VARCHAR(6),
    CT   SMALLINT,
    N1   VARCHAR(9),
    N2   VARCHAR(9),
    S1   FLOAT,
    S2   FLOAT
);

CREATE TABLE TUPDFIELDS (
    ID    VARCHAR(20) NOT NULL,
    TEXT  VARCHAR(50),
    N     VARCHAR(3)
);

CREATE TABLE TUPVN1 (
    ID   INTEGER NOT NULL,
    DID  INTEGER,
    S    NUMERIC(15,4),
    S1   NUMERIC(15,4),
    S2   NUMERIC(15,4)
);

CREATE TABLE TUSERS (
    NM   VARCHAR(15) NOT NULL,
    PSW  VARCHAR(15),
    TP   CHAR(1),
    NR   INTEGER DEFAULT 0 NOT NULL
);

CREATE TABLE VW_OPS (
    ID       INTEGER NOT NULL,
    DOCID    INTEGER NOT NULL,
    DETE     DATE NOT NULL,
    NRX      VARCHAR(5),
    ZNR      INTEGER NOT NULL,
    DOCTYP   VARCHAR(10),
    DOCST    VARCHAR(6),
    DOCNR    VARCHAR(15),
    DOCTYP2  VARCHAR(10),
    CLID     VARCHAR(15),
    NAME     VARCHAR(100),
    REGNR    VARCHAR(15),
    CLID2    VARCHAR(15),
    NAME2    VARCHAR(100),
    REGNR2   VARCHAR(15),
    DESCR    VARCHAR(80),
    AC11     VARCHAR(8) NOT NULL,
    AC12     VARCHAR(8),
    AC13     VARCHAR(5),
    AC14     VARCHAR(8),
    AC15     VARCHAR(5),
    AC21     VARCHAR(8) NOT NULL,
    AC22     VARCHAR(8),
    AC23     VARCHAR(5),
    AC24     VARCHAR(8),
    AC25     VARCHAR(5),
    SUMMC    MONEY NOT NULL,
    CUR      VARCHAR(3) NOT NULL,
    SUMM     MONEY NOT NULL,
    QV       FLOAT,
    DESCR2   VARCHAR(80)
);

INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('11', 'NemateriƒÅlie ieguldijumi', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('1210', 'Zeme, ƒìkas', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('1220', 'IekƒÅrtas un ma≈°ƒ´nas', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('1221', 'IekƒÅrtas un ma≈°ƒ´nas ar ES finansƒìjumu', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('1230', 'PƒÅrƒìjie pamatlƒ´dzekƒºi', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('1231', 'PƒÅrƒìie pamatlƒ´dzekƒºi lƒ´zings', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('1240', 'Pamatlƒ´dzekƒºu izveido≈°anas izmaksas', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('1291', 'ƒíku nolietojums', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('1292', 'IekƒÅrtu un ma≈°ƒ´nu nolietojums', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('1293', 'PƒÅrƒìjo pamatlƒ´dzekƒºu nolietojums', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('1294', 'IekƒÅrtu un ma≈°ƒ´nu ar ES finansƒìjumu nolietojums', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('13', 'Ilgtermi≈Üa finansu ieguldijumi', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('2110', 'Izejvielas un materiƒÅli', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('2120', 'Nepabeigtie ra≈æojumi', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('2130', 'Gatavie ra≈æojumi un preces pƒÅrdo≈°anai', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('2140', 'Nepabeigtie pas≈´tijumi', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('2190', 'Avansa maksƒÅjumi par precƒìm', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('22', 'Produktƒ´vie un darba lopi', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('2310', 'Norƒìƒ∑ini ar pircƒìjiem un pas≈´tƒ´tƒÅjiem', NULL, 'DB');
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('2380', 'Avansa norƒìƒ∑ini', 'CN', NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('2410', 'NƒÅkamo periodu izdevumi', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('2610', 'kase', 'KA', NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('2620', 'Swedbank EUR', 'BA', NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('2621', 'Swedbank', 'BA', NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('3110', 'PamatkapitƒÅls', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('3210', 'PrivƒÅtiem nol≈´kiem iz≈Üemti lƒ´dzekƒºi', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('3220', 'PrivƒÅtie ieguldijumi', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('3310', 'Rezerves kapitƒÅls', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('3330', 'Citas likumƒÅ paredzƒìtas rezerves', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('3350', 'Stat≈´tos paredzƒìtƒÅs rezerves', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('3360', 'PƒÅrƒìjƒÅs rezerves', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('3410', 'PƒÅrskata gada nesadalƒ´tƒÅ peƒº≈Üa', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('3420', 'Iepriek≈°ƒìjo gadu nesadalƒ´tƒÅ peƒº≈Üa', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('5140', 'Citi aiz≈Üƒìmumi', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('51411', 'Lƒ´zings 1', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('51412', 'Lƒ´zings 2', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('5150', 'ƒ™stermi≈Üa aiz≈Üƒìmumi no kredƒ´tiestƒÅdƒìm', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('5160', 'Ilgtermi≈Üa aiz≈Üƒìmumi no kredƒ´tiestƒÅdƒìm', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('5210', 'Norƒìƒ∑ini par sa≈Üemtajiem avansiem', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('5310', 'Norƒìƒ∑ini ar piegƒÅdƒÅtƒÅjiem', NULL, 'KR');
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('5550', 'Norƒìƒ∑ini par parƒÅdiem personƒÅlam', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('5610', 'Norƒìƒ∑ini ar personƒÅlu', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('5620', 'Norƒìƒ∑ini par ieturƒìjumiem', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('5710', 'UIN', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('5722', 'IIN', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('5723', 'VSAOI', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('5724', 'NekustƒÅmƒÅ ƒ´pa≈°uma nodklis', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('5725', 'Dabas resursu nodokis', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('5726', 'Akcƒ´zes nodoklis', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('5727', 'Valsts nodevas', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('5731', 'PVN', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('5736', 'KokmateriƒÅlu PVN', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('5910', 'NƒÅkamo periodu ie≈Üƒìmumi (ilgtermi≈Üa)', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('5920', 'NƒÅkamo periodu ie≈Üƒìmumi (ƒ´stermi≈Üa)', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('6111', 'Lauksaimn.ie≈Üƒìmumi', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('6112', 'Nelauksaimn.ie≈Üƒìmumi', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('6113', 'Pakalpojumi', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('6114', 'Blakusprodukti', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('6520', 'PƒÅrƒìjie ie≈Üƒìmumi', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('6521', 'Subsƒ´dijas', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('6522', 'Akcƒ´zes nodokƒºa kompensƒÅcija', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('6530', 'Ie≈Üƒìmumi no zemes gabalu iznomƒÅ≈°anas', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('6540', 'Ie≈Üƒìmumi no apgrozƒÅmo lƒ´dzekƒºu pƒÅrdo≈°anas', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('6550', 'Ie≈Üƒìmumi no pamatlƒ´dzekƒºu pƒÅrdo≈°anas', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('6580', 'Papildu ieguldijumi', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('6590', 'KapitƒÅlieguldijumiem veiktie darbi', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('7110', 'MateriƒÅli', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('7111', 'MateriƒÅli', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('7112', 'Tehnikas uzturƒì≈°ana', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('7113', 'Smƒìrvielas', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('7114', 'KurinƒÅmais', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('71151', 'Benzƒ´ns', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('71152', 'Dƒ´zelis', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('71153', 'Smƒìrvielas', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('71154', 'Tehnikas uzturƒì≈°ana', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('7117', 'KurinƒÅmais', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('7118', 'Pakalpojumi', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('7119', 'Citi materiƒÅli', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('7120', 'Preƒçu iepirk≈°anas un piegƒÅdes izdevumi', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('7140', 'Taras izdevumi', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('7150', 'Muitas un ievednodevas', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('7160', 'PƒÅrƒìjie ƒÅrƒìjie izdevumi', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('7170', 'Samaksa par darbiem un pakalpojumiem no ƒÅrienes', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('7190', 'KrƒÅjumu vƒìrtƒ´bas izmai≈Üas', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('7210', 'StrƒÅdnieku algas', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('7211', 'Algas nelauksaimnieciskajai ra≈æo≈°anai', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('7310', 'SociƒÅlƒÅs apdro≈°inƒÅ≈°anas maksƒÅjumi', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('7311', 'VSAOI nelauksaimnieciskajai ra≈æo≈°anai', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('7330', 'Uz≈Üƒìmƒìjdarbƒ´bas riska nodeva', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('7410', 'NemateriƒÅlo ieguldijumu vƒìrtƒ´bas norakstƒ´≈°ana', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('7420', 'Pamatlƒ´dzekƒºu nolietojums', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('7421', 'Nolietojums pamatlƒ´dzekƒºiem ar ES finansƒìjumu', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('7510', 'Dabas aizsardzƒ´bas izdevumi', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('7521', 'Saimniecƒ´bas izdevumi', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('7522', 'Elektrƒ´ba', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('7523', 'GƒÅze', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('7524', 'Atkritumu izve≈°ana', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('7525', 'Tehnikas uzturƒì≈°ana', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('7526', 'Telpu uzturƒì≈°ana', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('7527', 'KomunƒÅlie maksƒÅjumi', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('7528', 'Nomas maksa', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('7529', 'Da≈æƒÅdi materiƒÅli', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('7540', 'Apdro≈°inƒÅ≈°anas maksƒÅjumi', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('7550', 'PƒÅrƒìjie saimnieciskƒÅs darbƒ´bas izdevumi', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('7552', 'Nodevas', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('7553', 'NeizskaitƒÅmais PVN', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('7560', 'Darbinieku apmƒÅcƒ´bas izdevumi', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('7570', 'Komandƒìjumu izdevumi', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('7610', 'Tara', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('7620', 'Preƒçu transportƒì≈°anas izdevumi', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('7630', 'Preƒçu transporta apdro≈°inƒÅ≈°ana', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('7640', 'SamaksƒÅtƒÅs komisijas naudas', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('7650', 'Citi pƒÅrdo≈°anas izdevumi', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('7651', 'ReklƒÅma', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('7710', 'Sakaru izdevumi', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('7711', 'Pasta izdevumi', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('7720', 'Kantora (biroja) izdevumi', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('7730', 'Jurista pakalpojumu apmaksa', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('7740', 'Gada pƒÅrskata un revƒ´zijas izdevumi', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('7750', 'Naudas apgrozijuma blakus izdevumi', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('7760', 'Transporta izdevumi administrƒÅcijas vajadzƒ´bƒÅm', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('7770', 'Citi administrƒÅcijas izdevumi', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('7771', 'KonsultƒÅcijas', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('7772', 'ReprezentƒÅcijas', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('7810', 'Iepriek≈°ƒìjo periodu izmaksas', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('8120', 'PƒÅrƒìjie ie≈Üƒìmumi no procentiem', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('8150', 'IenƒÅkumi no val≈´tas kursa samazinƒÅ≈°anƒÅs', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('8160', 'Sa≈ÜemtƒÅs soda naudas un lƒ´gumsodi', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('8170', 'Peƒº≈Üa no val≈´tas pirk≈°anas vai pƒÅrdo≈°anas', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('8190', 'Citi ie≈Üƒìmumi', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('8191', 'Personƒ´gie ie≈Üƒìmumi', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('8192', 'Attaisnotie personƒ´gie ie≈Üƒìmumi', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('8193', 'ES projekta finansƒìjums', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('8220', 'SamaksƒÅtie procenti', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('8240', 'Ilgtermi≈Üa aizdevumu procentu samaksa', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('8250', 'Zaudƒìjumi no val≈´tas kursa pazeminƒÅ≈°anƒÅs', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('8260', 'SamaksƒÅtas soda naudas un lƒ´gumsodi', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('8270', 'Zaudƒìjumi no val≈´tas pirk≈°anas vai pƒÅrdo≈°anas', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('8290', 'Citi izdevumi', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('8291', 'Personƒ´gie izdevumi', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('8292', 'Attaisnotie personƒ´gie izdevumi', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('8293', 'Ziedojumi', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('8310', 'ƒÄrkƒÅrtas ie≈Üƒìmumi', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('8410', 'ƒÄrkƒÅrtas izdevumi', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('8610', 'Peƒº≈Üa vai zaudƒìjumi', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('8810', 'UIN', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('8820', 'Dabas resursu nodoklis', NULL, NULL);
INSERT INTO ACP21 (AC, NAME, ID1, ID2) VALUES ('8830', 'NekustƒÅmƒÅ ƒ´pa≈°uma nodoklis', NULL, NULL);


COMMIT WORK;

INSERT INTO ACP23 (IDX, NAME, ID1, ID2) VALUES ('BA', 'Banka', '01      ', 1);
INSERT INTO ACP23 (IDX, NAME, ID1, ID2) VALUES ('CIE', 'IenƒÅkumi, kas neattiecas uz nodokli', '08      ', 4);
INSERT INTO ACP23 (IDX, NAME, ID1, ID2) VALUES ('CIZ', 'NeuzrƒÅdƒÅmie izdevumi', '13      ', 4);
INSERT INTO ACP23 (IDX, NAME, ID1, ID2) VALUES ('CN', 'Cita nauda', '03      ', 1);
INSERT INTO ACP23 (IDX, NAME, ID1, ID2) VALUES ('DIZ', 'Darba alga un tai pielƒ´dzinƒÅmie izdevumi', NULL, 3);
INSERT INTO ACP23 (IDX, NAME, ID1, ID2) VALUES ('KA', 'Kase', '02      ', 1);
INSERT INTO ACP23 (IDX, NAME, ID1, ID2) VALUES ('LIE', 'IenƒÅkumi no lauksaimniecƒ´bas', '04      ', 2);
INSERT INTO ACP23 (IDX, NAME, ID1, ID2) VALUES ('LIZ', 'Izdevumi lauksaimniecƒ´bai', '09      ', 3);
INSERT INTO ACP23 (IDX, NAME, ID1, ID2) VALUES ('MIZ', 'SamaksƒÅtais mikrouz≈Üƒìmuma nodoklis', NULL, 3);
INSERT INTO ACP23 (IDX, NAME, ID1, ID2) VALUES ('NIE', 'IenƒÅkumi no citurienes', '05      ', 2);
INSERT INTO ACP23 (IDX, NAME, ID1, ID2) VALUES ('NIZ', 'Nelauksaimnieciskie izdevumi', '10      ', 3);
INSERT INTO ACP23 (IDX, NAME, ID1, ID2) VALUES ('PIZ', 'ProporcionƒÅli sadalƒÅmie izdevumi', '11      ', 3);
INSERT INTO ACP23 (IDX, NAME, ID1, ID2) VALUES ('SUB', 'Subsƒ´dijas', '06      ', 2);
INSERT INTO ACP23 (IDX, NAME, ID1, ID2) VALUES ('ZIE', 'Neapliekamie ienƒÅkumi', '07      ', 4);
INSERT INTO ACP23 (IDX, NAME, ID1, ID2) VALUES ('ZIZ', 'NeatskaitƒÅmie izdevumi', '12      ', 4);
INSERT INTO ACP23 (IDX, NAME, ID1, ID2) VALUES ('LIZ1', 'Izdevumi lauksaimniecƒ´bai ierobe≈æotƒÅ apmƒìrƒÅ', '14      ', 3);
INSERT INTO ACP23 (IDX, NAME, ID1, ID2) VALUES ('NIZ1', 'Nelauksaimnieciskie izdevumi ierobe≈æotƒÅ apmƒìrƒÅ', '15      ', 3);


COMMIT WORK;

INSERT INTO ACP24 (IDX, NAME, UNIT, PRICE) VALUES ('aa', 'aaa', NULL, 0);
INSERT INTO ACP24 (IDX, NAME, UNIT, PRICE) VALUES ('fff', 'qqq', NULL, 0);
INSERT INTO ACP24 (IDX, NAME, UNIT, PRICE) VALUES ('LK', 'Saimniecƒ´ba', NULL, 0);
INSERT INTO ACP24 (IDX, NAME, UNIT, PRICE) VALUES ('sss', 'qqq', NULL, 0);
INSERT INTO ACP24 (IDX, NAME, UNIT, PRICE) VALUES ('TL', 'Vekals + saimniecƒ´ba', NULL, 0);
INSERT INTO ACP24 (IDX, NAME, UNIT, PRICE) VALUES ('TR', 'Veikals', NULL, 0);


COMMIT WORK;

INSERT INTO ACP25 (IDX, NAME, ID1) VALUES ('0', 'Nav PVN', '0       ');
INSERT INTO ACP25 (IDX, NAME, ID1) VALUES ('104', 'ar PVN 21 % likmi apliekamie darƒ´jumi (arƒ´ pa≈°patƒìri≈Ü≈°)', '0       ');
INSERT INTO ACP25 (IDX, NAME, ID1) VALUES ('106', 'Atgriezta prece', '0       ');
INSERT INTO ACP25 (IDX, NAME, ID1) VALUES ('107', 'apliekami ar PVN 22% likmi', '0       ');
INSERT INTO ACP25 (IDX, NAME, ID1) VALUES ('108', 'apliekami ar PVN 12% likmi', '0       ');
INSERT INTO ACP25 (IDX, NAME, ID1) VALUES ('204', 'PVN ar 21 % likmi apliekamiem darƒ´jumiem', '0       ');
INSERT INTO ACP25 (IDX, NAME, ID1) VALUES ('206', 'PVN ar 22 % likmi apliekamiem darƒ´jumiem', '1       ');
INSERT INTO ACP25 (IDX, NAME, ID1) VALUES ('207', 'PVN ar 12 % likmi apliekamiem darƒ´jumiem', '1       ');
INSERT INTO ACP25 (IDX, NAME, ID1) VALUES ('305', 'PVN 21 % par precƒìm un pakalpojumiem iek≈°zemƒì savas saimnieciskƒÅs darbƒ´bas nodro≈°inƒÅ≈°anai', '0       ');
INSERT INTO ACP25 (IDX, NAME, ID1) VALUES ('307', 'PVN 22 % par precƒìm un pakalpojumiem iek≈°zemƒì savas saimnieciskƒÅs darbƒ´bas nodro≈°inƒÅ≈°anai', '1       ');
INSERT INTO ACP25 (IDX, NAME, ID1) VALUES ('308', 'PVN 12 % par precƒìm un pakalpojumiem iek≈°zemƒì savas saimnieciskƒÅs darbƒ´bas nodro≈°inƒÅ≈°anai', '1       ');
INSERT INTO ACP25 (IDX, NAME, ID1) VALUES ('400', 'Ar PVN neapliekamie izdevumi', '0       ');
INSERT INTO ACP25 (IDX, NAME, ID1) VALUES ('401', 'Sa≈ÜemtƒÅs preces un pakalpojumi iek≈°zemƒì ', '0       ');
INSERT INTO ACP25 (IDX, NAME, ID1) VALUES ('505', 'Atkal PVN 21%', '0       ');
INSERT INTO ACP25 (IDX, NAME, ID1) VALUES ('507', 'Atkal PVN 22%', '0       ');
INSERT INTO ACP25 (IDX, NAME, ID1) VALUES ('508', 'Atkal PVN 12%', '0       ');
INSERT INTO ACP25 (IDX, NAME, ID1) VALUES ('A01', 'SamaksƒÅts PVN bud≈æetam', '0       ');
INSERT INTO ACP25 (IDX, NAME, ID1) VALUES ('A02', 'Atgriezta pƒÅrmaksa', '0       ');
INSERT INTO ACP25 (IDX, NAME, ID1) VALUES ('K041', 'PiegƒÅdƒÅto kokmateriƒÅli apliekamƒÅm personƒÅm (neizmantojot mazumtirdzniecƒ´bas tƒ´klu) ', '0       ');
INSERT INTO ACP25 (IDX, NAME, ID1) VALUES ('K044', 'piegƒÅdƒÅti kokmater. CitƒÅs ES dalƒ´bvalstƒ´s', '0       ');
INSERT INTO ACP25 (IDX, NAME, ID1) VALUES ('K051', 'Sniegto pakalpojumi apliekamƒÅm personƒÅm', '0       ');
INSERT INTO ACP25 (IDX, NAME, ID1) VALUES ('K061', 'Sa≈Üemto kokmateriƒÅli no apliekamƒÅm personƒÅm (neizmantojot mazumtirdzniecƒ´bas tƒ´klu) ', '0       ');
INSERT INTO ACP25 (IDX, NAME, ID1) VALUES ('K063', 'no neapliekamƒÅm personƒÅm (neizmantojot mazumtirdzniecƒ´bas tƒ´klu)', '0       ');
INSERT INTO ACP25 (IDX, NAME, ID1) VALUES ('K071', 'Sa≈Üemto pakalpojumi no apliekamƒÅm personƒÅm', '0       ');
INSERT INTO ACP25 (IDX, NAME, ID1) VALUES ('K101', 'PVN par kokmateriƒÅliem, kas sa≈Üemti no apliekamƒÅm personƒÅm', '0       ');
INSERT INTO ACP25 (IDX, NAME, ID1) VALUES ('K105', 'PVN par pakalpojumiem, kas sa≈Üemti no apliekamƒÅm personƒÅm', '0       ');
INSERT INTO ACP25 (IDX, NAME, ID1) VALUES ('K108', 'PVN par kokmateriƒÅliem, kas piegƒÅdƒÅti apliekamƒÅm personƒÅm', '0       ');
INSERT INTO ACP25 (IDX, NAME, ID1) VALUES ('K109', 'PVN par pakalpojumiem, kas sniegti apliekamƒÅm personƒÅm', '0       ');


COMMIT WORK;

INSERT INTO ACP25A (IDX, NAME) VALUES ('0', 'Nav PVN');
INSERT INTO ACP25A (IDX, NAME) VALUES ('1', 'Ir PVN');


COMMIT WORK;

INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('101', 'ar PVN 18 % likmi apliekamie darƒ´jumi (arƒ´ pa≈°patƒìri≈Ü≈°)', 18, '41', 8, 31, 1, 0, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('102', 'ar PVN 5 % likmi apliekamie darƒ´jumi (arƒ´ pa≈°patƒìri≈Ü≈°)', 5, '42.1', 9, 31, 1, 0, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('104', 'ar PVN 21 % likmi apliekamie darƒ´jumi (arƒ´ pa≈°patƒìri≈Ü≈°)', 21, '41', 8, 31, 1, 0, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('105', 'ar PVN 10 % likmi apliekamie darƒ´jumi (arƒ´ pa≈°patƒìri≈Ü≈°)', 10, '42', 9, 31, 1, 0, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('106', 'Atgriezta prece', 0, '', 0, 0, 0, 0, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('107', 'ar PVN 22 % likmi apliekamie darƒ´jumi (arƒ´ pa≈°patƒìri≈Ü≈°)', 22, '41', 8, 31, 1, 0, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('108', 'ar PVN 12 % likmi apliekamie darƒ´jumi (arƒ´ pa≈°patƒìri≈Ü≈°)', 12, '42', 9, 31, 1, 0, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('110', 'Ar 0% apliekamie darijumi', 0, '', 10, 0, 0, 0, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('111', '- darƒ´jumi, kas veikti  brƒ´vostƒÅs un SEZ', 0, '44', 101, 31, 1, 0, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('112', '- uz ES dalƒ´bvalstƒ´m piegƒÅdƒÅtƒÅs preces', 0, 'G', 102, 0, 71, 0, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('113', '- citƒÅs ES dalƒ´bvalstƒ´s uzstƒÅdƒ´tƒÅs vai montƒìtƒÅs preces', 0, '46', 103, 0, 0, 0, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('114', '- uz ES dalƒ´bvalstƒ´m piegƒÅdƒÅtie jaunie transportlƒ´dzekƒºi', 0, '47', 104, 0, 0, 0, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('115', '- par sniegtajiem pakalpojumiem', 0, '48', 105, 0, 0, 0, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('116', '- eksportƒìtƒÅs preces', 0, '481', 106, 0, 0, 0, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('117', 'ƒÅrpuskopienas preƒçu piegƒÅdes muitas noliktavƒÅs un brƒ´vajƒÅs zonƒÅs', 0, '46', 103, 0, 0, 0, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('118', 'CitƒÅs valstƒ´s veiktie darƒ´jumi', 0, '48.2', 12, 31, 1, 0, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('121', 'Ar PVN neapliekamie darƒ´jumi', 0, '', 13, 0, 0, 0, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('131', 'No ES dalƒ´bvalstƒ´m sa≈ÜemtƒÅs preces (18 %)', 18, 'G', 14, 0, 12, 0, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('132', 'No ES dalƒ´bvalstƒ´m sa≈ÜemtƒÅs preces (5 %)', 5, 'G', 15, 0, 12, 0, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('133', 'No ES dalƒ´bvalstƒ´m sa≈ÜemtƒÅs preces (21 %)', 21, 'G', 14, 0, 12, 0, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('134', 'No ES dalƒ´bvalstƒ´m sa≈ÜemtƒÅs preces (10 %)', 10, 'G', 15, 0, 12, 0, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('135', 'No ES dalƒ´bvalstƒ´m sa≈Üemtie pakalpojumi (21 %)', 21, 'P', 14, 0, 12, 0, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('136', 'No ES dalƒ´bvalstƒ´m sa≈ÜemtƒÅs preces (22 %)', 22, 'G', 14, 0, 12, 0, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('137', 'No ES dalƒ´bvalstƒ´m sa≈Üemtie pakalpojumi (22 %)', 22, 'P', 14, 0, 12, 0, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('201', 'PVN ar 18 % likmi apliekamiem darƒ´jumiem', 18, '41', 16, 32, 2, 0, 1);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('202', 'PVN ar 5 % likmi apliekamiem darƒ´jumiem', 5, '42.1', 17, 32, 2, 0, 1);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('204', 'PVN ar 21 % likmi apliekamiem darƒ´jumiem', 21, '41', 16, 32, 2, 0, 1);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('205', 'PVN ar 10 % likmi apliekamiem darƒ´jumiem', 10, '42', 17, 32, 2, 0, 1);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('206', 'PVN ar 22 % likmi apliekamiem darƒ´jumiem', 22, '41', 16, 32, 2, 0, 1);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('207', 'PVN ar 12 % likmi apliekamiem darƒ´jumiem', 12, '42', 17, 32, 2, 0, 1);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('211', 'par sa≈Üemtajiem pakalpojumiem', 21, '48.2', 18, 32, 2, 0, 1);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('231', 'PVN ar 18 % likmi apliekamƒÅm precƒìm, kas sa≈Üemtas no ES dalƒ´bvalstƒ´m', 18, '', 19, 0, 13, 0, 2);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('232', 'PVN ar 5 % likmi apliekamƒÅm precƒìm, kas sa≈Üemtas no ES dalƒ´bvalstƒ´m', 5, '', 20, 0, 13, 0, 2);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('233', 'PVN ar 21 % likmi apliekamƒÅm precƒìm, kas sa≈Üemtas no ES dalƒ´bvalstƒ´m', 21, '', 19, 0, 13, 0, 2);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('234', 'PVN ar 10 % likmi apliekamƒÅm precƒìm, kas sa≈Üemtas no ES dalƒ´bvalstƒ´m', 10, '', 20, 0, 13, 0, 2);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('235', 'PVN ar 21 % likmi apliekamiem pakalpojumiem, kas sa≈Üemtas no ES dalƒ´bvalstƒ´m', 21, '', 19, 0, 13, 0, 2);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('236', 'PVN ar 22 % likmi apliekamƒÅm precƒìm, kas sa≈Üemtas no ES dalƒ´bvalstƒ´m', 22, '', 19, 0, 13, 0, 2);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('237', 'PVN ar 12 % likmi apliekamƒÅm precƒìm, kas sa≈Üemtas no ES dalƒ´bvalstƒ´m', 12, '', 20, 0, 13, 0, 2);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('238', 'PVN ar 22 % likmi apliekamiem pakalpojumiem, kas sa≈Üemtas no ES dalƒ´bvalstƒ´m', 22, '', 19, 0, 13, 0, 2);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('251', 'AtskaitƒÅmais priek≈°nodoklis vai aprƒìƒ∑inƒÅtais nodoklis saska≈ÜƒÅ ar likuma 13.2 pantu', 21, '', 0, 0, 0, 0, 1);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('301', 'PVN 18 % par precƒìm un pakalpojumiem iek≈°zemƒì savas saimnieciskƒÅs darbƒ´bas nodro≈°inƒÅ≈°anai', 18, 'A', 27, 1, 4, 0, 1);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('302', 'PVN 5 % par precƒìm un pakalpojumiem iek≈°zemƒì savas saimnieciskƒÅs darbƒ´bas nodro≈°inƒÅ≈°anai', 5, 'A', 27, 1, 4, 0, 1);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('304', 'zemnieku saimniecƒ´bƒÅm izmaksƒÅtƒÅ PVN kompensƒÅcija', 12, 'K', 30, 1, 4, 0, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('305', 'PVN 21 % par precƒìm un pakalpojumiem iek≈°zemƒì savas saimnieciskƒÅs darbƒ´bas nodro≈°inƒÅ≈°anai', 21, 'A', 27, 1, 4, 0, 1);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('306', 'PVN 10 % par precƒìm un pakalpojumiem iek≈°zemƒì savas saimnieciskƒÅs darbƒ´bas nodro≈°inƒÅ≈°anai', 10, 'A', 27, 1, 4, 0, 1);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('307', 'PVN 22 % par precƒìm un pakalpojumiem iek≈°zemƒì savas saimnieciskƒÅs darbƒ´bas nodro≈°inƒÅ≈°anai', 22, 'A', 27, 1, 4, 0, 1);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('308', 'PVN 12 % par precƒìm un pakalpojumiem iek≈°zemƒì savas saimnieciskƒÅs darbƒ´bas nodro≈°inƒÅ≈°anai', 12, 'A', 27, 1, 4, 0, 1);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('311', 'par importƒìtajƒÅm precƒìm savas saimnieciskƒÅs darbƒ´bas nodro≈°inƒÅ≈°anai', 1, 'I', 26, 1, 4, 0, 3);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('321', 'Aprƒìƒ∑inƒÅtƒÅ PVN summa saska≈ÜƒÅ ar likuma 92.panta pirmƒÅs daƒºas 4.punktu (iz≈Üemot 64.rindu)', 1, 'N', 28, 1, 4, 0, 3);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('331', 'aprƒìƒ∑inƒÅtais priek≈°nodoklis par precƒìm, kas sa≈Üemtas no ES dalƒ´bvalstƒ´m', 1, 'G', 29, 2, 6, 0, 2);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('332', 'aprƒìƒ∑inƒÅtais priek≈°nodoklis par pakalpojumiem, kas sa≈Üemtas no ES dalƒ´bvalstƒ´m', 1, 'P', 29, 2, 6, 0, 2);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('341', 'NeatskaitƒÅmais priek≈°nodoklis', 0, '', 0, 0, 0, 0, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('351', 'AtskaitƒÅmais priek≈°nodoklis vai aprƒìƒ∑inƒÅtais nodoklis saska≈ÜƒÅ ar likuma 13.2 pantu', 0, '', 0, 0, 0, 0, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('400', 'Ar PVN neapliekamie izdevumi', 0, '', 0, 0, 9, 0, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('401', 'Sa≈ÜemtƒÅs preces un pakalpojumi iek≈°zemƒì ', 0, 'A', 23, 0, 8, 0, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('411', 'ImportƒìtƒÅs preces ', 0, 'I', 22, 0, 8, 0, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('421', 'Sa≈Üemtie pakalpojumi, par kuriem PVN maksƒÅ pakalpojumu sa≈Üƒìmƒìjs', 0, 'A', 24, 0, 8, 0, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('431', 'Preces, kas sa≈Üemtas no ES dalƒ´bvalstƒ´m', 0, 'G', 25, 0, 0, 0, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('501', 'Atkal PVN 18%', 18, '', 0, 0, 9, 0, 1);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('502', 'Atkal PVN 5%', 5, '', 0, 0, 9, 0, 1);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('504', 'Atkal PVN 12%', 12, '', 0, 0, 9, 0, 1);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('505', 'Atkal PVN 21%', 21, '', 0, 0, 9, 0, 1);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('506', 'Atkal PVN 10%', 10, '', 0, 0, 9, 0, 1);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('507', 'Atkal PVN 22%', 22, '', 0, 0, 9, 0, 1);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('508', 'Atkal PVN 12%', 12, '', 0, 0, 9, 0, 1);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('A01', 'MaksƒÅjumi bud≈æetam', 0, '', 0, 0, 10, 0, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('A02', 'Atgriezta pƒÅrmaksa', 0, '', 0, 0, 10, 0, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('B01', 'ie≈Üƒìmumi no b≈´vniecƒ´bas pakalpojumiem', 0, '41.1', 8, 21, 1, 1, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('B02', 'sa≈Üemtie b≈´vniecƒ´bas pakalpojumi', 0, 'R3', 23, 0, 8, 1, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('B11', 'aprƒìƒ∑inƒÅtais PVN no b≈´vniecƒ´bas pakalpojumiem', 1, '41.1', 8, 22, 2, 1, 2);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('B12', 'PVN par sa≈Üemtajiem b≈´vniecƒ´bas pakalpojumiem', 1, 'R3', 201, 0, 5, 1, 2);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('K041', 'PiegƒÅdƒÅtie kokmateriƒÅli apliekamƒÅm personƒÅm (neizmantojot mazumtirdzniecƒ´bas tƒ´klu) ', 0, '41.1', 8, 21, 1, 1, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('K042', 'PiegƒÅdƒÅtie kokmateriƒÅli, izmantojot mazumtirdzniecƒ´bas tƒ´klu', 0, '', 8, 0, 1, 1, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('K043', 'PiegƒÅdƒÅtie kokmateriƒÅli, neapliekamƒÅm personƒÅm (neizmantojot mazumtirdzniecƒ´bas tƒ´klu) ', 0, '41', 8, 31, 1, 1, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('K044', 'PiegƒÅdƒÅtie kokmateriƒÅli  citƒÅs Eiropas Savienƒ´bas dalƒ´bvalstƒ´s', 0, 'G', 12, 0, 71, 1, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('K045', 'PiegƒÅdƒÅtie kokmateriƒÅli brƒ´vajƒÅs zonƒÅs un muitas noliktavƒÅs piegƒÅdƒÅtie kokmateriƒÅli, kas ievesti Latvijas RepublikƒÅ no treƒÅjƒÅm valstƒ´m vai tre≈°ajƒÅm teritorijƒÅm un nav izlaisti brƒ´vam apgrozijumam iek≈°zemƒì', 0, '', 0, 0, 0, 1, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('K046', 'PiegƒÅdƒÅto kokmateriƒÅli tre≈°ajƒÅs valstƒ´s, vai tre≈°ajƒÅs teritorijƒÅs reƒ£istrƒìtƒÅm personƒÅm, kas nav reƒ£istrƒìtas VID apliekamo personu reƒ£istrƒÅ', 0, '481', 16, 0, 8, 1, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('K051', 'Sniegtie pakalpojumi apliekamƒÅm personƒÅm', 0, '41.1', 8, 21, 1, 1, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('K052', 'Sniegtie pakalpojumi neapliekamƒÅm personƒÅm', 0, '41', 8, 31, 1, 1, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('K053', 'Sniegtie pakalpojumi citƒÅs Eiropas Savienƒ´bas dalƒ´bvalstƒ´s', 0, 'P', 15, 0, 72, 1, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('K054', 'Sniegtie pakalpojumi brƒ´vajƒÅs zonƒÅs un muitas noliktavƒÅs sniegtie pakalpojumi, kas tie≈°i saistƒ´ti ar kokmateriƒÅliem, kas ievesti Latvijas RepublikƒÅ no treƒÅjƒÅm valstƒ´m vai tre≈°ajƒÅm teritorijƒÅm un nav izlaisti brƒ´vam apgrozijumam iek≈°zemƒì', 0, '', 0, 0, 0, 1, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('K055', 'Sniegto pakalpojumi tre≈°ajƒÅs valstƒ´s, vai tre≈°ajƒÅs teritorijƒÅs reƒ£istrƒìtƒÅm personƒÅm, kas nav reƒ£istrƒìtas VID apliekamo personu reƒ£istrƒÅ', 0, '481', 16, 0, 0, 1, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('K061', 'Sa≈Üemtie kokmateriƒÅli no apliekamƒÅm personƒÅm (neizmantojot mazumtirdzniecƒ´bas tƒ´klu) ', 0, 'R1', 23, 0, 8, 1, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('K062', 'Sa≈Üemtie kokmateriƒÅli, izmantojot mazumtirdzniecƒ´bas tƒ´klu', 0, '', 23, 0, 8, 1, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('K063', 'no neapliekamƒÅm personƒÅm (neizmantojot mazumtirdzniecƒ´bas tƒ´klu)', 0, '', 0, 0, 0, 1, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('K064', 'brƒ´vajƒÅs zonƒÅs un muitas noliktavƒÅs piegƒÅdƒÅtie kokmateriƒÅli, kas ievesti Latvijas RepublikƒÅ no treƒÅjƒÅm valstƒ´m vai tre≈°ajƒÅm teritorijƒÅm un nav izlaisti brƒ´vam apgrozijumam iek≈°zemƒì', 0, '', 0, 0, 0, 1, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('K065', 'brƒ´vajƒÅs zonƒÅs un muitas noliktavƒÅs ar PVN 0 % likmi sa≈Üemto kokmateriƒÅlu vƒìrtƒ´ba, ja kokmateriƒÅli ievesti Latvijas RepublikƒÅ no tre≈°ajƒÅm valstƒ´m vai tre≈°ajƒÅm teritorijƒÅm un nav izlaisti brƒ´vam apgrozƒ´jumam iek≈°zemƒì', 0, '', 23, 0, 8, 1, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('K071', 'Sa≈Üemtie pakalpojumi no apliekamƒÅm personƒÅm', 0, 'R1', 23, 0, 8, 1, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('K072', 'Sa≈Üemtie pakalpojumi no neapliekamƒÅm personƒÅm', 0, '', 0, 0, 0, 1, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('K073', 'Sa≈Üemtie pakalpojumi pakalpojumi, kas apliekami ar PVN 0 procentu likmi ', 0, '', 0, 0, 0, 1, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('K08', 'Neapliekamo darƒ´jumu veik≈°anai izmantoto kokmateriƒÅlu vƒìrtƒ´ba', 0, '', 0, 0, 0, 1, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('K09', 'Neapliekamo darƒ´jumu veik≈°anai izmantoto pakalpojumu vƒìrtƒ´ba', 0, '', 0, 0, 0, 1, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('K101', 'PVN par kokmateriƒÅliem, kas sa≈Üemti no apliekamƒÅm personƒÅm', 1, 'R1', 201, 11, 5, 1, 2);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('K102', 'PVN par kokmateriƒÅliem, kas piegƒÅdƒÅti, izmantojot mazumtirdzniecƒ´bas tƒ´klu', 1, '', 16, 0, 0, 1, 3);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('K103', 'PVN par kokmateriƒÅliem, kas piegƒÅdƒÅti neapliekamƒÅm personƒÅmi, neizmantojot mazumtirdzniecƒ´bas tƒ´klu', 1, '41', 16, 32, 2, 1, 3);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('K104', 'PVN par kokmateriƒÅliem, kas piegƒÅdƒÅti citƒÅs ES dalƒ´bvalstƒ´s vai tre≈°ajƒÅs valstƒ´s, vai tre≈°ajƒÅs teritorijƒÅs reƒ£istrƒìtƒÅm personƒÅm, kas nav reƒ£istrƒìtas VID', 1, '', 16, 0, 0, 1, 2);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('K105', 'PVN par pakalpojumiem, kas sa≈Üemti no apliekamƒÅm personƒÅm', 1, 'R1', 201, 11, 5, 1, 2);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('K106', 'PVN par pakalpojumiem, kas sniegti neapliekamƒÅm personƒÅm', 1, '41.1', 16, 32, 2, 1, 3);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('K107', 'PVN par pakalopjumiem, kas sniegti citƒÅs ES dalƒ´bvalstƒ´s vai tre≈°ajƒÅs valstƒ´s, vai tre≈°ajƒÅs teritorijƒÅs reƒ£istrƒìtƒÅm personƒÅm, kas nav reƒ£istrƒìtas VID', 1, '', 16, 0, 3, 1, 2);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('K108', 'PVN par kokmateriƒÅliem, kas piegƒÅdƒÅti apliekamƒÅm personƒÅm', 1, '41.1', 16, 22, 2, 1, 2);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('K109', 'PVN par pakalpojumiem, kas sniegti apliekamƒÅm personƒÅm', 1, '41.1', 16, 22, 2, 1, 2);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('K111', 'SamaksƒÅtais PVN par kokmateriƒÅliem, kas iegƒÅdƒÅti, izmantojot mazumtirdzniecƒ´bas tƒ´klu', 0, 'A', 27, 0, 4, 1, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('D01', 'PƒÅrdota prece (mobƒ´lie telefoni, plan≈°etdatori, klƒìpjdatori, ...)', 0, '41.1', 8, 21, 1, 1, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('D02', 'Sa≈Üemta prece (mobƒ´lie telefoni, plan≈°etdatori, klƒìpjdatori, ...)', 0, 'R4', 23, 0, 8, 1, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('D11', 'PVN par pƒÅrdoto (mobƒ´lie telefoni, plan≈°etdatori, klƒìpjdatori, ...)', 1, '41.1', 8, 22, 2, 1, 2);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('D12', 'PVN par sa≈Üemto (mobƒ´lie telefoni, plan≈°etdatori, klƒìpjdatori, ...)', 1, 'R4', 201, 0, 5, 1, 2);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('1121', '- uz ES dalƒ´bvalstƒ´m piegƒÅdƒÅtƒÅs preces (42.p.)', 0, 'G', 102, 0, 71, 0, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('B03', 'ie≈Üƒìmumi no b≈´vniecƒ´bas izstrƒÅdƒÅjumu piegƒÅdƒìm', 0, '41.1', 8, 21, 1, 1, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('B04', 'sa≈Üemtie b≈´vniecƒ´bas izstrƒÅdƒÅjumi', 0, 'R9', 23, 0, 8, 1, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('B13', 'aprƒìƒ∑inƒÅtais PVN no b≈´vniecƒ´bas izstrƒÅdƒÅjumu piegƒÅdƒìm', 1, '41.1', 8, 22, 2, 1, 2);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('B14', 'PVN par sa≈Üemtajiem b≈´vniecƒ´bas izstrƒÅdƒÅjumiem', 1, 'R9', 201, 0, 5, 1, 2);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('D03', 'PƒÅrdota prece (sadzƒ´ves elektronisko iekƒÅrtas un aparat≈´ra)', 0, '41.1', 8, 21, 1, 1, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('D04', 'Sa≈Üemta prece (sadzƒ´ves elektronisko iekƒÅrtas un aparat≈´ra)', 0, 'R8', 23, 0, 8, 1, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('D13', 'PVN par pƒÅrdoto (sadzƒ´ves elektronisko iekƒÅrtas un aparat≈´ra)', 1, '41.1', 8, 22, 2, 1, 2);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('D14', 'PVN par sa≈Üemto (sadzƒ´ves elektronisko iekƒÅrtas un aparat≈´ra)', 1, 'R8', 201, 0, 5, 1, 2);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('138', 'No ES dalƒ´bvalstƒ´m sa≈ÜemtƒÅs preces (12 %)', 12, 'G', 14, 0, 12, 0, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('M01', 'ie≈Üƒìmumi no metƒÅlizstrƒÅdƒÅjumu piegƒÅdƒìm un saistƒ´tiem pakalpojumiem', 0, '41.1', 8, 21, 1, 1, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('M02', 'sa≈Üemtie metƒÅlizstrƒÅdƒÅjumi un saistƒ´tie pakalpojumi', 0, 'R7', 23, 0, 8, 1, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('M11', 'aprƒìƒ∑inƒÅtais PVN no ie≈Üƒìmumi no metƒÅlizstrƒÅdƒÅjumu piegƒÅdƒìm un saistƒ´tiem pakalpojumiem', 1, '41.1', 8, 22, 2, 1, 2);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('M12', 'PVN par sa≈Üemtajiem metƒÅlizstrƒÅdƒÅjumiem un saistƒ´tiem pakalpojumiem', 1, 'R7', 201, 0, 5, 1, 2);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('361', 'Vieglo transportlƒ´dzekƒºu iegƒÅde un imports, PVN 21% likme', 21, 'C', 27, 1, 4, 0, 1);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('432', 'Pakalpojumi, kas sa≈Üemtas no ES dalƒ´bvalstƒ´m', 0, 'P', 25, 0, 0, 0, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('G01', 'PiegƒÅdƒÅta prece (graudaugi un tehniskas kult≈´ras)', 0, '41.1', 8, 21, 1, 1, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('G02', 'Sa≈Üemta prece (graudaugi un tehniskas kult≈´ras)', 0, 'R5', 23, 0, 8, 1, 0);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('G11', 'PVN par piegƒÅdƒÅto prece (graudaugi un tehniskas kult≈´ras)', 1, '41.1', 8, 22, 2, 1, 2);
INSERT INTO ACPVN (ID, NM, T, PZ1, PZ2, PZ2A, PZ3, PZ4, PZ5) VALUES ('G12', 'PVN par sa≈Üemto prece (graudaugi un tehniskas kult≈´ras)', 1, 'R5', 201, 0, 5, 1, 2);


COMMIT WORK;

INSERT INTO BALA1 (BALID, DESCR, TA, TP) VALUES ('B1', 'Bilance', 'Aktƒ´vs', 'Pasƒ´vs');
INSERT INTO BALA1 (BALID, DESCR, TA, TP) VALUES ('P1', 'Peƒº≈Üas un zaudƒìjumu aprƒìƒ∑ins', NULL, NULL);


COMMIT WORK;

INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (3, '001', 'B1', 'AK', 'V', '1.ILGTERMI≈ÖA IEGULDƒ™JUMI', '230', NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (23, '002', 'B1', 'AK', 'V', '     1. NemateriƒÅlie ieguldijumi', '060', NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (24, '010', 'B1', 'AK', 'S', '       1. Pƒìtniecƒ´bas darba un uz≈Üƒìmuma attƒ´stibas izmaksas', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (28, '020', 'B1', 'AK', 'S', '       2. Koncesijas, patenti, licences, preƒçu zƒ´mes un tamlƒ´dzƒ´gas tiesƒ´bas', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (29, '030', 'B1', 'AK', 'S', '       3. Citi nemateriƒÅlie ieguldijumi', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (30, '040', 'B1', 'AK', 'S', '       4. Uz≈Üƒìmuma nemateriƒÅlƒÅ vƒìrtiba', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (31, '050', 'B1', 'AK', 'S', '       5. Avansa maksƒÅjumi par nemateriƒÅlajiem ieguldƒ´jumiem', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (32, '060', 'B1', 'AK', 'K', '     1.KOPƒÄ', '010', '050', NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (33, '07', 'B1', 'AK', 'V', '     2. Pamatlƒ´dzekƒºi', '130', NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (34, '070', 'B1', 'AK', 'S', '       1. Zemes gabali, ƒìkas, b≈´ves un ilggadƒ´gie stƒÅdijumi', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (35, '080', 'B1', 'AK', 'S', '       2. Ilgtermi≈Üa ieguldijumi nomƒÅtos pamatlƒ´dzekƒºos', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (36, '090', 'B1', 'AK', 'S', '       3. IekƒÅrtas un ma≈°ƒ´nas', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (37, '100', 'B1', 'AK', 'S', '       4. PƒÅrƒìjie pamatlƒ´dzekƒºi un inventƒÅrs', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (38, '110', 'B1', 'AK', 'S', '       5. Pamatlƒ´dzekƒºu izveido≈°ana un nepabeigto celtniecƒ´bas objektu izmaksas', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (39, '120', 'B1', 'AK', 'S', '       6. Avansa maksƒÅjumi par pamatlƒ´dzekƒºiem', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (40, '130', 'B1', 'AK', 'K', '     2.KOPƒÄ', '070', '120', NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (41, '14', 'B1', 'AK', 'V', '     3. Ilgtermi≈Üa finansu ieguldijumi', '220', NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (42, '140', 'B1', 'AK', 'S', '       1. Lƒ´dzdalƒ´ba radniecƒ´go uz≈Üƒìmumu kapitƒÅlƒÅ', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (43, '150', 'B1', 'AK', 'S', '       2. Aizdevumi radniecƒ´gajiem uz≈Üƒìmumiem', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (44, '160', 'B1', 'AK', 'S', '       3. Lƒ´dzdalƒ´ba asociƒìto uz≈Üƒìmumu kapitƒÅlƒÅ', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (45, '170', 'B1', 'AK', 'S', '       4. Aizdevumi asociƒìtajiem uz≈Üƒìmumiem', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (46, '180', 'B1', 'AK', 'S', '       5. PƒÅrƒìjie vƒìrtspapƒ´ri un ieguldijumi', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (47, '190', 'B1', 'AK', 'S', '       6. PƒÅrƒìjie aizdevumi', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (48, '200', 'B1', 'AK', 'S', '       7. Pa≈°u akcijas un daƒºas', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (49, '210', 'B1', 'AK', 'S', '       8. Aizdevumi uz≈Üƒìmuma lƒ´dzƒ´pa≈°niekiem un vadƒ´bai', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (50, '220', 'B1', 'AK', 'K', '     3.KOPƒÄ', '140', '210', NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (51, '230', 'B1', 'AK', 'K', '1.iedaƒºas kopsumma', '010', '210', NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (52, '238', 'B1', 'AK', 'V', '2.APGROZƒÄMIE Lƒ™DZEKƒªI', '450', NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (53, '239', 'B1', 'AK', 'V', '     1. KrƒÅjumi', '300', NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (54, '240', 'B1', 'AK', 'S', '       1. Izejvielas, pamatmateriƒÅli un palƒ´gmateriƒÅli', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (55, '250', 'B1', 'AK', 'S', '       2. Nepabeigtie ra≈æojumi', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (56, '260', 'B1', 'AK', 'S', '       3. Gatavie ra≈æojumi un preces pƒÅrdo≈°anai', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (57, '270', 'B1', 'AK', 'S', '       4. Nepabeigtie pas≈´tƒ´jumi', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (58, '280', 'B1', 'AK', 'S', '       5. Avansa maksƒÅjumi par precƒìm', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (59, '290', 'B1', 'AK', 'S', '       6. Darba dzƒ´vniekieki un produktivie dzƒ´vniekieki', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (60, '300', 'B1', 'AK', 'K', '     1.KOPƒÄ', '240', '290', NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (61, '31', 'B1', 'AK', 'V', '     2. Debitori', '390', NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (62, '310', 'B1', 'AK', 'S', '       1. Pircƒìju un pas≈´tƒ´tƒÅju parƒÅdi', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (63, '320', 'B1', 'AK', 'S', '       2. Radniecƒ´go uz≈Üƒìmumu parƒÅdi', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (64, '330', 'B1', 'AK', 'S', '       3. Asociƒìto uz≈Üƒìmumu parƒÅdi', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (65, '340', 'B1', 'AK', 'S', '       4. Citi debitori', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (66, '350', 'B1', 'AK', 'S', '       5. NeiemaksƒÅtƒÅs daƒºas sabiedrƒ´bas kapitƒÅlƒÅ', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (67, '360', 'B1', 'AK', 'S', '       6. Aizdevumi uz≈Üƒìmuma lƒ´dzƒ´pa≈°niekiem un vadƒ´bai', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (68, '370', 'B1', 'AK', 'S', '       7. NƒÅkamo periodu izmaksas', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (69, '380', 'B1', 'AK', 'S', '       8. UzkrƒÅtie ie≈Üƒìmumi', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (70, '390', 'B1', 'AK', 'K', '     2.KOPƒÄ', '310', '380', NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (71, '40', 'B1', 'AK', 'V', '     3.Vƒìrtspapiri un lƒ´dzdalƒ´ba kapitƒÅlos', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (72, '400', 'B1', 'AK', 'S', '       1. Lƒ´dzdalƒ´ba radniecƒ´go uz≈Üƒìmuma kapitƒÅlƒÅ', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (73, '410', 'B1', 'AK', 'S', '       2. Pa≈°u akcijas un daƒºas', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (74, '420', 'B1', 'AK', 'S', '       3. PƒÅrƒìjie vƒìrtspapƒ´ri un lƒ´dzdalƒ´ba kapitƒÅlos', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (75, '430', 'B1', 'AK', 'K', '     3.KOPƒÄ', '400', '420', NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (76, '440', 'B1', 'AK', 'S', '     4. NAUDA', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (77, '450', 'B1', 'AK', 'K', '2.iedaƒºas kopsumma', '240', '420', NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (78, '460', 'B1', 'AK', 'K', 'BILANCE', '010', '440', NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (79, '46', 'B1', 'PA', 'V', '1.PA≈†U KAPITƒÄLS', '560', NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (80, '460', 'B1', 'PA', 'S', '  1. Akciju vai daƒºu kapitƒÅls (pamatkapitƒÅls)', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (81, '470', 'B1', 'PA', 'S', '  2. Akciju emisijas uzcenojums', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (82, '480', 'B1', 'PA', 'S', '  3. Ilgtermi≈Üa ieguldƒ´jumu pƒÅrvƒìrtƒì≈°anas rezerve', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (83, '49', 'B1', 'PA', 'S', '  4. Rezerves', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (84, '490', 'B1', 'PA', 'S', '    a) likumƒÅ noteiktƒÅs rezerves', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (85, '500', 'B1', 'PA', 'S', '    b) rezerves pa≈°u akcijƒÅm vai daƒºƒÅm', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (86, '510', 'B1', 'PA', 'S', '    c) uz≈Üƒìmuma stat≈´tos noteiktƒÅs rezerves', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (87, '520', 'B1', 'PA', 'S', '    d) pƒÅrƒìjƒÅs rezerves', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (88, '530', 'B1', 'PA', 'K', '  4.KOPƒÄ', '490', '520', NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (89, '54', 'B1', 'PA', 'S', '  5. Nesadalƒ´tƒÅ peƒº≈Üa', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (90, '540', 'B1', 'PA', 'S', '    a) iepriek≈°ƒìjo gadu nesadalitƒÅ peƒº≈Üa', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (91, '550', 'B1', 'PA', 'S', '    b) pƒÅrskata gada nesadalƒ´tƒÅ peƒº≈Üa', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (92, '560', 'B1', 'PA', 'K', '1.iedaƒºas kopsumma', '460', '560', NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (93, '57', 'B1', 'PA', 'V', '2.UZKRƒÄJUMI', '600', NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (94, '570', 'B1', 'PA', 'S', ' 1. UzkrƒÅjumi pensijƒÅm un tamlƒ´dzƒ´gƒÅm saistƒ´bƒÅm', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (95, '580', 'B1', 'PA', 'S', ' 2. UzkrƒÅjumi paredzamajiem nodokƒºiem', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (96, '590', 'B1', 'PA', 'S', ' 3. Citi uzkrƒÅjumi', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (97, '600', 'B1', 'PA', 'K', '2.iedaƒºas kopsumma', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (98, '608', 'B1', 'PA', 'V', '3.KREDITORI (ƒ´stermi≈Üa un ilgtermi≈Üa)', '920', NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (99, '609', 'B1', 'PA', 'V', '1.Ilgtermi≈Üa kreditori', '750', NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (100, '610', 'B1', 'PA', 'S', ' 1. Aiz≈Üƒìmumi pret obligƒÅcijƒÅm', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (101, '620', 'B1', 'PA', 'S', ' 2. AkcijƒÅs pƒÅrvƒìr≈°amie aiz≈Üƒìmumi', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (102, '630', 'B1', 'PA', 'S', ' 3. Aiz≈Üƒìmumi no kredƒ´tiestƒÅdƒìm', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (103, '640', 'B1', 'PA', 'S', ' 4. Citi aiz≈Üƒìmumi', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (104, '650', 'B1', 'PA', 'S', ' 5. No pircƒìjiem sa≈Üamtie avansi', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (105, '660', 'B1', 'PA', 'S', ' 6. ParƒÅdi piegƒÅdatƒÅjiem un darbuz≈Üƒìmƒìjiem', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (106, '670', 'B1', 'PA', 'S', ' 7. MaksƒÅjamie vekseƒºi', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (107, '680', 'B1', 'PA', 'S', ' 8. ParƒÅdi radniecƒ´gajiem uz≈Üƒìmumiem', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (108, '690', 'B1', 'PA', 'S', ' 9. ParƒÅdi asociƒìtajiem uz≈Üƒìmumiem', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (109, '700', 'B1', 'PA', 'S', ' 10. Nodokƒºi un sociƒÅlƒÅs nodro≈°inƒÅ≈°anas maksƒÅjumi', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (110, '710', 'B1', 'PA', 'S', ' 11. PƒÅrƒìjie kreditori', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (111, '720', 'B1', 'PA', 'S', ' 12. NƒÅkamo periodu ie≈Üƒìmumi', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (112, '730', 'B1', 'PA', 'S', ' 13. PƒÅrskata gada dividendes', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (113, '740', 'B1', 'PA', 'S', ' 14. Iepriek≈°ƒìjo gadu neizmaksƒÅtƒÅs dividendes', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (114, '750', 'B1', 'PA', 'S', '1.KOPƒÄ', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (115, '76', 'B1', 'PA', 'V', '1.ƒ™stermi≈Üa kreditori', '910', NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (131, '760', 'B1', 'PA', 'S', ' 1. Aiz≈Üƒìmumi pret obligƒÅcijƒÅm', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (132, '770', 'B1', 'PA', 'S', ' 2. AkcijƒÅs pƒÅrvƒìr≈°amie aiz≈Üƒìmumi', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (133, '780', 'B1', 'PA', 'S', ' 3. Aiz≈Üƒìmumi no kredƒ´tiestƒÅdƒìm', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (134, '790', 'B1', 'PA', 'S', ' 4. Citi aiz≈Üƒìmumi', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (135, '800', 'B1', 'PA', 'S', ' 5. No pircƒìjiem sa≈Üamtie avansi', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (136, '810', 'B1', 'PA', 'S', ' 6. ParƒÅdi piegƒÅdatƒÅjiem un darbuz≈Üƒìmƒìjiem', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (137, '820', 'B1', 'PA', 'S', ' 7. MaksƒÅjamie vekseƒºi', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (138, '830', 'B1', 'PA', 'S', ' 8. ParƒÅdi radniecƒ´gajiem uz≈Üƒìmumiem', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (139, '840', 'B1', 'PA', 'S', ' 9. ParƒÅdi asociƒìtajiem uz≈Üƒìmumiem', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (140, '850', 'B1', 'PA', 'S', ' 10. Nodokƒºi un sociƒÅlƒÅs nodro≈°inƒÅ≈°anas maksƒÅjumi', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (141, '860', 'B1', 'PA', 'S', ' 11. PƒÅrƒìjie kreditori', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (142, '870', 'B1', 'PA', 'S', ' 12. NƒÅkamo periodu ie≈Üƒìmumi', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (143, '880', 'B1', 'PA', 'S', ' 13. PƒÅrskata gada dividendes', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (144, '890', 'B1', 'PA', 'S', ' 14. Iepriek≈°ƒìjo gadu neizmaksƒÅtƒÅs dividendes', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (145, '900', 'B1', 'PA', 'S', ' 15. UzkrƒÅtƒÅs saistƒ´bas', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (146, '910', 'B1', 'PA', 'K', '2.KOPƒÄ', '760', '900', NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (147, '920', 'B1', 'PA', 'K', '3.iedaƒºas kopsumma', '620', '900', NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (148, '930', 'B1', 'PA', 'K', 'BILANCE', '460', '900', NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (149, '010', 'P1', 'PA', 'K', 'Neto apgrozijums', '011', '019', NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (150, '011', 'P1', 'PA', 'S', '  ie≈Üƒìmumi no veikala', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (151, '012', 'P1', 'PA', 'S', '  lauksaimniecƒ´bas ie≈Üƒìmumi', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (152, '020', 'P1', 'PA', 'K', 'PƒÅrdotƒÅs produkcijas ra≈æo≈°anas izmaksas', '021', '039', NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (153, '021', 'P1', 'PA', 'S', '  izejvielas, materiƒÅli un preces pƒÅrdo≈°anai', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (154, '022', 'P1', 'PA', 'S', '  degviela', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (155, '023', 'P1', 'PA', 'S', '  algas', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (156, '024', 'P1', 'PA', 'S', '  elektrƒ´ba', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (157, '025', 'P1', 'PA', 'S', '  nomas maksa', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (158, '026', 'P1', 'PA', 'S', '  saimniecƒ´bas izdevumi, telpu uzturƒì≈°ana', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (160, '027', 'P1', 'PA', 'S', '  nolietojums', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (161, '028', 'P1', 'PA', 'S', '  tehnikas uzturƒì≈°ana', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (162, '029', 'P1', 'PA', 'S', '  pƒÅrƒìjƒÅs izmaksaas', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (163, '040', 'P1', 'PA', 'K', 'Bruto peƒº≈Üa', '001', '039', NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (164, '050', 'P1', 'PA', 'K', 'PƒÅrdo≈°anas izmaksas', '051', '059', NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (165, '051', 'P1', 'PA', 'S', '  nomas maksa', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (166, '052', 'P1', 'PA', 'S', '  reklƒÅma', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (167, '053', 'P1', 'PA', 'S', '  preƒçu transports', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (168, '054', 'P1', 'PA', 'S', '  tara', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (169, '055', 'P1', 'PA', 'S', '  citi', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (170, '060', 'P1', 'PA', 'K', 'AdministrƒÅcijas izmaksas', '061', '069', NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (171, '061', 'P1', 'PA', 'S', '  sakari', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (172, '062', 'P1', 'PA', 'S', '  biroja izdevumi', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (173, '063', 'P1', 'PA', 'S', '  grƒÅmatvedƒ´bas, juristu un citi pakalpojumi', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (174, '064', 'P1', 'PA', 'S', '  bankas pakalpojumi', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (175, '065', 'P1', 'PA', 'S', '  transporta izdevumi', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (176, '066', 'P1', 'PA', 'S', '  pƒÅrƒìjie', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (177, '080', 'P1', 'PA', 'K', 'PƒÅrƒìjƒÅs uz≈Üƒìmuma saimnieciskƒÅs darbƒ´bas izmaksas', '081', '099', NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (178, '081', 'P1', 'PA', 'S', '  apdro≈°inƒÅ≈°ana', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (179, '082', 'P1', 'PA', 'S', '  nodevas', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (180, '083', 'P1', 'PA', 'S', '  pƒÅrƒìjie', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (181, '084', 'P1', 'PA', 'S', '  neatskaitƒÅmais PVN', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (182, '085', 'P1', 'PA', 'S', '  komandƒìjumi', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (183, '086', 'P1', 'PA', 'S', '  zaudƒìjumi no val≈´tas kursa pazeminƒÅ≈°anƒÅs', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (184, '087', 'P1', 'PA', 'S', '  soda naudas', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (185, '088', 'P1', 'PA', 'S', '  personƒ´gie izdevumi', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (186, '089', 'P1', 'PA', 'S', '  pƒÅrƒìjie', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (187, '100', 'P1', 'PA', 'K', 'PƒÅrƒìjie procentu ie≈Üƒìmumi un tamlƒ´dzƒ´gi ie≈Üƒìmumi', '101', '109', NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (188, '070', 'P1', 'PA', 'K', 'PƒÅrƒìjie uz≈Üƒìmuma saimnieciskƒÅs darbƒ´bas ie≈Üƒìmumi', '070', '079', NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (189, '071', 'P1', 'PA', 'S', '  subsƒ´dijas', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (190, '072', 'P1', 'PA', 'S', '  akcƒ´zes nodokƒºa kompensƒÅcija', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (191, '073', 'P1', 'PA', 'S', '  ie≈Üƒìmumi no pamatlƒ´dzekƒºu pƒÅrdo≈°anas', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (192, '074', 'P1', 'PA', 'S', '  pƒÅrƒìjie', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (193, '101', 'P1', 'PA', 'S', NULL, NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (194, '110', 'P1', 'PA', 'K', 'Procentu maksƒÅjumi un tamlƒ´dzƒ´gas izmaksas', '111', '119', NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (195, '111', 'P1', 'PA', 'S', '  samaksƒÅtie %', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (196, '112', 'P1', 'PA', 'S', '  val≈´tas kursu svƒÅrstƒ´bas', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (197, '113', 'P1', 'PA', 'S', '  citi', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (198, '150', 'P1', 'PA', 'K', 'ƒÄrkƒÅrtas ie≈Üƒìmumi', '151', '159', NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (199, '151', 'P1', 'PA', 'S', NULL, NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (200, '160', 'P1', 'PA', 'K', 'ƒÄrkƒÅrtas izdevumi', '161', '169', NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (201, '161', 'P1', 'PA', 'S', NULL, NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (202, '170', 'P1', 'PA', 'K', 'Peƒº≈Üa vai zaudƒìjumi pirms nodokƒºiem', '001', '169', NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (203, '180', 'P1', 'PA', 'S', 'Uz≈Üƒìmuma ienƒÅkuma nodoklis par pƒÅrskata periodu', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (204, '181', 'P1', 'PA', 'S', 'PƒÅrƒìjie nodokƒºi', NULL, NULL, NULL, NULL);
INSERT INTO BALA2 (ID, NR, BALID, DC, TP, DESCR, NR1, NR2, S1, S2) VALUES (205, '200', 'P1', 'PA', 'K', 'Peƒº≈Üa vai zaudƒìjumi pƒìc nodokƒºiem', '001', '199', NULL, NULL);


COMMIT WORK;

INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (15, 3, 'Db', '1*');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (19, 34, 'Db', '1210');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (20, 36, 'Db', '1220');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (21, 37, 'Db', '1230');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (22, 38, 'Db', '1240');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (23, 34, 'Db', '1291');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (24, 36, 'Db', '1292');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (25, 37, 'Db', '1293');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (26, 54, 'Db', '2110');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (27, 55, 'Db', '2120');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (28, 56, 'Db', '2130');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (29, 57, 'Db', '2140');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (30, 58, 'Db', '2190');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (31, 59, 'Db', '22');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (32, 62, 'Db', '2310');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (33, 65, 'Db', '2380');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (34, 68, 'Db', '2410');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (35, 76, 'Db', '26*');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (36, 80, 'Kr', '3110');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (37, 84, 'Kr', '3310');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (38, 84, 'Kr', '3330');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (39, 86, 'Kr', '3350');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (40, 87, 'Kr', '3360');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (41, 90, 'Kr', '3420');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (42, 91, 'Kr', '6*');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (43, 91, 'Kr', '7*');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (44, 91, 'Kr', '8*');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (45, 102, 'Kr', '5160');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (46, 133, 'Kr', '5150');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (47, 134, 'Kr', '5140');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (48, 135, 'Kr', '5210');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (49, 136, 'Kr', '531*');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (50, 140, 'Kr', '57*');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (51, 141, 'Kr', '5550');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (52, 141, 'Kr', '56*');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (53, 153, 'Kr', '7110');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (54, 153, 'Kr', '7112');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (55, 153, 'Kr', '7113');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (56, 153, 'Kr', '7114');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (57, 154, 'Kr', '71151');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (58, 154, 'Kr', '71152');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (59, 155, 'Kr', '7210');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (60, 155, 'Kr', '7211');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (61, 155, 'Kr', '7310');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (62, 155, 'Kr', '7311');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (63, 155, 'Kr', '7330');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (64, 156, 'Kr', '7522');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (66, 158, 'Kr', '7521');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (67, 158, 'Kr', '7524');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (68, 158, 'Kr', '7526');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (69, 158, 'Kr', '7527');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (70, 158, 'Kr', '7523');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (71, 160, 'Kr', '7410');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (72, 160, 'Kr', '7420');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (73, 161, 'Kr', '7525');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (75, 162, 'Kr', '7120');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (76, 162, 'Kr', '7140');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (77, 162, 'Kr', '7150');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (78, 162, 'Kr', '7160');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (79, 162, 'Kr', '717*');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (80, 162, 'Kr', '7529');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (81, 165, 'Kr', '7528');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (82, 166, 'Kr', '7651');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (83, 167, 'Kr', '7620');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (84, 167, 'Kr', '7630');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (85, 168, 'Kr', '7610');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (86, 169, 'Kr', '7650');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (87, 171, 'Kr', '771*');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (88, 172, 'Kr', '7720');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (89, 173, 'Kr', '7730');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (90, 173, 'Kr', '7740');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (91, 174, 'Kr', '7750');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (92, 175, 'Kr', '7760');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (93, 173, 'Kr', '7771');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (94, 176, 'Kr', '7770');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (95, 176, 'Kr', '7772');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (96, 178, 'Kr', '7540');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (97, 179, 'Kr', '7552');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (98, 180, 'Kr', '7550');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (99, 180, 'Kr', '7551');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (100, 181, 'Kr', '7553');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (101, 182, 'Kr', '7570');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (102, 180, 'Kr', '7560');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (103, 183, 'Kr', '8250');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (104, 184, 'Kr', '8260');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (105, 185, 'Kr', '8291');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (106, 185, 'Kr', '8292');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (107, 186, 'Kr', '8290');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (108, 186, 'Kr', '8293');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (109, 189, 'Kr', '6521');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (110, 190, 'Kr', '6522');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (111, 191, 'Kr', '6550');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (112, 192, 'Kr', '6520');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (113, 192, 'Kr', '6530');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (114, 192, 'Kr', '6540');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (115, 192, 'Kr', '6580');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (116, 192, 'Kr', '6590');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (117, 193, 'Kr', '8120');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (118, 193, 'Kr', '8150');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (119, 193, 'Kr', '8160');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (120, 193, 'Kr', '8170');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (121, 193, 'Kr', '8190');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (122, 192, 'Kr', '8190');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (123, 192, 'Kr', '8191');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (124, 192, 'Kr', '8192');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (125, 195, 'Kr', '8220');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (126, 195, 'Kr', '8240');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (127, 196, 'Kr', '8250');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (128, 196, 'Kr', '8270');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (130, 199, 'Kr', '8310');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (131, 201, 'Kr', '8410');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (132, 203, 'Kr', '8810');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (133, 204, 'Kr', '8820');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (134, 204, 'Kr', '8830');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (135, 150, 'Kr', '6*');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (136, 151, 'Kr', '6111');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (137, 157, 'Kr', NULL);
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (138, 87, 'Kr', '3220');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (139, 153, 'Db', '7111');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (140, 158, 'Db', '75292');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (141, 154, 'Kr', '71153');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (142, 161, 'Kr', '71154');
INSERT INTO BALA3 (ID, ID2, TP, AC) VALUES (143, 153, 'Kr', '7119');


COMMIT WORK;

INSERT INTO BANKS (ID, NAME) VALUES ('HABALV55', 'AS Swedbank');


COMMIT WORK;

INSERT INTO DOCTYP (ID, NAME, ID1, NAME1, TPZ, PVNPAZ) VALUES ('EKA ƒç', NULL, 'EKA ƒç', NULL, NULL, '2');
INSERT INTO DOCTYP (ID, NAME, ID1, NAME1, TPZ, PVNPAZ) VALUES ('iep.ak.', 'Iepirkuma akts', 'Iep.ak.', NULL, NULL, '5');
INSERT INTO DOCTYP (ID, NAME, ID1, NAME1, TPZ, PVNPAZ) VALUES ('Kr.rƒìƒ∑.', 'Kredƒ´trƒìƒ∑ins', 'Kr.rƒìƒ∑', NULL, NULL, '4');
INSERT INTO DOCTYP (ID, NAME, ID1, NAME1, TPZ, PVNPAZ) VALUES ('KTPRi', 'Izrakstƒ´ta KTPR', 'KTPR', NULL, NULL, '1');
INSERT INTO DOCTYP (ID, NAME, ID1, NAME1, TPZ, PVNPAZ) VALUES ('KTPRm', 'ApmaksƒÅta KTPR', 'KTPR', NULL, NULL, '1');
INSERT INTO DOCTYP (ID, NAME, ID1, NAME1, TPZ, PVNPAZ) VALUES ('KTPRs', 'Sa≈Üemta KTPR', 'KTPR', NULL, NULL, '1');
INSERT INTO DOCTYP (ID, NAME, ID1, NAME1, TPZ, PVNPAZ) VALUES ('KV', NULL, 'KV', NULL, NULL, '2');
INSERT INTO DOCTYP (ID, NAME, ID1, NAME1, TPZ, PVNPAZ) VALUES ('Lƒ´g.', 'Lƒ´gums', 'Lƒ´g.', NULL, NULL, '5');
INSERT INTO DOCTYP (ID, NAME, ID1, NAME1, TPZ, PVNPAZ) VALUES ('MD', 'Muitas deklarƒÅcija', NULL, NULL, NULL, '6');
INSERT INTO DOCTYP (ID, NAME, ID1, NAME1, TPZ, PVNPAZ) VALUES ('MU', 'MaksƒÅjuma uzdevums', NULL, NULL, NULL, '3');
INSERT INTO DOCTYP (ID, NAME, ID1, NAME1, TPZ, PVNPAZ) VALUES ('PPRdi', 'Izrakstƒ´ta PPR debitors', 'PPR', NULL, 'IZRPZ', '1');
INSERT INTO DOCTYP (ID, NAME, ID1, NAME1, TPZ, PVNPAZ) VALUES ('PPRdm', 'Sa≈Üemta samaksa par PPR no debitora', 'PPR', NULL, NULL, '1');
INSERT INTO DOCTYP (ID, NAME, ID1, NAME1, TPZ, PVNPAZ) VALUES ('PPRdu', 'Izrakstƒ´ta un apmaksƒÅta PPR', 'PPR', NULL, 'IZRPZ', '1');
INSERT INTO DOCTYP (ID, NAME, ID1, NAME1, TPZ, PVNPAZ) VALUES ('PPRka', 'Atgriezta prece piegƒÅdƒÅtƒÅjam', 'PPR', NULL, 'IZRPZ', '1');
INSERT INTO DOCTYP (ID, NAME, ID1, NAME1, TPZ, PVNPAZ) VALUES ('PPRkm', 'SamaksƒÅta PPR kreditoram', 'PPR', NULL, NULL, '1');
INSERT INTO DOCTYP (ID, NAME, ID1, NAME1, TPZ, PVNPAZ) VALUES ('PPRks', 'Sa≈Üemta PPR kreditors', 'PPR', NULL, 'SANPZ', '1');
INSERT INTO DOCTYP (ID, NAME, ID1, NAME1, TPZ, PVNPAZ) VALUES ('PPRku', 'Sa≈Üemta un apmaksƒÅta PPR', 'PPR', NULL, 'SANPZ', '1');
INSERT INTO DOCTYP (ID, NAME, ID1, NAME1, TPZ, PVNPAZ) VALUES ('Rƒìƒ∑', 'Rƒìƒ∑ins', 'Rƒìƒ∑', NULL, NULL, '1');


COMMIT WORK;

INSERT INTO DOCTYPA (ID, NAME) VALUES ('APMPZ', 'ApmaksƒÅtƒÅs PZ');
INSERT INTO DOCTYPA (ID, NAME) VALUES ('IEPAK', NULL);
INSERT INTO DOCTYPA (ID, NAME) VALUES ('IZRPZ', 'Izrakstƒ´ta PPR');
INSERT INTO DOCTYPA (ID, NAME) VALUES ('KTPRI', 'Izrakstƒ´ta KTPR');
INSERT INTO DOCTYPA (ID, NAME) VALUES ('KTPRS', 'Sa≈Üemta KTPR');
INSERT INTO DOCTYPA (ID, NAME) VALUES ('KtprVA', 'Atgriezts pƒìc ..');
INSERT INTO DOCTYPA (ID, NAME) VALUES ('KtprVR', 'RealizƒÅcija');
INSERT INTO DOCTYPA (ID, NAME) VALUES ('KtprVS', 'Strukt≈´rvienƒ´bƒÅm');
INSERT INTO DOCTYPA (ID, NAME) VALUES ('nePPR', 'Ne PPR');
INSERT INTO DOCTYPA (ID, NAME) VALUES ('PPRdi', 'Izrakstƒ´ta PPR debitors');
INSERT INTO DOCTYPA (ID, NAME) VALUES ('PPRdm', 'Sa≈Üemta samaksa par PPR no debitora');
INSERT INTO DOCTYPA (ID, NAME) VALUES ('PPRdu', 'Izrakstƒ´ta un apmaksƒÅta PPR');
INSERT INTO DOCTYPA (ID, NAME) VALUES ('PPRka', 'Atgriezta prece piegƒÅdƒÅtƒÅjam');
INSERT INTO DOCTYPA (ID, NAME) VALUES ('PPRkm', 'SamaksƒÅta PPR kreditoram');
INSERT INTO DOCTYPA (ID, NAME) VALUES ('PPRks', 'Sa≈Üemta PPR kreditors');
INSERT INTO DOCTYPA (ID, NAME) VALUES ('PPRku', 'Sa≈Üemta un apmaksƒÅta PPR');
INSERT INTO DOCTYPA (ID, NAME) VALUES ('SANPZ', 'Sa≈ÜemtƒÅs PZ');


COMMIT WORK;

INSERT INTO DOCTYPB (IDA, ID) VALUES ('APMPZ', 'PPRdm');
INSERT INTO DOCTYPB (IDA, ID) VALUES ('IEPAK', 'iep.ak.');
INSERT INTO DOCTYPB (IDA, ID) VALUES ('IZRPZ', 'PPRdi');
INSERT INTO DOCTYPB (IDA, ID) VALUES ('KTPRI', 'KTPRi');
INSERT INTO DOCTYPB (IDA, ID) VALUES ('KTPRS', 'KTPRs');
INSERT INTO DOCTYPB (IDA, ID) VALUES ('KtprVR', 'KTPRi');
INSERT INTO DOCTYPB (IDA, ID) VALUES ('nePPR', 'EKA ƒç');
INSERT INTO DOCTYPB (IDA, ID) VALUES ('PPRdi', 'PPRdi');
INSERT INTO DOCTYPB (IDA, ID) VALUES ('PPRdm', 'PPRdm');
INSERT INTO DOCTYPB (IDA, ID) VALUES ('PPRdu', 'PPRdu');
INSERT INTO DOCTYPB (IDA, ID) VALUES ('PPRka', 'PPRka');
INSERT INTO DOCTYPB (IDA, ID) VALUES ('PPRkm', 'PPRkm');
INSERT INTO DOCTYPB (IDA, ID) VALUES ('PPRks', 'PPRks');
INSERT INTO DOCTYPB (IDA, ID) VALUES ('PPRku', 'PPRku');
INSERT INTO DOCTYPB (IDA, ID) VALUES ('SANPZ', 'PPRks');
INSERT INTO DOCTYPB (IDA, ID) VALUES ('APMPZ', 'PPRdu');
INSERT INTO DOCTYPB (IDA, ID) VALUES ('APMPZ', 'PPRkm');
INSERT INTO DOCTYPB (IDA, ID) VALUES ('APMPZ', 'PPRku');
INSERT INTO DOCTYPB (IDA, ID) VALUES ('APMPZ', 'KTPRm');
INSERT INTO DOCTYPB (IDA, ID) VALUES ('IZRPZ', 'PPRdu');
INSERT INTO DOCTYPB (IDA, ID) VALUES ('IZRPZ', 'KTPRi');
INSERT INTO DOCTYPB (IDA, ID) VALUES ('SANPZ', 'PPRku');
INSERT INTO DOCTYPB (IDA, ID) VALUES ('nePPR', 'iep.ak.');
INSERT INTO DOCTYPB (IDA, ID) VALUES ('nePPR', 'KV');
INSERT INTO DOCTYPB (IDA, ID) VALUES ('nePPR', 'Lƒ´g.');


COMMIT WORK;

INSERT INTO TUSERS (NM, PSW, TP, NR) VALUES ('Admin', NULL, 'A   ', 0);
INSERT INTO TUSERS (NM, PSW, TP, NR) VALUES ('SYSTEM', NULL, 'A   ', 0);


COMMIT WORK;

INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (90, 'CompName', 'SIA ???', 'SYSTEM');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (91, 'CompRegNr', '', 'SYSTEM');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (92, 'CompMName', '', 'SYSTEM');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (93, 'CompPhone', '', 'SYSTEM');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (94, 'CompAddr', '', 'SYSTEM');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (95, 'CompAddrInd', '', 'SYSTEM');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (97, 'CompRegNrPVN', '', 'SYSTEM');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (98, 'CompMpk', '', 'SYSTEM');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (124, 'CompYear', '', 'SYSTEM');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (137, 'USRNM', 'Admin', 'SYSTEM');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (150, 'LOGCHDT', '', 'SYSTEM');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (162, 'MSGONDEL', 'true', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (163, 'MSGONCOPY', '0', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (164, '44CHCOL', '0010', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (165, 'LOGIT', '1', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (166, 'LOGITA', '1', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (167, 'LOGTM', '300', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (174, 'RSD', '', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (175, 'RED', '', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (176, 'RpvnD', NULL, 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (177, 'BALID', 'B1', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (194, 'AVRAC', '', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (195, 'AVNorSD', '', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (196, 'AVNorED', '', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (197, 'NorPers', '*', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (198, 'NorPersPK', NULL, 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (199, 'AVNorNR', '', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (200, 'version', '101', 'SYSTEM');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (201, 'CompVID', '', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (202, 'ACCPH', NULL, 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (9728, 'RAC', '2610', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (9729, 'RPER', '', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (9730, 'RACX', '*', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (9731, 'RACNM', '', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (9732, 'DLTYP', NULL, 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (9733, 'RAP1', '*', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (9734, 'RAP2', '*', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (9735, 'RAP3', '*', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (9736, 'RAP4', '*', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (9737, 'RAP5', '*', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (9738, 'RAP6', '*', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (9739, 'CSD', '', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (9740, 'CED', '', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (9837, 'RpvAmats', 'gramatvedis', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (9838, 'RpvVards', '', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (9839, 'RpvUzvards', '', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10228, 'UPRNP', 'true', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10229, 'UPRIIN', 'true', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10230, 'UPRIINIEN', 'true', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10231, 'UPRIINIZD', 'true', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10232, 'UPRIINIENV', 'NIE', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10233, 'UPRIINIZDV', 'NIZ', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10234, 'UPRPVN', 'true', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10235, 'UPRPVNIEN', 'true', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10236, 'UPRPVNIZD', 'false', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10237, 'UPRPVNIENV', '107', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10238, 'UPRPVNIZDV', '', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10239, 'UPRPVNDEB', 'true', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10240, 'UPRPVNKRED', 'true', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10241, 'UPRPVN5', 'true', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10242, 'UPRPVNDEBV', '305', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10243, 'UPRPVNKREDV', '207', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10244, 'UPRPVNREQPVN', 'true', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10245, 'UPRPVNREQIEN', 'true', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10246, 'UPRPVN5V', '507', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10247, 'OSD', '', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10248, 'OED', '', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10249, 'OCL', '', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10250, 'OAC11', '', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10251, 'OAC12', '', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10252, 'OAC13', '', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10253, 'OAC14', '', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10254, 'OAC15', '', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10255, 'OAC21', '', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10256, 'OAC22', '', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10257, 'OAC23', '', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10258, 'OAC24', '', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10259, 'OAC25', '', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10260, 'OOR', 'true', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10261, 'CompAddr1', '', 'SYSTEM');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10262, 'CompAddr2', '', 'SYSTEM');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10263, 'CompAddr3', '', 'SYSTEM');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10264, 'CompAddr4', '', 'SYSTEM');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10265, 'CompAccName', '', 'SYSTEM');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10266, 'CompAccPh', '', 'SYSTEM');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10267, 'BankId', '', 'SYSTEM');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10268, 'BankName', '', 'SYSTEM');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10269, 'BankAcc', '', 'SYSTEM');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10270, 'CompVID', '', 'SYSTEM');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10271, 'CHCOL', '1101', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10272, 'RpvnRG1', '1430', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10273, 'LinkDocsYR', '3', 'Admin');
INSERT INTO PARAMS (ID, PNAME, PVALUE, USR) VALUES (10274, 'RekinaIzr', '', 'Admin');


COMMIT WORK;

INSERT INTO PERSONTYP (ID, IDX, NAME) VALUES (1, 'DB', 'Debitors');
INSERT INTO PERSONTYP (ID, IDX, NAME) VALUES (2, 'KR', 'Kreditors');


COMMIT WORK;



/******************************************************************************/
/***                              Primary keys                              ***/
/******************************************************************************/

ALTER TABLE ACP1 ADD CONSTRAINT PK__ACP1__9DA8D5A804C0D954 PRIMARY KEY (ACPID);
ALTER TABLE ACP21 ADD CONSTRAINT PK__ACP21__3214AD20A272DC48 PRIMARY KEY (AC);
ALTER TABLE ACP211 ADD CONSTRAINT PK__ACP211__DC501A788C26AD0D PRIMARY KEY (IDX);
ALTER TABLE ACP22 ADD CONSTRAINT PK__ACP22__DC501A78F7BF300D PRIMARY KEY (IDX);
ALTER TABLE ACP23 ADD CONSTRAINT PK__ACP23__DC501A78EE827AF9 PRIMARY KEY (IDX);
ALTER TABLE ACP24 ADD CONSTRAINT PK__ACP24__DC501A7845A901A3 PRIMARY KEY (IDX);
ALTER TABLE ACP25 ADD CONSTRAINT PK__ACP25__DC501A78A6EFECC1 PRIMARY KEY (IDX);
ALTER TABLE ACP25A ADD CONSTRAINT PK__ACP25A__DC501A78E7485270 PRIMARY KEY (IDX);
ALTER TABLE ACP6 ADD CONSTRAINT PK__ACP6__DC501A78BE69FCD0 PRIMARY KEY (IDX);
ALTER TABLE ACPLAN ADD CONSTRAINT PK__ACPLAN__3214AD00B0FE5810 PRIMARY KEY (AC);
ALTER TABLE ACPVN ADD CONSTRAINT PK__ACPVN__3213E83F137BDD28 PRIMARY KEY (ID);
ALTER TABLE BAL0 ADD CONSTRAINT PK__TMP_MS_X__3213E83F6A868532 PRIMARY KEY (ID);
ALTER TABLE BALA1 ADD CONSTRAINT PK__BALA1__842EDA9299261787 PRIMARY KEY (BALID);
ALTER TABLE BALA2 ADD CONSTRAINT PK__BALA2__3213E83FCB256326 PRIMARY KEY (ID);
ALTER TABLE BALA21 ADD CONSTRAINT PK__BALA21__3213E83FBD50FDE0 PRIMARY KEY (ID);
ALTER TABLE BALA3 ADD CONSTRAINT PK__BALA3__3213E83FBD70B60A PRIMARY KEY (ID);
ALTER TABLE BANKS ADD CONSTRAINT PK__BANKS__3214EC0765D78C54 PRIMARY KEY (ID);
ALTER TABLE CURRENCY ADD CONSTRAINT PK__CURRENCY__EF8E0A20FA6E56A5 PRIMARY KEY (ID, DETE);
ALTER TABLE DOCS0 ADD CONSTRAINT PK_DOCS0_ID PRIMARY KEY (ID);
ALTER TABLE DOCTYP ADD CONSTRAINT PK__DOCTYP__3213E83F9886F2DE PRIMARY KEY (ID);
ALTER TABLE DOCTYPA ADD CONSTRAINT PK__DOCTYPA__3213E83F1DA1D4A8 PRIMARY KEY (ID);
ALTER TABLE DOCTYPB ADD CONSTRAINT PK__DOCTYPB__CONSTR PRIMARY KEY (IDA, ID);
ALTER TABLE LOGX ADD CONSTRAINT PK__LOGX__3213E83F5C7469B5 PRIMARY KEY (ID);
ALTER TABLE LOPS ADD CONSTRAINT PK__TMP_MS_X__DC501A0429A72C80 PRIMARY KEY (IDL);
ALTER TABLE LOPSD ADD CONSTRAINT PK__LOPSD__DC501A044B87E3D6 PRIMARY KEY (IDL);
ALTER TABLE LXOP ADD CONSTRAINT PK__LXOP__3213E83F225DF5A5 PRIMARY KEY (ID);
ALTER TABLE OPS ADD CONSTRAINT PK__TMP_MS_X__3213E83FA150CF75 PRIMARY KEY (ID);
ALTER TABLE OPSD ADD CONSTRAINT PK__OPSD__3213E83FF730A5A4 PRIMARY KEY (ID);
ALTER TABLE OPSD_YEAR_SEQ ADD CONSTRAINT PK__OPSD_YEA__3216622D85DDD79F PRIMARY KEY (YR);
ALTER TABLE PARAMS ADD CONSTRAINT PK__PARAMS__3213E83F3D519D8A PRIMARY KEY (ID);
ALTER TABLE PERSONS ADD CONSTRAINT PK__PERSONS__B1FCF8F5576F5ADD PRIMARY KEY (CLID);
ALTER TABLE PERSONTYP ADD CONSTRAINT PK__PERSONTY__3213E83F944BE0AD PRIMARY KEY (ID);
ALTER TABLE ROPS1A ADD CONSTRAINT PK__TMP_MS_X__3213E83FD68D33C6 PRIMARY KEY (ID);
ALTER TABLE ROPS2A ADD CONSTRAINT PK__ROPS2A__3213E83F25E04BE2 PRIMARY KEY (ID);
ALTER TABLE ROPS2B ADD CONSTRAINT PK__ROPS2B__3213E83F5AB28FC2 PRIMARY KEY (ID);
ALTER TABLE ROPS3A ADD CONSTRAINT PK__ROPS3A__3213E83FC0E2AA1D PRIMARY KEY (ID);
ALTER TABLE TABLE1 ADD CONSTRAINT PK__TABLE1__3214EC2714CF7944 PRIMARY KEY (ID);
ALTER TABLE TREM ADD CONSTRAINT PK__TREM__3213E83F9C5D0DB7 PRIMARY KEY (ID);
ALTER TABLE TREPA1 ADD CONSTRAINT PK__TREPA1__3213E83F483D1625 PRIMARY KEY (ID);
ALTER TABLE TREPAPAN ADD CONSTRAINT PK__TREPAPAN__3213E83F7A98EC00 PRIMARY KEY (ID);
ALTER TABLE TREPDARZ1 ADD CONSTRAINT PK__TREPDARZ__3213E83F432034DF PRIMARY KEY (ID);
ALTER TABLE TREPDARZ2 ADD CONSTRAINT PK__TREPDARZ__3213E83F3C691ACE PRIMARY KEY (ID);
ALTER TABLE TREPDOCS1 ADD CONSTRAINT PK__TREPDOCS__3213E83FA3E8A875 PRIMARY KEY (ID);
ALTER TABLE TREPDOCS2 ADD CONSTRAINT PK__TREPDOCS__3213E83F4EE9060F PRIMARY KEY (ID);
ALTER TABLE TREPDOCSS ADD CONSTRAINT PK__TREPDOCS__3213E83F6349CEC7 PRIMARY KEY (ID);
ALTER TABLE TREPMT ADD CONSTRAINT PK__TREPMT__3213E83FC895F2B2 PRIMARY KEY (ID);
ALTER TABLE TREPOPS ADD CONSTRAINT PK__TMP_MS_X__3213E83FA831B122 PRIMARY KEY (ID);
ALTER TABLE TREPOPSD ADD CONSTRAINT PK_TREPOPSD PRIMARY KEY (ID);
ALTER TABLE TREPPVNZ1 ADD CONSTRAINT PK__TREPPVNZ1 PRIMARY KEY (ID);
ALTER TABLE TREPUDOCS ADD CONSTRAINT PK__TREPUDOC__3213E83FF7D73D89 PRIMARY KEY (ID);
ALTER TABLE TTEMP_BALA21 ADD CONSTRAINT PK_TTEMP_BALA21 PRIMARY KEY (ID);
ALTER TABLE TTEMP_BALAC ADD CONSTRAINT PK_TTEMP_BALAC PRIMARY KEY (ID);
ALTER TABLE TTEMP_BALMT1 ADD CONSTRAINT PK_TTEMP_BALMT1 PRIMARY KEY (ID);
ALTER TABLE TTEMP_BALMT2 ADD CONSTRAINT PK_TTEMP_BALMT2 PRIMARY KEY (ID);
ALTER TABLE TTEMP_PVN1 ADD CONSTRAINT PK_TTEMP_PVN1 PRIMARY KEY (ID)
USING INDEX PK_TTEMP_PVN1_ID;
ALTER TABLE TTEMP_PVN2 ADD CONSTRAINT PK_TTEMP_PVN2 PRIMARY KEY (CLID);
ALTER TABLE TUDOCLISTS ADD CONSTRAINT PK__TUDOCLIS__3213E83F9C7066D9 PRIMARY KEY (ID);
ALTER TABLE TUDOCS ADD CONSTRAINT PK__TUDOCS__3213E83F8EA39304 PRIMARY KEY (ID);
ALTER TABLE TUPDFIELDS ADD CONSTRAINT PK__TUPDFIEL__3213E83FF88B6F55 PRIMARY KEY (ID);
ALTER TABLE TUPVN1 ADD CONSTRAINT PK__TUPVN1__3213E83F73B41AD6 PRIMARY KEY (ID);
ALTER TABLE TUSERS ADD CONSTRAINT PK__TUSERS__3213D0821884B502 PRIMARY KEY (NM);


/******************************************************************************/
/***                              Foreign keys                              ***/
/******************************************************************************/

ALTER TABLE BAL0 ADD CONSTRAINT FK_BAL0_AC1_ACP21_AC FOREIGN KEY (AC11) REFERENCES ACP21 (AC);
ALTER TABLE BAL0 ADD CONSTRAINT FK_BAL0_AC4_ACP24_IDX FOREIGN KEY (AC24) REFERENCES ACP24 (IDX);
ALTER TABLE BAL0 ADD CONSTRAINT FK_BAL0_CLID_PERSONS_CLID FOREIGN KEY (CLID) REFERENCES PERSONS (CLID);
ALTER TABLE BALA2 ADD CONSTRAINT FK_BALA2_BALID_BALA1_BALID FOREIGN KEY (BALID) REFERENCES BALA1 (BALID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE BALA3 ADD CONSTRAINT FK_BALA3_ID2_BALA2_ID FOREIGN KEY (ID2) REFERENCES BALA2 (ID) ON DELETE CASCADE;
ALTER TABLE DOCS0 ADD CONSTRAINT FK_DOCS0_AC_ACP21_AC FOREIGN KEY (AC) REFERENCES ACP21 (AC);
ALTER TABLE DOCS0 ADD CONSTRAINT FK_DOCS0_CLID_PERSONS_CLID FOREIGN KEY (CLID) REFERENCES PERSONS (CLID);
ALTER TABLE DOCS0 ADD CONSTRAINT FK_DOCS0_DOCTYP_DOCTYP_ID FOREIGN KEY (DOCTYP) REFERENCES DOCTYP (ID);
ALTER TABLE DOCTYPB ADD CONSTRAINT FK_DOCTYPB_IDA_DOCTYPA_ID FOREIGN KEY (IDA) REFERENCES DOCTYPA (ID) ON UPDATE CASCADE;
ALTER TABLE DOCTYPB ADD CONSTRAINT FK_DOCTYPB_ID_DOCTYP_ID FOREIGN KEY (ID) REFERENCES DOCTYP (ID) ON UPDATE CASCADE;
ALTER TABLE OPS ADD CONSTRAINT FK_OPS_AC11_ACP21_AC FOREIGN KEY (AC11) REFERENCES ACP21 (AC);
ALTER TABLE OPS ADD CONSTRAINT FK_OPS_AC12_ACP21_AC FOREIGN KEY (AC12) REFERENCES ACP21 (AC);
ALTER TABLE OPS ADD CONSTRAINT FK_OPS_AC13_ACP23_IDX FOREIGN KEY (AC13) REFERENCES ACP23 (IDX);
ALTER TABLE OPS ADD CONSTRAINT FK_OPS_AC14_ACP24_IDX FOREIGN KEY (AC14) REFERENCES ACP24 (IDX);
ALTER TABLE OPS ADD CONSTRAINT FK_OPS_AC15_ACP25_IDX FOREIGN KEY (AC15) REFERENCES ACP25 (IDX);
ALTER TABLE OPS ADD CONSTRAINT FK_OPS_AC21_ACP21_AC FOREIGN KEY (AC21) REFERENCES ACP21 (AC);
ALTER TABLE OPS ADD CONSTRAINT FK_OPS_AC22_ACP21_AC FOREIGN KEY (AC22) REFERENCES ACP21 (AC);
ALTER TABLE OPS ADD CONSTRAINT FK_OPS_AC23_ACP23_IDX FOREIGN KEY (AC23) REFERENCES ACP23 (IDX);
ALTER TABLE OPS ADD CONSTRAINT FK_OPS_AC24_ACP24_IDX FOREIGN KEY (AC24) REFERENCES ACP24 (IDX);
ALTER TABLE OPS ADD CONSTRAINT FK_OPS_AC25_ACP25_IDX FOREIGN KEY (AC25) REFERENCES ACP25 (IDX);
ALTER TABLE OPS ADD CONSTRAINT FK_OPS_DOCID_OPSD_ID FOREIGN KEY (DOCID) REFERENCES OPSD (ID) ON DELETE CASCADE;
ALTER TABLE OPSD ADD CONSTRAINT FK_OPSD_CLID2_PERSONS_CLID FOREIGN KEY (CLID2) REFERENCES PERSONS (CLID);
ALTER TABLE OPSD ADD CONSTRAINT FK_OPSD_CLID_PERSONS_CLID FOREIGN KEY (CLID) REFERENCES PERSONS (CLID);
ALTER TABLE OPSD ADD CONSTRAINT FK_OPSD_DOCTYP_DOCTYP_ID FOREIGN KEY (DOCTYP) REFERENCES DOCTYP (ID);
ALTER TABLE PARAMS ADD CONSTRAINT FK_PARAMS_USR_TUSERS_NM FOREIGN KEY (USR) REFERENCES TUSERS (NM) ON DELETE CASCADE ON UPDATE CASCADE;


/******************************************************************************/
/***                                Indices                                 ***/
/******************************************************************************/

CREATE INDEX ACP1_ACPID ON ACP1 (ACPID);
CREATE INDEX ACP21_ID1 ON ACP21 (ID1);
CREATE INDEX ACP21_ID2 ON ACP21 (ID2);
CREATE UNIQUE INDEX ACP21_IDX ON ACP21 (AC);
CREATE INDEX ACP211_IDN ON ACP211 (ID1);
CREATE UNIQUE INDEX ACP211_IDX ON ACP211 (IDX);
CREATE UNIQUE INDEX ACP22_IDX ON ACP22 (IDX);
CREATE INDEX ACP23_IDN ON ACP23 (ID1);
CREATE UNIQUE INDEX ACP23_IDX ON ACP23 (IDX);
CREATE UNIQUE INDEX ACP24_IDX ON ACP24 (IDX);
CREATE INDEX ACP25_ID1 ON ACP25 (ID1);
CREATE UNIQUE INDEX ACP25_IDX ON ACP25 (IDX);
CREATE UNIQUE INDEX ACP25A_IDX ON ACP25A (IDX);
CREATE UNIQUE INDEX ACP6_IDX ON ACP6 (IDX);
CREATE INDEX ACPVN_ID ON ACPVN (ID);
CREATE INDEX IND_BAL0_AC11 ON BAL0 (AC11);
CREATE INDEX IND_BAL0_AC24 ON BAL0 (AC24);
CREATE INDEX IND_BAL0_CLID ON BAL0 (CLID);
CREATE INDEX BALA1_ID ON BALA1 (BALID);
CREATE INDEX BALA2_BALID ON BALA2 (BALID);
CREATE INDEX BALA2_ID ON BALA2 (ID);
CREATE INDEX BALA21_BID ON BALA21 (BID);
CREATE INDEX BALA21_ID ON BALA21 (ID);
CREATE INDEX BALA3_ID ON BALA3 (ID);
CREATE INDEX BALA3_ID2 ON BALA3 (ID2);
CREATE INDEX FK_DOCS0_AC ON DOCS0 (AC);
CREATE INDEX DOCTYP_ID ON DOCTYP (ID);
CREATE INDEX DOCTYP_ID1 ON DOCTYP (ID1);
CREATE INDEX DOCTYPA_ID ON DOCTYPA (ID);
CREATE INDEX DOCTYPB_ID ON DOCTYPB (ID);
CREATE INDEX DOCTYPB_IDA ON DOCTYPB (IDA);
CREATE INDEX LOGX_ID ON LOGX (ID);
CREATE INDEX LOGX_LID ON LOGX (LID);
CREATE INDEX LOPS_DOCID ON LOPS (DOCID);
CREATE INDEX LOPS_DTL ON LOPS (DTL);
CREATE INDEX LOPS_DTLD ON LOPS (DTLD);
CREATE INDEX LOPS_ID ON LOPS (ID);
CREATE UNIQUE INDEX LOPS_IDL ON LOPS (IDL);
CREATE INDEX LOPSD_CLID ON LOPSD (CLID);
CREATE INDEX LOPSD_CLID2 ON LOPSD (CLID2);
CREATE INDEX LOPSD_DATE ON LOPSD (DETE);
CREATE INDEX LOPSD_ID ON LOPSD (ID);
CREATE UNIQUE INDEX LOPSD_IDL ON LOPSD (IDL);
CREATE INDEX LOPSD_ZDT ON LOPSD (ZDT);
CREATE INDEX LOPSD_ZNR ON LOPSD (ZNR);
CREATE INDEX LXOP_AD ON LXOP (AD);
CREATE INDEX LXOP_AR ON LXOP (AR);
CREATE INDEX LXOP_ID ON LXOP (ID);
CREATE INDEX IND_OPS_AC11 ON OPS (AC11);
CREATE INDEX IND_OPS_AC12 ON OPS (AC12);
CREATE INDEX IND_OPS_AC13 ON OPS (AC13);
CREATE INDEX IND_OPS_AC14 ON OPS (AC14);
CREATE INDEX IND_OPS_AC15 ON OPS (AC15);
CREATE INDEX IND_OPS_AC21 ON OPS (AC21);
CREATE INDEX IND_OPS_AC22 ON OPS (AC22);
CREATE INDEX IND_OPS_AC23 ON OPS (AC23);
CREATE INDEX IND_OPS_AC24 ON OPS (AC24);
CREATE INDEX IND_OPS_AC25 ON OPS (AC25);
CREATE INDEX IND_OPS_DOCID ON OPS (DOCID);
CREATE INDEX DOCS0_CLID ON OPSD (CLID);
CREATE INDEX DOCS0_DOCTYP ON OPSD (DOCTYP);
CREATE INDEX OPSD_CLID ON OPSD (CLID);
CREATE INDEX OPSD_CLID1 ON OPSD (CLID2);
CREATE INDEX OPSD_DOCTYP ON OPSD (DOCTYP);
CREATE INDEX OPSD_ZNR ON OPSD (ZNR);
CREATE INDEX PARAMS_ID ON PARAMS (ID);
CREATE INDEX PARAMS_PNAME ON PARAMS (PNAME);
CREATE INDEX TUSERSPARAMS ON PARAMS (USR);
CREATE INDEX PERSONS_CLID ON PERSONS (CLID);
CREATE INDEX PERSONTYP_ID ON PERSONTYP (ID);
CREATE INDEX PERSONTYP_IDX ON PERSONTYP (IDX);
CREATE INDEX ROPS1A_CLID ON ROPS1A (CLID);
CREATE INDEX ROPS1A_CLID1 ON ROPS1A (CLID2);
CREATE INDEX ROPS1A_DID ON ROPS1A (DID);
CREATE INDEX ROPS1A_SPID ON ROPS1A (SPID);
CREATE INDEX ROPS2A_AC ON ROPS2A (AC);
CREATE INDEX ROPS2A_ID ON ROPS2A (ID);
CREATE INDEX ROPS2A_SPID ON ROPS2A (SPID);
CREATE INDEX ROPS2B_AC ON ROPS2B (AC);
CREATE INDEX ROPS2B_ID ON ROPS2B (ID);
CREATE INDEX ROPS2B_SPID ON ROPS2B (SPID);
CREATE INDEX ROPS3A_ID ON ROPS3A (ID);
CREATE INDEX TREM_ID ON TREM (ID);
CREATE INDEX TREM_IDA ON TREM (AID);
CREATE INDEX TREPA1_ID ON TREPA1 (ID);
CREATE INDEX TREPA1_SPID ON TREPA1 (SPID);
CREATE INDEX TREPAPAN_ID ON TREPAPAN (ID);
CREATE INDEX TREPAPAN_SPID ON TREPAPAN (SPID);
CREATE INDEX TREPDARZ1_AC1 ON TREPDARZ1 (AC1);
CREATE INDEX TREPDARZ1_AC2 ON TREPDARZ1 (AC2);
CREATE INDEX TREPDARZ1_CLID ON TREPDARZ1 (CLID);
CREATE INDEX TREPDARZ1_DID ON TREPDARZ1 (DID);
CREATE INDEX TREPDARZ1_ID ON TREPDARZ1 (ID);
CREATE INDEX TREPDARZ1_RID ON TREPDARZ1 (RID);
CREATE INDEX TREPDARZ1_SPID ON TREPDARZ1 (SPID);
CREATE INDEX TREPDARZ2_ID ON TREPDARZ2 (ID);
CREATE INDEX TREPDARZ2_SPID ON TREPDARZ2 (SPID);
CREATE INDEX TREPDOCS1_ID ON TREPDOCS1 (ID);
CREATE INDEX TREPDOCS1_SPID ON TREPDOCS1 (SPID);
CREATE INDEX TREPDOCS2_ID ON TREPDOCS2 (ID);
CREATE INDEX TREPDOCS2_SPID ON TREPDOCS2 (SPID);
CREATE INDEX TREPDOCSS_DID ON TREPDOCSS (DID);
CREATE INDEX TREPDOCSS_ID ON TREPDOCSS (ID);
CREATE INDEX TREPDOCSS_SPID ON TREPDOCSS (SPID);
CREATE INDEX TREPMT_ID ON TREPMT (ID);
CREATE INDEX TREPMT_SPID ON TREPMT (SPID);
CREATE INDEX TREPPVNZ1_CLID ON TREPPVNZ1 (CLID);
CREATE INDEX TREPPVNZ1_DID ON TREPPVNZ1 (DID);
CREATE INDEX TREPPVNZ1_ID ON TREPPVNZ1 (ID);
CREATE INDEX TREPPVNZ1_SPID ON TREPPVNZ1 (SPID);
CREATE INDEX TREPUDOCS_ID ON TREPUDOCS (ID);
CREATE INDEX TREPUDOCS_SPID ON TREPUDOCS (SPID);
CREATE INDEX TTEMP_PVN1_IDX_DID ON TTEMP_PVN1 (DID);
CREATE INDEX TUDOCLISTS_ID ON TUDOCLISTS (ID);
CREATE INDEX TUDOCLISTSTUDOCS ON TUDOCS (LD);
CREATE INDEX TUDOCS_ID ON TUDOCS (ID);
CREATE INDEX TUPDFIELDS_ID ON TUPDFIELDS (ID);
CREATE INDEX TUPVN1_DID ON TUPVN1 (DID);
CREATE INDEX TUPVN1_ID ON TUPVN1 (ID);


/******************************************************************************/
/***                                Triggers                                ***/
/******************************************************************************/



SET TERM ^ ;



/******************************************************************************/
/***                          Triggers for tables                           ***/
/******************************************************************************/



/* Trigger: TRIG_BAL0_BI */
CREATE TRIGGER TRIG_BAL0_BI FOR BAL0
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN
      IF(NEW."ID" IS NULL) THEN NEW."ID" = GEN_ID("GEN_BAL0_ID",1);
    END
^

/* Trigger: TRIG_BALA21_BI */
CREATE TRIGGER TRIG_BALA21_BI FOR BALA21
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN
      IF(NEW."ID" IS NULL) THEN NEW."ID" = GEN_ID("GEN_BALA21_ID",1);
    END
^

/* Trigger: TRIG_BALA2_BI */
CREATE TRIGGER TRIG_BALA2_BI FOR BALA2
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN
      IF(NEW."ID" IS NULL) THEN NEW."ID" = GEN_ID("GEN_BALA2_ID",1);
    END
^

/* Trigger: TRIG_BALA3_BI */
CREATE TRIGGER TRIG_BALA3_BI FOR BALA3
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN
      IF(NEW."ID" IS NULL) THEN NEW."ID" = GEN_ID("GEN_BALA3_ID",1);
    END
^

/* Trigger: TRIG_DOCS0_BI */
CREATE TRIGGER TRIG_DOCS0_BI FOR DOCS0
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN
      IF(NEW."ID" IS NULL) THEN NEW."ID" = GEN_ID("GEN_DOCS0_ID",1);
    END
^

/* Trigger: TRIG_LOGX_BI */
CREATE TRIGGER TRIG_LOGX_BI FOR LOGX
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN
      IF(NEW."ID" IS NULL) THEN NEW."ID" = GEN_ID("GEN_LOGX_ID",1);
    END
^

/* Trigger: TRIG_LOPSD_BI */
CREATE TRIGGER TRIG_LOPSD_BI FOR LOPSD
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN
      IF(NEW."IDL" IS NULL) THEN NEW."IDL" = GEN_ID("GEN_LOPSD_IDL",1);
    END
^

/* Trigger: TRIG_LOPS_BI */
CREATE TRIGGER TRIG_LOPS_BI FOR LOPS
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN
      IF(NEW."IDL" IS NULL) THEN NEW."IDL" = GEN_ID("GEN_LOPS_IDL",1);
    END
^

/* Trigger: TRIG_LXOP_BI */
CREATE TRIGGER TRIG_LXOP_BI FOR LXOP
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN
      IF(NEW."ID" IS NULL) THEN NEW."ID" = GEN_ID("GEN_LXOP_ID",1);
    END
^

/* Trigger: TRIG_OPSD_BI */
CREATE TRIGGER TRIG_OPSD_BI FOR OPSD
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN
      IF(NEW."ID" IS NULL) THEN NEW."ID" = GEN_ID("GEN_OPSD_ID",1);
    END
^

/* Trigger: TRIG_OPS_BI */
CREATE TRIGGER TRIG_OPS_BI FOR OPS
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN
      IF(NEW."ID" IS NULL) THEN NEW."ID" = GEN_ID("GEN_OPS_ID",1);
    END
^

/* Trigger: TRIG_PARAMS_BI */
CREATE TRIGGER TRIG_PARAMS_BI FOR PARAMS
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN
      IF(NEW."ID" IS NULL) THEN NEW."ID" = GEN_ID("GEN_PARAMS_ID",1);
    END
^

/* Trigger: TRIG_PERSONTYP_BI */
CREATE TRIGGER TRIG_PERSONTYP_BI FOR PERSONTYP
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN
      IF(NEW."ID" IS NULL) THEN NEW."ID" = GEN_ID("GEN_PERSONTYP_ID",1);
    END
^

/* Trigger: TRIG_ROPS1A_BI */
CREATE TRIGGER TRIG_ROPS1A_BI FOR ROPS1A
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN
      IF(NEW."ID" IS NULL) THEN NEW."ID" = GEN_ID("GEN_ROPS1A_ID",1);
    END
^

/* Trigger: TRIG_ROPS2A_BI */
CREATE TRIGGER TRIG_ROPS2A_BI FOR ROPS2A
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN
      IF(NEW."ID" IS NULL) THEN NEW."ID" = GEN_ID("GEN_ROPS2A_ID",1);
    END
^

/* Trigger: TRIG_ROPS2B_BI */
CREATE TRIGGER TRIG_ROPS2B_BI FOR ROPS2B
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN
      IF(NEW."ID" IS NULL) THEN NEW."ID" = GEN_ID("GEN_ROPS2B_ID",1);
    END
^

/* Trigger: TRIG_ROPS3A_BI */
CREATE TRIGGER TRIG_ROPS3A_BI FOR ROPS3A
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN
      IF(NEW."ID" IS NULL) THEN NEW."ID" = GEN_ID("GEN_ROPS3A_ID",1);
    END
^

/* Trigger: TRIG_TABLE1_BI */
CREATE TRIGGER TRIG_TABLE1_BI FOR TABLE1
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN
      IF(NEW."ID" IS NULL) THEN NEW."ID" = GEN_ID("GEN_TABLE1_ID",1);
    END
^

/* Trigger: TRIG_TREM_BI */
CREATE TRIGGER TRIG_TREM_BI FOR TREM
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN
      IF(NEW."ID" IS NULL) THEN NEW."ID" = GEN_ID("GEN_TREM_ID",1);
    END
^

/* Trigger: TRIG_TREPA1_BI */
CREATE TRIGGER TRIG_TREPA1_BI FOR TREPA1
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN
      IF(NEW."ID" IS NULL) THEN NEW."ID" = GEN_ID("GEN_TREPA1_ID",1);
    END
^

/* Trigger: TRIG_TREPAPAN_BI */
CREATE TRIGGER TRIG_TREPAPAN_BI FOR TREPAPAN
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN
      IF(NEW."ID" IS NULL) THEN NEW."ID" = GEN_ID("GEN_TREPAPAN_ID",1);
    END
^

/* Trigger: TRIG_TREPDARZ1_BI */
CREATE TRIGGER TRIG_TREPDARZ1_BI FOR TREPDARZ1
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN
      IF(NEW."ID" IS NULL) THEN NEW."ID" = GEN_ID("GEN_TREPDARZ1_ID",1);
    END
^

/* Trigger: TRIG_TREPDARZ2_BI */
CREATE TRIGGER TRIG_TREPDARZ2_BI FOR TREPDARZ2
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN
      IF(NEW."ID" IS NULL) THEN NEW."ID" = GEN_ID("GEN_TREPDARZ2_ID",1);
    END
^

/* Trigger: TRIG_TREPDOCS1_BI */
CREATE TRIGGER TRIG_TREPDOCS1_BI FOR TREPDOCS1
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN
      IF(NEW."ID" IS NULL) THEN NEW."ID" = GEN_ID("GEN_TREPDOCS1_ID",1);
    END
^

/* Trigger: TRIG_TREPDOCS2_BI */
CREATE TRIGGER TRIG_TREPDOCS2_BI FOR TREPDOCS2
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN
      IF(NEW."ID" IS NULL) THEN NEW."ID" = GEN_ID("GEN_TREPDOCS2_ID",1);
    END
^

/* Trigger: TRIG_TREPDOCSS_BI */
CREATE TRIGGER TRIG_TREPDOCSS_BI FOR TREPDOCSS
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN
      IF(NEW."ID" IS NULL) THEN NEW."ID" = GEN_ID("GEN_TREPDOCSS_ID",1);
    END
^

/* Trigger: TRIG_TREPMT_BI */
CREATE TRIGGER TRIG_TREPMT_BI FOR TREPMT
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN
      IF(NEW."ID" IS NULL) THEN NEW."ID" = GEN_ID("GEN_TREPMT_ID",1);
    END
^

/* Trigger: TRIG_TREPPVNZ1_BI */
CREATE TRIGGER TRIG_TREPPVNZ1_BI FOR TREPPVNZ1
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN
      IF(NEW."ID" IS NULL) THEN NEW."ID" = GEN_ID("GEN_TREPPVNZ1_ID",1);
    END
^

/* Trigger: TRIG_TREPUDOCS_BI */
CREATE TRIGGER TRIG_TREPUDOCS_BI FOR TREPUDOCS
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN
      IF(NEW."ID" IS NULL) THEN NEW."ID" = GEN_ID("GEN_TREPUDOCS_ID",1);
    END
^

/* Trigger: TRIG_TUDOCLISTS_BI */
CREATE TRIGGER TRIG_TUDOCLISTS_BI FOR TUDOCLISTS
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN
      IF(NEW."ID" IS NULL) THEN NEW."ID" = GEN_ID("GEN_TUDOCLISTS_ID",1);
    END
^

/* Trigger: TRIG_TUDOCS_BI */
CREATE TRIGGER TRIG_TUDOCS_BI FOR TUDOCS
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN
      IF(NEW."ID" IS NULL) THEN NEW."ID" = GEN_ID("GEN_TUDOCS_ID",1);
    END
^

/* Trigger: TRIG_TUPVN1_BI */
CREATE TRIGGER TRIG_TUPVN1_BI FOR TUPVN1
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN
      IF(NEW."ID" IS NULL) THEN NEW."ID" = GEN_ID("GEN_TUPVN1_ID",1);
    END
^

/* Trigger: TTEMP_BALA21_BI0 */
CREATE TRIGGER TTEMP_BALA21_BI0 FOR TTEMP_BALA21
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
      IF(NEW."ID" IS NULL) THEN NEW."ID" = GEN_ID("GEN_TTEMP_BALA21_ID",1);
END
^

/* Trigger: TTEMP_BALAC_BI0 */
CREATE TRIGGER TTEMP_BALAC_BI0 FOR TTEMP_BALAC
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
      IF(NEW."ID" IS NULL) THEN NEW."ID" = GEN_ID("GEN_TTEMP_BALAC_ID",1);
END
^

/* Trigger: TTEMP_BALMT1_BI */
CREATE TRIGGER TTEMP_BALMT1_BI FOR TTEMP_BALMT1
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id is null) then
    new.id = gen_id(gen_ttemp_balmt1_id,1);
end
^

/* Trigger: TTEMP_BALMT2_BI */
CREATE TRIGGER TTEMP_BALMT2_BI FOR TTEMP_BALMT2
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id is null) then
    new.id = gen_id(gen_ttemp_balmt1_id,1);
end
^

/* Trigger: TTEMP_PVN1_BI */
CREATE TRIGGER TTEMP_PVN1_BI FOR TTEMP_PVN1
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id is null) then
    new.id = gen_id(gen_ttemp_pvn1_id,1);
end
^
SET TERM ; ^



/******************************************************************************/
/***                           Stored procedures                            ***/
/******************************************************************************/



SET TERM ^ ;

ALTER PROCEDURE SP_BAL0_ID
RETURNS (
    NEXTID INTEGER)
AS
begin
    nextid = GEN_ID("GEN_BAL0_ID",1);
end^


ALTER PROCEDURE SP_BAL0_IDA
RETURNS (
    NEXTID INTEGER)
AS
begin
    nextid = GEN_ID("GEN_BAL0_ID",1);
    suspend;
end^


ALTER PROCEDURE SP_BALA2_ID
RETURNS (
    NEXTID INTEGER)
AS
begin
    nextid = GEN_ID("GEN_BALA2_ID",1);
    suspend;
end^


ALTER PROCEDURE SP_BALA3_ID
RETURNS (
    NEXTID INTEGER)
AS
begin
    nextid = GEN_ID("GEN_BALA3_ID",1);
    suspend;
end^


ALTER PROCEDURE SP_CURRCHECK_01 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15),
    PCUR VARCHAR(3))
RETURNS (
    ID TYPE OF COLUMN ROPS1A.ID,
    SPID TYPE OF COLUMN ROPS1A.SPID,
    DID TYPE OF COLUMN ROPS1A.DID,
    DETE TYPE OF COLUMN ROPS1A.DETE,
    NRX TYPE OF COLUMN ROPS1A.NRX,
    DOCTYP TYPE OF COLUMN ROPS1A.DOCTYP,
    DOCTYP1 TYPE OF COLUMN ROPS1A.DOCTYP1,
    DOCTYP2 TYPE OF COLUMN ROPS1A.DOCTYP2,
    DOCST TYPE OF COLUMN ROPS1A.DOCST,
    DOCNR TYPE OF COLUMN ROPS1A.DOCNR,
    CLID TYPE OF COLUMN ROPS1A.CLID,
    CLID2 TYPE OF COLUMN ROPS1A.CLID2,
    NAME TYPE OF COLUMN ROPS1A.NAME,
    NAME2 TYPE OF COLUMN ROPS1A.NAME2,
    REGNR TYPE OF COLUMN ROPS1A.REGNR,
    REGNR2 TYPE OF COLUMN ROPS1A.REGNR2,
    B0 TYPE OF COLUMN ROPS1A.B0,
    DESCR TYPE OF COLUMN ROPS1A.DESCR,
    DESCR2 TYPE OF COLUMN ROPS1A.DESCR2,
    AC1 TYPE OF COLUMN ROPS1A.AC1,
    AC2 TYPE OF COLUMN ROPS1A.AC2,
    SAC1 TYPE OF COLUMN ROPS1A.SAC1,
    SAC2 TYPE OF COLUMN ROPS1A.SAC2,
    SUMMC TYPE OF COLUMN ROPS1A.SUMMC,
    CUR TYPE OF COLUMN ROPS1A.CUR,
    SUMM TYPE OF COLUMN ROPS1A.SUMM,
    PVN TYPE OF COLUMN ROPS1A.PVN,
    RAC TYPE OF COLUMN ROPS1A.RAC,
    SDB TYPE OF COLUMN ROPS1A.SDB,
    SCR TYPE OF COLUMN ROPS1A.SCR,
    RAC2 TYPE OF COLUMN ROPS1A.RAC2,
    RAC3 TYPE OF COLUMN ROPS1A.RAC3,
    RAC4 TYPE OF COLUMN ROPS1A.RAC4,
    RAC5 TYPE OF COLUMN ROPS1A.RAC5,
    QV TYPE OF COLUMN ROPS1A.QV,
    ZNR TYPE OF COLUMN ROPS1A.ZNR)
AS
begin
    FOR SELECT DISTINCT
        gen_id(GEN_ROPS2A_ID, 1) as id,
        current_connection as spid,
        OPSd.id AS did, 
        OPSd.Dete AS Dete,
        OPSd.NrX AS NrX,
        OPSd.DocTyp AS DocTyp,
        DocTyp.id1 AS DocTyp1, 
        null as DocTyp2,
        OPSd.DocSt AS DocSt,
        OPSd.DocNr AS DocNr,
        OPSd.ClId AS Clid,
        OPSd.ClId2 AS Clid2,
        Persons.Name AS Name, 
        Persons2.Name AS Name2, 
        Persons.RegNr AS RegNr,
        Persons2.RegNr AS RegNr2,
        0 AS b0, 
        OPSd.Descr AS Descr,
        null AS Descr2,
        null AS AC1,
        null AS AC2,
        null AS SAC1,
        null AS SAC2,
        0 AS SummC,
        null AS Cur,
        OPSd.Summ AS Summ,
        OPSd.PVN AS PVN,
        null AS Rac,
        0 AS Sdb,
        0 AS SCr,
        null AS Rac2,
        null AS Rac3,
        null AS Rac4,
        null AS Rac5,
        0 AS qv,
        OPSd.ZNR AS ZNR

    FROM OPSd
        JOIN OPS ON OPSd.id = OPS.DocId
        LEFT JOIN DocTyp ON OPSd.DocTyp = DocTyp.id
        LEFT JOIN Persons ON OPSd.ClId = Persons.ClId
        LEFT JOIN Persons AS Persons2 ON OPSd.ClId2 = Persons2.ClId        
        LEFT JOIN Currency ON Currency.id = OPS.cur AND Currency.dete = OPSd.Dete
    WHERE 
        OPSd.Dete BETWEEN :sdt AND :edt AND
        OPS.Cur <> 'EUR' AND
        (OPS.AC11 LIKE :pac OR OPS.AC21 LIKE :pac) AND
        (
            Currency.id IS NULL OR
            ROUND(OPS.SummC*Currency.rate,2) <> OPS.Summ
        )
    ORDER BY Dete, DocId


    into
        :id, :spid, :did, :DETE, :nrx,
        :doctyp, :doctyp1, :doctyp2, :docst, :docnr,
        :clid, :clid2, :name, :name2, :regnr, :regnr2,
        :b0, :descr, :descr2, :ac1, :ac2, :sac1,:sac2,
        :summc, :cur, :summ, :pvn, :rac, :sdb, :scr,
        :rac2, :rac3, :rac4, :rac5, :qv, :znr
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_DIFF_01 (
    PDOCID INTEGER)
RETURNS (
    IDL TYPE OF COLUMN LOPSD.IDL,
    ID TYPE OF COLUMN LOPSD.ID,
    ZDT TYPE OF COLUMN LOPSD.ZDT,
    DTLD TYPE OF COLUMN LOPSD.DTLD,
    ODT TYPE OF COLUMN LOPSD.ODT,
    USL TYPE OF COLUMN LOPSD.USL,
    DETE TYPE OF COLUMN LOPSD.DETE,
    NRX TYPE OF COLUMN LOPSD.NRX,
    ZNR TYPE OF COLUMN LOPSD.ZNR,
    DOCTYP TYPE OF COLUMN LOPSD.DOCTYP,
    DOCST TYPE OF COLUMN LOPSD.DOCST,
    DOCNR TYPE OF COLUMN LOPSD.DOCNR,
    CLID TYPE OF COLUMN LOPSD.CLID,
    CLID2 TYPE OF COLUMN LOPSD.CLID2,
    DESCR TYPE OF COLUMN LOPSD.DESCR,
    SUMM TYPE OF COLUMN LOPSD.SUMM,
    PVN TYPE OF COLUMN LOPSD.PVN,
    ZU TYPE OF COLUMN LOPSD.ZU,
    TPL INTEGER)
AS
begin
  for select *
  from
  (
    select
        idl, id, zdt, dtld, odt, usl, dete, nrx, znr,
        doctyp, docst, docnr, clid, clid2, descr,
        summ, pvn, zu, 1 as tpl
    from lopsd
    where id = :pdocid

    union all

    select
        -9999999 as idl, id, null as zdt, null as dtld,
        zdt as odt, null as usl, dete, nrx, znr,
        doctyp, docst, docnr, clid, clid2, descr,
        summ, pvn, zu, 2 as tpl
    from opsd
    where id = :pdocid

  )
  into
    :idl, :id, :zdt, :dtld, :odt, :usl, :dete, :nrx, :znr,
    :doctyp, :docst, :docnr, :clid, :clid2, :descr,
    :summ, :pvn, :zu, :tpl
  do
    suspend;
end^


ALTER PROCEDURE SP_DIFF_02 (
    PDOCID INTEGER)
RETURNS (
    IDL TYPE OF COLUMN LOPS.IDL,
    DOCID TYPE OF COLUMN LOPS.DOCID,
    ID TYPE OF COLUMN LOPS.ID,
    DTL TYPE OF COLUMN LOPS.DTL,
    DTLD TYPE OF COLUMN LOPS.DTLD,
    ODT TYPE OF COLUMN LOPS.ODT,
    USL TYPE OF COLUMN LOPS.USL,
    AC11 TYPE OF COLUMN LOPS.AC11,
    AC12 TYPE OF COLUMN LOPS.AC12,
    AC13 TYPE OF COLUMN LOPS.AC13,
    AC14 TYPE OF COLUMN LOPS.AC14,
    AC15 TYPE OF COLUMN LOPS.AC15,
    AC21 TYPE OF COLUMN LOPS.AC21,
    AC22 TYPE OF COLUMN LOPS.AC22,
    AC23 TYPE OF COLUMN LOPS.AC23,
    AC24 TYPE OF COLUMN LOPS.AC24,
    AC25 TYPE OF COLUMN LOPS.AC25,
    SUMMC TYPE OF COLUMN LOPS.SUMMC,
    CUR TYPE OF COLUMN LOPS.CUR,
    SUMM TYPE OF COLUMN LOPS.SUMM,
    QV TYPE OF COLUMN LOPS.QV,
    TPL INTEGER)
AS
begin
  for select *
  from
  (
    select
        idl, docid, id, dtl, dtld, odt, usl,
        ac11, ac12, ac13, ac14, ac15,
        ac21, ac22, ac23, ac24, ac25,
        summc, cur, summ, qv, 1 as tpl
    from lops
    where docid = :pdocid

    union all

    select
        -9999999 + id as idl, docid, id, null as dtl,
        null as dtld, zdt as odt, null as usl,
        ac11, ac12, ac13, ac14, ac15,
        ac21, ac22, ac23, ac24, ac25,
        summc, cur, summ, qv, 2 as tpl
    from ops
    where docid = :pdocid

  )
  into
    :idl, :docid, :id, :dtl, :dtld, :odt, :usl,
    :ac11, :ac12, :ac13, :ac14, :ac15,
    :ac21, :ac22, :ac23, :ac24, :ac25,
    :summc, :cur, :summ, :qv, :tpl
  do
    suspend;
end^


ALTER PROCEDURE SP_DIFF_11 (
    PDATE1 DATE,
    PDATE2 DATE,
    PDATE3 DATE)
RETURNS (
    IDL1 TYPE OF COLUMN LOPSD.IDL,
    IDL2 TYPE OF COLUMN LOPS.IDL,
    DOCID TYPE OF COLUMN LOPSD.ID,
    ROWID TYPE OF COLUMN LOPS.ID)
AS
begin
    for select distinct
        idl1, idl2, docid, rowid
    from
    (
        select
            T3.idl as idl1,
            T4.idl as idl2,
            T3.id as docid,
            T4.id as rowid
        from
        (
            select T1.idl, T1.id
            from lopsd as T1
            where
                T1.dete between :pdate1 and :pdate2 and
                T1.odt < :pdate3 and
                not exists (
                    select idl
                    from lopsd as T2
                    where
                        T2.id = T1.id and
                        T2.odt < :pdate3 and
                        (T2.odt > T1.odt or
                        T2.odt = T1.odt and
                        T2.idl > T1.idl)
                )
        ) as T3
        join lops as T4
        on T3.id = T4.docid and
            T4.odt < :pdate3 and
            not exists (
                select idl
                from lops as T5
                where
                    T5.id = T4.id and
                    T5.odt < :pdate3 and
                    (T5.odt > T4.odt or
                    T5.odt = T4.odt and
                    T5.idl > T4.idl)
                    
            )

        union all

        select
            T4.idl as idl1,
            null as idl2,
            T4.id as docid,
            T5.id as rowid
        from
        (
            select T1.idl, T1.id
            from lopsd as T1
            where
                T1.dete between :pdate1 and :pdate2 and
                T1.odt < :pdate3 and
                not exists (
                    select idl
                    from lopsd as T2
                    where
                        T2.id = T1.id and
                        T2.odt < :pdate3 and
                        (T2.odt > T1.odt or
                        T2.odt = T1.odt and
                        T2.idl > T1.idl)
                )
                and not exists (
                    select idl
                    from lops as T3
                    where T3.docid = T1.id
                )
        ) as T4
        join ops as T5
        on T5.id = T4.id and
            T5.zdt < :pdate3
    )
    into
        :idl1, :idl2, :docid, :rowid
    do
    suspend;
end^


ALTER PROCEDURE SP_DIFF_12 (
    PDATE1 DATE,
    PDATE2 DATE,
    PDATE3 DATE,
    PCLID VARCHAR(15),
    PAC1 VARCHAR(8),
    PAC2 VARCHAR(8),
    PAC3 VARCHAR(5),
    PAC4 VARCHAR(8),
    PAC5 VARCHAR(5))
RETURNS (
    TP INTEGER,
    DOCID TYPE OF COLUMN OPS.DOCID,
    ROWID TYPE OF COLUMN OPS.ID,
    DOCDTL TIMESTAMP,
    DOCDTLD TIMESTAMP,
    DOCODT TIMESTAMP,
    ROWDTL TIMESTAMP,
    ROWDTLD TIMESTAMP,
    ROWODT TIMESTAMP,
    DETE TYPE OF COLUMN OPSD.DETE,
    ZNR TYPE OF COLUMN OPSD.ZNR,
    NRX TYPE OF COLUMN OPSD.NRX,
    DOCTYP TYPE OF COLUMN OPSD.DOCTYP,
    DOCST TYPE OF COLUMN OPSD.DOCST,
    DOCNR TYPE OF COLUMN OPSD.DOCNR,
    DOCTYP2 TYPE OF COLUMN DOCTYP.ID1,
    CLID TYPE OF COLUMN OPSD.CLID,
    CLID2 TYPE OF COLUMN OPSD.CLID2,
    DESCR TYPE OF COLUMN OPSD.DESCR,
    DOCSUMM TYPE OF COLUMN OPSD.SUMM,
    DOCPVN TYPE OF COLUMN OPSD.PVN,
    AC11 TYPE OF COLUMN OPS.AC11,
    AC12 TYPE OF COLUMN OPS.AC12,
    AC13 TYPE OF COLUMN OPS.AC13,
    AC14 TYPE OF COLUMN OPS.AC14,
    AC15 TYPE OF COLUMN OPS.AC15,
    AC21 TYPE OF COLUMN OPS.AC21,
    AC22 TYPE OF COLUMN OPS.AC22,
    AC23 TYPE OF COLUMN OPS.AC23,
    AC24 TYPE OF COLUMN OPS.AC24,
    AC25 TYPE OF COLUMN OPS.AC25,
    SUMMC TYPE OF COLUMN OPS.SUMMC,
    CUR TYPE OF COLUMN OPS.CUR,
    SUMM TYPE OF COLUMN OPS.SUMM,
    QV TYPE OF COLUMN OPS.QV,
    DESCR2 TYPE OF COLUMN OPS.DESCR)
AS
begin

    insert into
    ttemp_diff2(idl1, idl2, docid, rowid)
    select distinct idl1, idl2, docid, rowid
    from sp_diff_11(:pdate1, :pdate2, :pdate3) as T1
    where exists (
        select idl
        from lopsd
        where
            T1.docid = lopsd.id and
            lopsd.dtld > :pdate3

        union all

        select idl
        from lops
        where
            T1.rowid = lops.id and
            lops.dtld > :pdate3

        union all

        select id
        from opsd
        where
            T1.docid = opsd.id and
            opsd.zdt > :pdate3

        union all

        select id
        from ops
        where
            T1.rowid = ops.id and
            ops.zdt > :pdate3
    );

    for select distinct *
    from
    (
        select
            1 as tp,
            lops.docid, lops.id as rowid,
            lopsd.zdt as docdtl, lopsd.dtld as docdtld, lopsd.odt as docodt,
            lops.dtl as rowdtl, lops.dtld as rowdtld, lops.odt as rowodt,
            lopsd.dete, lopsd.znr, lopsd.nrx,
            lopsd.doctyp, lopsd.docst, lopsd.docnr,
            lopsd.clid, lopsd.clid2, lopsd.descr, 
            lopsd.summ as docsumm, lopsd.pvn as docpvn, 
            lops.ac11,  lops.ac12, lops.ac13, lops.ac14, lops.ac15,
            lops.ac21,  lops.ac22, lops.ac23, lops.ac24, lops.ac25,
            lops.summc, lops.cur, lops.summ, lops.qv, null as descr2
    
        from ttemp_diff2 as T1
        join lopsd on T1.idl1 = lopsd.idl
        join lops on T1.idl2 = lops.idl
        where
            (:pclid is null or :pclid = lopsd.clid) and
            (:pac1 is null or :pac1 = lops.ac11 or :pac1 = lops.ac21) and
            (:pac2 is null or :pac2 = lops.ac12 or :pac2 = lops.ac22) and
            (:pac3 is null or :pac3 = lops.ac13 or :pac3 = lops.ac23) and
            (:pac4 is null or :pac4 = lops.ac14 or :pac4 = lops.ac24) and
            (:pac5 is null or :pac5 = lops.ac15 or :pac5 = lops.ac25)

    union all

        select
            1 as tp,
            lops.docid, lops.id as rowid,
            lopsd.zdt as docdtl, lopsd.dtld as docdtld, lopsd.odt as docodt,
            lops.dtl as rowdtl, lops.dtld as rowdtld, lops.odt as rowodt,
            lopsd.dete, lopsd.znr, lopsd.nrx,
            lopsd.doctyp, lopsd.docst, lopsd.docnr,
            lopsd.clid, lopsd.clid2, lopsd.descr, 
            lopsd.summ as docsumm, lopsd.pvn as docpvn, 
            lops.ac11,  lops.ac12, lops.ac13, lops.ac14, lops.ac15,
            lops.ac21,  lops.ac22, lops.ac23, lops.ac24, lops.ac25,
            lops.summc, lops.cur, lops.summ, lops.qv, null as descr2

        from ttemp_diff2 as T1
        join lopsd on T1.idl1 = lopsd.idl
        join lops on T1.idl2 = lops.idl
        join ops on T1.rowid = ops.id
        join opsd on ops.docid = opsd.id
        where
            (not (
                (:pclid is null or :pclid = lopsd.clid) and
                (:pac1 is null or :pac1 = lops.ac11 or :pac1 = lops.ac21) and
                (:pac2 is null or :pac2 = lops.ac12 or :pac2 = lops.ac22) and
                (:pac3 is null or :pac3 = lops.ac13 or :pac3 = lops.ac23) and
                (:pac4 is null or :pac4 = lops.ac14 or :pac4 = lops.ac24) and
                (:pac5 is null or :pac5 = lops.ac15 or :pac5 = lops.ac25)
            )) and (
                (:pclid is null or :pclid = opsd.clid) and
                (:pac1 is null or :pac1 = ops.ac11 or :pac1 = ops.ac21) and
                (:pac2 is null or :pac2 = ops.ac12 or :pac2 = ops.ac22) and
                (:pac3 is null or :pac3 = ops.ac13 or :pac3 = ops.ac23) and
                (:pac4 is null or :pac4 = ops.ac14 or :pac4 = ops.ac24) and
                (:pac5 is null or :pac5 = ops.ac15 or :pac5 = ops.ac25)
            )

    union all

        select
            2 as tp,
            ops.docid, ops.id as rowid,
            null as docdtl, null as docdtld, opsd.zdt as docodt,
            null as rowdtl, null as rowdtld, ops.zdt as rowodt,
            opsd.dete, opsd.znr, opsd.nrx,
            opsd.doctyp, opsd.docst, opsd.docnr,
            opsd.clid, opsd.clid2, opsd.descr,
            opsd.summ as docsumm, opsd.pvn as docpvn,
            ops.ac11,  ops.ac12, ops.ac13, ops.ac14, ops.ac15,
            ops.ac21,  ops.ac22, ops.ac23, ops.ac24, ops.ac25,
            ops.summc, ops.cur, ops.summ, ops.qv, ops.descr as descr2
    
        from ttemp_diff2 as T1
        join lopsd on T1.idl1 = lopsd.idl
        join lops on T1.idl2 = lops.idl
        join ops on T1.rowid = ops.id
        join opsd on ops.docid = opsd.id
        where
            (
                (:pclid is null or :pclid = lopsd.clid) and
                (:pac1 is null or :pac1 = lops.ac11 or :pac1 = lops.ac21) and
                (:pac2 is null or :pac2 = lops.ac12 or :pac2 = lops.ac22) and
                (:pac3 is null or :pac3 = lops.ac13 or :pac3 = lops.ac23) and
                (:pac4 is null or :pac4 = lops.ac14 or :pac4 = lops.ac24) and
                (:pac5 is null or :pac5 = lops.ac15 or :pac5 = lops.ac25)
            ) or (
                (:pclid is null or :pclid = opsd.clid) and
                (:pac1 is null or :pac1 = ops.ac11 or :pac1 = ops.ac21) and
                (:pac2 is null or :pac2 = ops.ac12 or :pac2 = ops.ac22) and
                (:pac3 is null or :pac3 = ops.ac13 or :pac3 = ops.ac23) and
                (:pac4 is null or :pac4 = ops.ac14 or :pac4 = ops.ac24) and
                (:pac5 is null or :pac5 = ops.ac15 or :pac5 = ops.ac25)
            )     

    union all

        select
            3 as tp,
            lops.docid, lops.id as rowid,
            lopsd.zdt as docdtl, lopsd.dtld as docdtld, lopsd.odt as docodt,
            lops.dtl as rowdtl, lops.dtld as rowdtld, lops.odt as rowodt,
            lopsd.dete, lopsd.znr, lopsd.nrx,
            lopsd.doctyp, lopsd.docst, lopsd.docnr,
            lopsd.clid, lopsd.clid2, lopsd.descr, 
            lopsd.summ as docsumm, lopsd.pvn as docpvn, 
            lops.ac11,  lops.ac12, lops.ac13, lops.ac14, lops.ac15,
            lops.ac21,  lops.ac22, lops.ac23, lops.ac24, lops.ac25,
            lops.summc, lops.cur, lops.summ, lops.qv, null as descr2

        from ttemp_diff2 as T1
        join lopsd on T1.idl1 = lopsd.idl
        join lops on T1.idl2 = lops.idl
        join lops as lops2 on T1.rowid = lops2.id and lops2.dtld > :pdate3
        join lopsd as lopsd2 on lopsd2.id = lops2.docid and
            not exists(
                select idl
                from lopsd as lopsd3
                where lopsd2.id = lopsd3.id and lopsd3.zdt > lopsd2.dtld
            )
        where
            (
                (:pclid is null or :pclid = lopsd.clid) and
                (:pac1 is null or :pac1 = lops.ac11 or :pac1 = lops.ac21) and
                (:pac2 is null or :pac2 = lops.ac12 or :pac2 = lops.ac22) and
                (:pac3 is null or :pac3 = lops.ac13 or :pac3 = lops.ac23) and
                (:pac4 is null or :pac4 = lops.ac14 or :pac4 = lops.ac24) and
                (:pac5 is null or :pac5 = lops.ac15 or :pac5 = lops.ac25)
            ) or (
                (:pclid is null or :pclid = lopsd2.clid) and
                (:pac1 is null or :pac1 = lops2.ac11 or :pac1 = lops2.ac21) and
                (:pac2 is null or :pac2 = lops2.ac12 or :pac2 = lops2.ac22) and
                (:pac3 is null or :pac3 = lops2.ac13 or :pac3 = lops2.ac23) and
                (:pac4 is null or :pac4 = lops2.ac14 or :pac4 = lops2.ac24) and
                (:pac5 is null or :pac5 = lops2.ac15 or :pac5 = lops2.ac25)
            )

    union all

        select
            4 as tp,
            ops.docid, ops.id as rowid,
            null as docdtl, null as docdtld, opsd.zdt as docodt,
            null as rowdtl, null as rowdtld, ops.zdt as rowodt,
            opsd.dete, opsd.znr, opsd.nrx,
            opsd.doctyp, opsd.docst, opsd.docnr,
            opsd.clid, opsd.clid2, opsd.descr,
            opsd.summ as docsumm, opsd.pvn as docpvn,
            ops.ac11,  ops.ac12, ops.ac13, ops.ac14, ops.ac15,
            ops.ac21,  ops.ac22, ops.ac23, ops.ac24, ops.ac25,
            ops.summc, ops.cur, ops.summ, ops.qv, ops.descr as descr2
    
        from
            opsd join ops
            on
                ops.docid = opsd.id and
                opsd.dete between :pdate1 and :pdate2 and
                opsd.zdt > :pdate3
            left join ttemp_diff2 as T1
            on ops.id = T1.rowid
        where
            T1.idl1 is null and
            (:pclid is null or :pclid = opsd.clid) and
            (:pac1 is null or :pac1 = ops.ac11 or :pac1 = ops.ac21) and
            (:pac2 is null or :pac2 = ops.ac12 or :pac2 = ops.ac22) and
            (:pac3 is null or :pac3 = ops.ac13 or :pac3 = ops.ac23) and
            (:pac4 is null or :pac4 = ops.ac14 or :pac4 = ops.ac24) and
            (:pac5 is null or :pac5 = ops.ac15 or :pac5 = ops.ac25)

    union all

        select
            5 as tp,
            ops.docid, ops.id as rowid,
            lopsd.zdt as docdtl, lopsd.dtld as docdtld, lopsd.odt as docodt,
            null as rowdtl, null as rowdtld, ops.zdt as rowodt,
            lopsd.dete, lopsd.znr, lopsd.nrx,
            lopsd.doctyp, lopsd.docst, lopsd.docnr,
            lopsd.clid, lopsd.clid2, lopsd.descr, 
            lopsd.summ as docsumm, lopsd.pvn as docpvn, 
            ops.ac11,  ops.ac12, ops.ac13, ops.ac14, ops.ac15,
            ops.ac21,  ops.ac22, ops.ac23, ops.ac24, ops.ac25,
            ops.summc, ops.cur, ops.summ, ops.qv, ops.descr as descr2

        from ttemp_diff2 as T1
        join lopsd on T1.idl1 = lopsd.idl and T1.idl2 = null
        join ops on T1.rowid = ops.id
        join opsd on ops.docid = opsd.id
        where
            (
                (:pclid is null or :pclid = lopsd.clid)
            ) or (
                (:pclid is null or :pclid = opsd.clid) and
                (:pac1 is null or :pac1 = ops.ac11 or :pac1 = ops.ac21) and
                (:pac2 is null or :pac2 = ops.ac12 or :pac2 = ops.ac22) and
                (:pac3 is null or :pac3 = ops.ac13 or :pac3 = ops.ac23) and
                (:pac4 is null or :pac4 = ops.ac14 or :pac4 = ops.ac24) and
                (:pac5 is null or :pac5 = ops.ac15 or :pac5 = ops.ac25)
            )


    )
    order by docid, rowid, tp, iif(rowodt > docodt, docodt, rowodt)
    into
        :tp, :docid, :rowid,
        :docdtl, :docdtld, :docodt,
        :rowdtl, :rowdtld, :rowodt,
        :dete, :znr, :nrx, 
        :doctyp, :docst, :docnr,
        :clid, :clid2, :descr, 
        :docsumm, :docpvn,
        :ac11, :ac12, :ac13, :ac14, :ac15, 
        :ac21, :ac22, :ac23, :ac24, :ac25,
        :summc, :cur, :summ, :qv, :descr2

    do
    suspend;
end^


ALTER PROCEDURE SP_DOCS0_ID
RETURNS (
    NEXTID INTEGER)
AS
begin
    nextid = GEN_ID("GEN_DOCS0_ID",1);
    suspend;
end^


ALTER PROCEDURE SP_FIXLOPSODT
AS
declare variable vidl integer;
declare variable viddoc integer;
declare variable vidrow integer;
declare variable vpid integer;
declare variable vdt timestamp;
declare variable vdt2 timestamp;
declare variable vpdt timestamp;
declare variable vodt timestamp;
begin
    vpid = null;
    vpdt = null;

    for select idl, id, docid, adt, odt
    from
    (
        select idl, id, docid, iif(dtld is null, dtl, dtld) as adt, odt
        from lops
    ) as T1
    order by id, adt
    into :vidl, :vidrow, :viddoc, :vdt, :vodt
    do
    begin
        if (vpid is null or vpid <> vidrow) then begin

            vpid = vidrow;
            vpdt = vdt;

            if (vodt is null) then begin

                vdt2 = null;

                select min(iif(dtld is null, zdt, dtld))
                from lopsd
                where id = :viddoc
                into :vdt2;

                if (vdt2 is not null) then begin

                    select first 1 dete
                    from lopsd
                    where id = :viddoc and :vdt2 = (iif(dtld is null, zdt, dtld))
                    order by idl
                    into :vdt2;

               end else begin

                    select dete
                    from opsd
                    where opsd.id = :viddoc
                    into :vdt2;

               end

               update lops set odt = :vdt2 where idl = :vidl;

            end
        end else begin

            if (:vpdt is not null) then begin
               update lops set odt = :vpdt where idl = :vidl;
            end

            vpdt = vdt;

        end
    end

    vpid = null;
    vpdt = null;

    for select idl, id, adt, dete, odt
    from
    (
        select idl, id, iif(dtld is null, zdt, dtld) as adt, dete, odt
        from lopsd
    ) as T1
    order by id, adt
    into :vidl, :viddoc, :vdt, :vdt2, :vodt
    do
    begin
        if (vpid is null or vpid <> viddoc) then begin

            vpid = viddoc;
            vpdt = vdt;

            if (vodt is null) then begin

               vdt = vdt2;
               update lopsd set odt = :vdt2 where idl = :vidl;

            end

        end else begin

            if (:vpdt is not null) then begin
               update lopsd set odt = :vpdt where idl = :vidl;
            end

            vpdt = vdt;

        end
    end


end^


ALTER PROCEDURE SP_FIXOPSDATES
AS
declare variable vid integer;
declare variable vzdt timestamp;
begin
    for select ops.id, opsd.zdt
    from ops join opsd
    on ops.docid = opsd.id and ops.zdt is null
    into :vid, :vzdt
    do
    begin
        update ops
        set ops.zdt = :vzdt
        where ops.id = :vid and ops.zdt is null;
    end
end^


ALTER PROCEDURE SP_LINKEDDOCS_1 (
    PSD DATE,
    PED DATE,
    PCLID VARCHAR(15),
    PDOCNR VARCHAR(15))
RETURNS (
    ID INTEGER,
    DETE DATE,
    CLID VARCHAR(15),
    DOCTYP VARCHAR(10),
    DOCST VARCHAR(6),
    DOCNR VARCHAR(15),
    DESCR VARCHAR(80),
    SUMM NUMERIC(15,4),
    PVN NUMERIC(15,4))
AS
declare variable k integer;
begin
    k = GEN_ID("GEN_OPSD_ID",0) + 1;

    FOR SELECT
        ID,
        DETE,
        clid,
        (DocTyp),
        DocSt,
        DocNr,
        Descr,
        Summ,
        PVN
    FROM
    (
        SELECT
            NULL AS ID,
            DETE,
            DOCS0.clid,
            DOCS0.DocTyp,
            DOCS0.DocSt,
            DOCS0.DocNr,
            DOCS0.Descr,
            CASE WHEN DOCS0.ac STARTING WITH '2'
                THEN summ
                ELSE -summ
            END AS Summ,
            CASE WHEN DOCS0.ac STARTING WITH '2'
                THEN pvn
                ELSE -pvn
            END AS PVN
        FROM DOCS0
        WHERE
            DOCS0.ClId = :PCLID AND
            (:PDOCNR is null OR DOCS0.DocNr = :PDOCNR)

        UNION ALL
    
        SELECT
            opsd.id,
            opsd.DETE,
            opsd.clid,
            opsd.DocTyp,
            opsd.DocSt,
            opsd.DocNr,
            opsd.Descr,
            CASE WHEN AP1 = 1 OR AP2 = 1
                THEN -OPSd.Summ
                ELSE OPSd.Summ
            END AS Summ,
            CASE WHEN AP1 = 1 OR AP2 = 1
                THEN -OPSd.PVN
                ELSE OPSd.PVN
            END AS PVN
        FROM
        (
            SELECT 
                OPSd.id, 
                MAX(CASE WHEN AcP21_1.AC IS NULL THEN 0 ELSE 1 END) AS AP1,
                MAX(CASE WHEN AcP21_2.AC IS NULL THEN 0 ELSE 1 END) AS AP2
            FROM
                OPS INNER JOIN OPSd ON OPSd.id = OPS.DocId
                LEFT JOIN AcP21 AS AcP21_1 ON OPS.AC11 = AcP21_1.AC AND AcP21_1.id1 IN ('KA','BA','CN')
                LEFT JOIN AcP21 AS AcP21_2 ON OPS.AC21 = AcP21_2.AC AND AcP21_2.id1 IN ('KA','BA','CN')
            WHERE
                OPSd.DETE BETWEEN :PSD AND :PED AND
                opsd.ClId = :PCLID AND
                (:PDOCNR is null OR opsd.DocNr = :PDOCNR)
            GROUP BY OPSd.id
        ) AS T1 
        INNER JOIN OPSd ON T1.id = OPSd.id

    )
    order by DETE

    INTO :ID, :DETE, :clid, :doctyp, :docst, :docnr, :descr, :summ, :pvn
    do
    begin
        if (ID is null) then
        begin
            ID = k;
            k = k + 1;
        end
        suspend;
    end
end^


ALTER PROCEDURE SP_LINKEDDOCS_2 (
    PSD DATE,
    PED DATE,
    PCLID VARCHAR(15),
    PDOCNR VARCHAR(15))
RETURNS (
    ID TYPE OF COLUMN OPS.ID,
    DOCID TYPE OF COLUMN OPS.DOCID,
    DESCR TYPE OF COLUMN OPS.DESCR,
    AC11 TYPE OF COLUMN OPS.AC11,
    AC12 TYPE OF COLUMN OPS.AC12,
    AC13 TYPE OF COLUMN OPS.AC13,
    AC14 TYPE OF COLUMN OPS.AC14,
    AC15 TYPE OF COLUMN OPS.AC15,
    AC21 TYPE OF COLUMN OPS.AC21,
    AC22 TYPE OF COLUMN OPS.AC22,
    AC23 TYPE OF COLUMN OPS.AC23,
    AC24 TYPE OF COLUMN OPS.AC24,
    AC25 TYPE OF COLUMN OPS.AC25,
    SUMMC TYPE OF COLUMN OPS.SUMMC,
    CUR TYPE OF COLUMN OPS.CUR,
    SUMM TYPE OF COLUMN OPS.SUMM,
    QV TYPE OF COLUMN OPS.QV,
    NL TYPE OF COLUMN OPS.NL,
    ZDT TYPE OF COLUMN OPS.ZDT)
AS
begin
  for select ops.id,
             ops.docid,
             ops.descr,
             ops.ac11,
             ops.ac12,
             ops.ac13,
             ops.ac14,
             ops.ac15,
             ops.ac21,
             ops.ac22,
             ops.ac23,
             ops.ac24,
             ops.ac25,
             ops.summc,
             ops.cur,
             ops.summ,
             ops.qv,
             ops.nl,
             ops.zdt

      FROM OPSd INNER JOIN OPS ON OPSd.id = OPS.DocId
      WHERE
        opsd.DETE BETWEEN :PSD AND :PED AND
        ClId = :PCLID AND
        (:PDOCNR is null OR opsd.DocNr = :PDOCNR)
      ORDER BY OPSd.DETE, OPS.id
      into :id,
           :docid,
           :descr,
           :ac11,
           :ac12,
           :ac13,
           :ac14,
           :ac15,
           :ac21,
           :ac22,
           :ac23,
           :ac24,
           :ac25,
           :summc,
           :cur,
           :summ,
           :qv,
           :nl,
           :zdt
  do
  begin
    suspend;
  end
end^


ALTER PROCEDURE SP_OPS_DELETE (
    ORIGINAL_ID INTEGER,
    ORIGINAL_DOCID INTEGER,
    ISNULL_DESCR INTEGER,
    ORIGINAL_DESCR VARCHAR(50),
    ORIGINAL_AC11 VARCHAR(8),
    ISNULL_AC12 INTEGER,
    ORIGINAL_AC12 VARCHAR(8),
    ISNULL_AC13 INTEGER,
    ORIGINAL_AC13 VARCHAR(5),
    ISNULL_AC14 INTEGER,
    ORIGINAL_AC14 VARCHAR(8),
    ISNULL_AC15 INTEGER,
    ORIGINAL_AC15 VARCHAR(5),
    ORIGINAL_AC21 VARCHAR(8),
    ISNULL_AC22 INTEGER,
    ORIGINAL_AC22 VARCHAR(8),
    ISNULL_AC23 INTEGER,
    ORIGINAL_AC23 VARCHAR(5),
    ISNULL_AC24 INTEGER,
    ORIGINAL_AC24 VARCHAR(8),
    ISNULL_AC25 INTEGER,
    ORIGINAL_AC25 VARCHAR(5),
    ORIGINAL_SUMMC NUMERIC(15,4),
    ORIGINAL_CUR VARCHAR(3),
    ORIGINAL_SUMM NUMERIC(15,4),
    ISNULL_QV INTEGER,
    ORIGINAL_QV FLOAT,
    ISNULL_ZDT INTEGER,
    ORIGINAL_ZDT TIMESTAMP)
AS
declare variable VUSER varchar(50);
    declare variable O_ZDT timestamp;
begin

    DELETE FROM OPS
    WHERE (
        (id = :Original_id) AND
        (DocId = :Original_DocId) AND
        ((:IsNull_Descr = 1 AND Descr IS NULL) OR (Descr = :Original_Descr)) AND
        (AC11 = :Original_AC11) AND
        ((:IsNull_AC12 = 1 AND AC12 IS NULL) OR (AC12 = :Original_AC12)) AND
        ((:IsNull_AC13 = 1 AND AC13 IS NULL) OR (AC13 = :Original_AC13)) AND
        ((:IsNull_AC14 = 1 AND AC14 IS NULL) OR (AC14 = :Original_AC14)) AND
        ((:IsNull_AC15 = 1 AND AC15 IS NULL) OR (AC15 = :Original_AC15)) AND
        (AC21 = :Original_AC21) AND
        ((:IsNull_AC22 = 1 AND AC22 IS NULL) OR (AC22 = :Original_AC22)) AND
        ((:IsNull_AC23 = 1 AND AC23 IS NULL) OR (AC23 = :Original_AC23)) AND
        ((:IsNull_AC24 = 1 AND AC24 IS NULL) OR (AC24 = :Original_AC24)) AND
        ((:IsNull_AC25 = 1 AND AC25 IS NULL) OR (AC25 = :Original_AC25)) AND
        (SummC = :Original_SummC) AND
        (Cur = :Original_Cur) AND
        (Summ = :Original_Summ) AND
        ((:IsNull_QV = 1 AND QV IS NULL) OR (QV = :Original_QV))
    );

    O_ZDt = :Original_ZDt;
    IF (:IsNull_ZDt = 1) THEN
    BEGIN
        O_ZDt = null;
    END

    VUSER = rdb$get_context('USER_SESSION', 'UserName');
    if(VUSER is null) then VUSER = User;

     execute procedure sp_ops_delete_log(
        :Original_id,
        :vuser,
        :Original_DocId, 
        :Original_AC11, 
        :Original_AC12, 
        :Original_AC13, 
        :Original_AC14, 
        :Original_AC15, 
        :Original_AC21, 
        :Original_AC22, 
        :Original_AC23, 
        :Original_AC24, 
        :Original_AC25, 
        :Original_SummC, 
        :Original_Cur, 
        :Original_Summ, 
        :Original_QV,
        :O_ZDt);

end^


ALTER PROCEDURE SP_OPS_DELETE_LOG (
    ID INTEGER,
    USR VARCHAR(15),
    ORIGINAL_DOCID INTEGER,
    ORIGINAL_AC11 VARCHAR(8),
    ORIGINAL_AC12 VARCHAR(8),
    ORIGINAL_AC13 VARCHAR(5),
    ORIGINAL_AC14 VARCHAR(8),
    ORIGINAL_AC15 VARCHAR(5),
    ORIGINAL_AC21 VARCHAR(8),
    ORIGINAL_AC22 VARCHAR(8),
    ORIGINAL_AC23 VARCHAR(5),
    ORIGINAL_AC24 VARCHAR(8),
    ORIGINAL_AC25 VARCHAR(5),
    ORIGINAL_SUMMC NUMERIC(15,4),
    ORIGINAL_CUR VARCHAR(3),
    ORIGINAL_SUMM NUMERIC(15,4),
    ORIGINAL_QV FLOAT,
    ORIGINAL_ZDT TIMESTAMP)
AS
DECLARE idl INT;
    DECLARE now timestamp;
    DECLARE xdt timestamp;
BEGIN
    now = localtimestamp(0);
    xdt = dateadd(-1 hour to now);

    IF (:Original_ZDt IS NULL OR :Original_ZDt < xdt)
    THEN BEGIN
        INSERT INTO LOPS 
            (dtl, dtld, usl, id, DocId,
            AC11, AC12, AC13, AC14, AC15,
            AC21, AC22, AC23, AC24, AC25,
            SummC, Cur, Summ, QV, ODT)
        VALUES 
        (
            :now,
            :now,
            :Usr,
            :id,
            :Original_DocId, 
            :Original_AC11,
            :Original_AC12, 
            :Original_AC13, 
            :Original_AC14, 
            :Original_AC15, 
            :Original_AC21, 
            :Original_AC22, 
            :Original_AC23, 
            :Original_AC24, 
            :Original_AC25, 
            :Original_SummC, 
            :Original_Cur, 
            :Original_Summ, 
            :Original_QV,
            :ORIGINAL_ZDT
        );
    END
    ELSE BEGIN

        UPDATE LOPS
        SET 
            dtld = :now
        WHERE LOPS.id = :id;

    END
END^


ALTER PROCEDURE SP_OPS_FILTER_AND (
    PDATE1 DATE,
    PDATE2 DATE,
    PTEXT VARCHAR(50),
    PCLID VARCHAR(15),
    PAC11 VARCHAR(8),
    PAC12 VARCHAR(8),
    PAC13 VARCHAR(5),
    PAC14 VARCHAR(8),
    PAC15 VARCHAR(5),
    PAC21 VARCHAR(8),
    PAC22 VARCHAR(8),
    PAC23 VARCHAR(5),
    PAC24 VARCHAR(8),
    PAC25 VARCHAR(5),
    PDOCGR VARCHAR(10))
RETURNS (
    ID TYPE OF COLUMN OPS.ID,
    DOCID TYPE OF COLUMN OPS.DOCID,
    DESCR TYPE OF COLUMN OPS.DESCR,
    AC11 TYPE OF COLUMN OPS.AC11,
    AC12 TYPE OF COLUMN OPS.AC12,
    AC13 TYPE OF COLUMN OPS.AC13,
    AC14 TYPE OF COLUMN OPS.AC14,
    AC15 TYPE OF COLUMN OPS.AC15,
    AC21 TYPE OF COLUMN OPS.AC21,
    AC22 TYPE OF COLUMN OPS.AC22,
    AC23 TYPE OF COLUMN OPS.AC23,
    AC24 TYPE OF COLUMN OPS.AC24,
    AC25 TYPE OF COLUMN OPS.AC25,
    SUMMC TYPE OF COLUMN OPS.SUMMC,
    CUR TYPE OF COLUMN OPS.CUR,
    SUMM TYPE OF COLUMN OPS.SUMM,
    QV TYPE OF COLUMN OPS.QV,
    NL TYPE OF COLUMN OPS.NL,
    ZDT TYPE OF COLUMN OPS.ZDT)
AS
begin
    if
    (
        pac11 is null and
        pac12 is null and
        pac13 is null and
        pac14 is null and
        pac15 is null and
        pac21 is null and
        pac22 is null and
        pac23 is null and
        pac24 is null and
        pac25 is null

    )
    then begin
        for select ops.id,
                 ops.docid,
                 ops.descr,
                 ops.ac11,
                 ops.ac12,
                 ops.ac13,
                 ops.ac14,
                 ops.ac15,
                 ops.ac21,
                 ops.ac22,
                 ops.ac23,
                 ops.ac24,
                 ops.ac25,
                 ops.summc,
                 ops.cur,
                 ops.summ,
                 ops.qv,
                 ops.nl,
                 ops.zdt
        
          FROM OPSd JOIN OPS ON OPSd.id = OPS.DocId

          WHERE
            (:pdate1 IS NULL OR opsd.DETE >= :pdate1) AND
            (:pdate2 IS NULL OR opsd.DETE <= :pdate2) AND
            (:pclid IS NULL OR ClId = :pclid OR ClId2 = :pclid) AND
            (:ptext IS NULL OR OPSd.Descr LIKE :ptext)  AND
            (
                :PDOCGR IS NULL OR EXISTS(
                    SELECT DTA.ID
                    FROM doctypb AS DTB inner join doctypa AS DTA on DTB.ida = DTA.id
                    WHERE DTB.ID = OPSD.doctyp AND DTA.ID = :PDOCGR
                )
            )

          ORDER BY OPSd.DETE, OPSd.id, OPS.id
          into :id,
               :docid,
               :descr,
               :ac11,
               :ac12,
               :ac13,
               :ac14,
               :ac15,
               :ac21,
               :ac22,
               :ac23,
               :ac24,
               :ac25,
               :summc,
               :cur,
               :summ,
               :qv,
               :nl,
               :zdt
        do
        begin
            suspend;
        end
    end

    else begin

        for select ops.id,
                 ops.docid,
                 ops.descr,
                 ops.ac11,
                 ops.ac12,
                 ops.ac13,
                 ops.ac14,
                 ops.ac15,
                 ops.ac21,
                 ops.ac22,
                 ops.ac23,
                 ops.ac24,
                 ops.ac25,
                 ops.summc,
                 ops.cur,
                 ops.summ,
                 ops.qv,
                 ops.nl,
                 ops.zdt
        
          FROM OPSd JOIN OPS ON OPSd.id = OPS.DocId

          WHERE
            (:pdate1 IS NULL OR opsd.DETE >= :pdate1) AND
            (:pdate2 IS NULL OR opsd.DETE <= :pdate2) AND
            (:pclid IS NULL OR ClId = :pclid OR ClId2 = :pclid) AND
            (:ptext IS NULL OR OPSd.Descr LIKE :ptext) AND
            (
                :PDOCGR IS NULL OR EXISTS(
                    SELECT DTA.ID
                    FROM doctypb AS DTB inner join doctypa AS DTA on DTB.ida = DTA.id
                    WHERE DTB.ID = OPSD.doctyp AND DTA.ID = :PDOCGR
                )
            ) AND
            EXISTS
            (
                
                SELECT NULL
                FROM OPS o1
                WHERE
                (
                    (o1.DocId = OPSd.id) AND
                    (
                        (
                            (:pac11 IS NULL OR o1.AC11 LIKE :pac11) AND
                            (:pac12 IS NULL OR o1.AC12 LIKE :pac12) AND
                            (:pac13 IS NULL OR o1.AC13 LIKE :pac13) AND
                            (:pac14 IS NULL OR o1.AC14 LIKE :pac14) AND
                            (:pac15 IS NULL OR o1.AC15 LIKE :pac15)
                        )
                        AND
                        (
                            (:pac21 IS NULL OR o1.AC21 LIKE :pac21) AND
                            (:pac22 IS NULL OR o1.AC22 LIKE :pac22) AND
                            (:pac23 IS NULL OR o1.AC23 LIKE :pac23) AND
                            (:pac24 IS NULL OR o1.AC24 LIKE :pac24) AND
                            (:pac25 IS NULL OR o1.AC25 LIKE :pac25)
                        )
                    )
                )
            )

          ORDER BY OPSd.DETE, OPSd.id, OPS.id
          into :id,
               :docid,
               :descr,
               :ac11,
               :ac12,
               :ac13,
               :ac14,
               :ac15,
               :ac21,
               :ac22,
               :ac23,
               :ac24,
               :ac25,
               :summc,
               :cur,
               :summ,
               :qv,
               :nl,
               :zdt
        do
        begin
            suspend;
        end

    end
end^


ALTER PROCEDURE SP_OPS_FILTER_OR (
    PDATE1 DATE,
    PDATE2 DATE,
    PTEXT VARCHAR(50),
    PCLID VARCHAR(15),
    PAC11 VARCHAR(8),
    PAC12 VARCHAR(8),
    PAC13 VARCHAR(5),
    PAC14 VARCHAR(8),
    PAC15 VARCHAR(5),
    PAC21 VARCHAR(8),
    PAC22 VARCHAR(8),
    PAC23 VARCHAR(5),
    PAC24 VARCHAR(8),
    PAC25 VARCHAR(5),
    PDOCGR VARCHAR(10))
RETURNS (
    ID TYPE OF COLUMN OPS.ID,
    DOCID TYPE OF COLUMN OPS.DOCID,
    DESCR TYPE OF COLUMN OPS.DESCR,
    AC11 TYPE OF COLUMN OPS.AC11,
    AC12 TYPE OF COLUMN OPS.AC12,
    AC13 TYPE OF COLUMN OPS.AC13,
    AC14 TYPE OF COLUMN OPS.AC14,
    AC15 TYPE OF COLUMN OPS.AC15,
    AC21 TYPE OF COLUMN OPS.AC21,
    AC22 TYPE OF COLUMN OPS.AC22,
    AC23 TYPE OF COLUMN OPS.AC23,
    AC24 TYPE OF COLUMN OPS.AC24,
    AC25 TYPE OF COLUMN OPS.AC25,
    SUMMC TYPE OF COLUMN OPS.SUMMC,
    CUR TYPE OF COLUMN OPS.CUR,
    SUMM TYPE OF COLUMN OPS.SUMM,
    QV TYPE OF COLUMN OPS.QV,
    NL TYPE OF COLUMN OPS.NL,
    ZDT TYPE OF COLUMN OPS.ZDT)
AS
begin
    if
    (
        pac11 is null and
        pac12 is null and
        pac13 is null and
        pac14 is null and
        pac15 is null and
        pac21 is null and
        pac22 is null and
        pac23 is null and
        pac24 is null and
        pac25 is null

    )
    then begin
        for select ops.id,
                 ops.docid,
                 ops.descr,
                 ops.ac11,
                 ops.ac12,
                 ops.ac13,
                 ops.ac14,
                 ops.ac15,
                 ops.ac21,
                 ops.ac22,
                 ops.ac23,
                 ops.ac24,
                 ops.ac25,
                 ops.summc,
                 ops.cur,
                 ops.summ,
                 ops.qv,
                 ops.nl,
                 ops.zdt
        
          FROM OPSd JOIN OPS ON OPSd.id = OPS.DocId

          WHERE
            (:pdate1 IS NULL OR opsd.DETE >= :pdate1) AND
            (:pdate2 IS NULL OR opsd.DETE <= :pdate2) AND
            (:pclid IS NULL OR ClId = :pclid OR ClId2 = :pclid) AND
            (:ptext IS NULL OR OPSd.Descr LIKE :ptext) AND
            (
                :PDOCGR IS NULL OR EXISTS(
                    SELECT DTA.ID
                    FROM doctypb AS DTB inner join doctypa AS DTA on DTB.ida = DTA.id
                    WHERE DTB.ID = OPSD.doctyp AND DTA.ID = :PDOCGR
                )
            )

          ORDER BY OPSd.DETE, OPSd.id, OPS.id
          into :id,
               :docid,
               :descr,
               :ac11,
               :ac12,
               :ac13,
               :ac14,
               :ac15,
               :ac21,
               :ac22,
               :ac23,
               :ac24,
               :ac25,
               :summc,
               :cur,
               :summ,
               :qv,
               :nl,
               :zdt
        do
        begin
            suspend;
        end
    end

    else begin

        for select ops.id,
                 ops.docid,
                 ops.descr,
                 ops.ac11,
                 ops.ac12,
                 ops.ac13,
                 ops.ac14,
                 ops.ac15,
                 ops.ac21,
                 ops.ac22,
                 ops.ac23,
                 ops.ac24,
                 ops.ac25,
                 ops.summc,
                 ops.cur,
                 ops.summ,
                 ops.qv,
                 ops.nl,
                 ops.zdt
        
          FROM OPSd JOIN OPS ON OPSd.id = OPS.DocId

          WHERE
            (:pdate1 IS NULL OR opsd.DETE >= :pdate1) AND
            (:pdate2 IS NULL OR opsd.DETE <= :pdate2) AND
            (:pclid IS NULL OR ClId = :pclid OR ClId2 = :pclid) AND
            (:ptext IS NULL OR OPSd.Descr LIKE :ptext) AND
            (
                :PDOCGR IS NULL OR EXISTS(
                    SELECT DTA.ID
                    FROM doctypb AS DTB inner join doctypa AS DTA on DTB.ida = DTA.id
                    WHERE DTB.ID = OPSD.doctyp AND DTA.ID = :PDOCGR
                )
            ) AND
            EXISTS
            (
                
                SELECT NULL
                FROM OPS o1
                WHERE
                (
                    (o1.DocId = OPSd.id) AND
                    (
                        (
                            (:pac11 IS NULL OR o1.AC11 LIKE :pac11) AND
                            (:pac12 IS NULL OR o1.AC12 LIKE :pac12) AND
                            (:pac13 IS NULL OR o1.AC13 LIKE :pac13) AND
                            (:pac14 IS NULL OR o1.AC14 LIKE :pac14) AND
                            (:pac15 IS NULL OR o1.AC15 LIKE :pac15)
                        )
                        OR
                        (
                            (:pac21 IS NULL OR o1.AC21 LIKE :pac21) AND
                            (:pac22 IS NULL OR o1.AC22 LIKE :pac22) AND
                            (:pac23 IS NULL OR o1.AC23 LIKE :pac23) AND
                            (:pac24 IS NULL OR o1.AC24 LIKE :pac24) AND
                            (:pac25 IS NULL OR o1.AC25 LIKE :pac25)
                        )
                    )
                )
            )

          ORDER BY OPSd.DETE, OPSd.id, OPS.id
          into :id,
               :docid,
               :descr,
               :ac11,
               :ac12,
               :ac13,
               :ac14,
               :ac15,
               :ac21,
               :ac22,
               :ac23,
               :ac24,
               :ac25,
               :summc,
               :cur,
               :summ,
               :qv,
               :nl,
               :zdt
        do
        begin
            suspend;
        end

    end
end^


ALTER PROCEDURE SP_OPS_ID
RETURNS (
    NEXTID INTEGER)
AS
begin
    nextid = GEN_ID("GEN_OPS_ID",1);
    suspend;
end^


ALTER PROCEDURE SP_OPS_IDK (
    PK INTEGER)
RETURNS (
    NEXTID INTEGER)
AS
begin
    nextid = GEN_ID("GEN_OPS_ID", :PK);
    suspend;
end^


ALTER PROCEDURE SP_OPS_INSERT (
    PID INTEGER,
    PDOCID INTEGER,
    PDESCR VARCHAR(50),
    PAC11 VARCHAR(8),
    PAC12 VARCHAR(8),
    PAC13 VARCHAR(5),
    PAC14 VARCHAR(8),
    PAC15 VARCHAR(5),
    PAC21 VARCHAR(8),
    PAC22 VARCHAR(8),
    PAC23 VARCHAR(5),
    PAC24 VARCHAR(8),
    PAC25 VARCHAR(5),
    PSUMMC NUMERIC(15,4),
    PCUR VARCHAR(3),
    PSUMM NUMERIC(15,4),
    PQV FLOAT,
    PNL SMALLINT)
RETURNS (
    ID TYPE OF COLUMN OPS.ID,
    DOCID TYPE OF COLUMN OPS.DOCID,
    DESCR TYPE OF COLUMN OPS.DESCR,
    AC11 TYPE OF COLUMN OPS.AC11,
    AC12 TYPE OF COLUMN OPS.AC12,
    AC13 TYPE OF COLUMN OPS.AC13,
    AC14 TYPE OF COLUMN OPS.AC14,
    AC15 TYPE OF COLUMN OPS.AC15,
    AC21 TYPE OF COLUMN OPS.AC21,
    AC22 TYPE OF COLUMN OPS.AC22,
    AC23 TYPE OF COLUMN OPS.AC23,
    AC24 TYPE OF COLUMN OPS.AC24,
    AC25 TYPE OF COLUMN OPS.AC25,
    SUMMC TYPE OF COLUMN OPS.SUMMC,
    CUR TYPE OF COLUMN OPS.CUR,
    SUMM TYPE OF COLUMN OPS.SUMM,
    QV TYPE OF COLUMN OPS.QV,
    NL TYPE OF COLUMN OPS.NL,
    ZDT TYPE OF COLUMN OPS.ZDT)
AS
declare newid int;
begin
    INSERT INTO OPS
        (id, ZDt, DocId, Descr,
        AC11, AC12, AC13, AC14, AC15, 
        AC21, AC22, AC23, AC24, AC25, 
        SummC, Cur, Summ, QV, NL) 
    VALUES 
        (:pid, localtimestamp(0), :pDocId, :pDescr,
        :pAC11, :pAC12, :pAC13, :pAC14, :pAC15,
        :pAC21, :pAC22, :pAC23, :pAC24, :pAC25,
        :pSummC, :pCur, :pSumm, :pQV, :pNL)
    RETURNING
        id, DocId, Descr, 
        AC11, AC12, AC13, AC14, AC15, 
        AC21, AC22, AC23, AC24, AC25, 
        SummC, Cur, Summ, QV, NL, ZDt
    INTO
        :id, :DocId, :Descr,
        :AC11, :AC12, :AC13, :AC14, :AC15, 
        :AC21, :AC22, :AC23, :AC24, :AC25, 
        :SummC, :Cur, :Summ, :QV, :NL, :ZDt;

end^


ALTER PROCEDURE SP_OPS_UPDATE (
    PDOCID INTEGER,
    PDESCR VARCHAR(50),
    PAC11 VARCHAR(8),
    PAC12 VARCHAR(8),
    PAC13 VARCHAR(5),
    PAC14 VARCHAR(8),
    PAC15 VARCHAR(5),
    PAC21 VARCHAR(8),
    PAC22 VARCHAR(8),
    PAC23 VARCHAR(5),
    PAC24 VARCHAR(8),
    PAC25 VARCHAR(5),
    PSUMMC NUMERIC(15,4),
    PCUR VARCHAR(3),
    PSUMM NUMERIC(15,4),
    PQV FLOAT,
    PNL SMALLINT,
    ORIGINAL_ID INTEGER,
    ORIGINAL_DOCID INTEGER,
    ISNULL_DESCR INTEGER,
    ORIGINAL_DESCR VARCHAR(50),
    ORIGINAL_AC11 VARCHAR(8),
    ISNULL_AC12 INTEGER,
    ORIGINAL_AC12 VARCHAR(8),
    ISNULL_AC13 INTEGER,
    ORIGINAL_AC13 VARCHAR(5),
    ISNULL_AC14 INTEGER,
    ORIGINAL_AC14 VARCHAR(8),
    ISNULL_AC15 INTEGER,
    ORIGINAL_AC15 VARCHAR(5),
    ORIGINAL_AC21 VARCHAR(8),
    ISNULL_AC22 INTEGER,
    ORIGINAL_AC22 VARCHAR(8),
    ISNULL_AC23 INTEGER,
    ORIGINAL_AC23 VARCHAR(5),
    ISNULL_AC24 INTEGER,
    ORIGINAL_AC24 VARCHAR(8),
    ISNULL_AC25 INTEGER,
    ORIGINAL_AC25 VARCHAR(5),
    ORIGINAL_SUMMC NUMERIC(15,4),
    ORIGINAL_CUR VARCHAR(3),
    ORIGINAL_SUMM NUMERIC(15,4),
    ISNULL_QV INTEGER,
    ORIGINAL_QV FLOAT,
    ISNULL_NL INTEGER,
    ORIGINAL_NL SMALLINT,
    ISNULL_ZDT INTEGER,
    ORIGINAL_ZDT TIMESTAMP,
    PID INTEGER)
RETURNS (
    ID TYPE OF COLUMN OPS.ID,
    DOCID TYPE OF COLUMN OPS.DOCID,
    DESCR TYPE OF COLUMN OPS.DESCR,
    AC11 TYPE OF COLUMN OPS.AC11,
    AC12 TYPE OF COLUMN OPS.AC12,
    AC13 TYPE OF COLUMN OPS.AC13,
    AC14 TYPE OF COLUMN OPS.AC14,
    AC15 TYPE OF COLUMN OPS.AC15,
    AC21 TYPE OF COLUMN OPS.AC21,
    AC22 TYPE OF COLUMN OPS.AC22,
    AC23 TYPE OF COLUMN OPS.AC23,
    AC24 TYPE OF COLUMN OPS.AC24,
    AC25 TYPE OF COLUMN OPS.AC25,
    SUMMC TYPE OF COLUMN OPS.SUMMC,
    CUR TYPE OF COLUMN OPS.CUR,
    SUMM TYPE OF COLUMN OPS.SUMM,
    QV TYPE OF COLUMN OPS.QV,
    NL TYPE OF COLUMN OPS.NL,
    ZDT TYPE OF COLUMN OPS.ZDT)
AS
declare variable VUSER varchar(50);
    declare variable O_ZDT timestamp;
begin

    UPDATE OPS
    SET 
        DocId = :pDocId,
        Descr = :pDescr,
        AC11 = :pAC11,
        AC12 = :pAC12,
        AC13 = :pAC13,
        AC14 = :pAC14,
        AC15 = :pAC15,
        AC21 = :pAC21,
        AC22 = :pAC22,
        AC23 = :pAC23,
        AC24 = :pAC24,
        AC25 = :pAC25,
        SummC = :pSummC,
        Cur = :pCur,
        Summ = :pSumm,
        QV = :pQV,
        NL = :pNL,
        ZDt = localtimestamp(0)
    WHERE (
        (id = :Original_id) AND
        (DocId = :Original_DocId) AND
        ((:IsNull_Descr = 1 AND Descr IS NULL) OR (Descr = :Original_Descr)) AND
        (AC11 = :Original_AC11) AND
        ((:IsNull_AC12 = 1 AND AC12 IS NULL) OR (AC12 = :Original_AC12)) AND
        ((:IsNull_AC13 = 1 AND AC13 IS NULL) OR (AC13 = :Original_AC13)) AND
        ((:IsNull_AC14 = 1 AND AC14 IS NULL) OR (AC14 = :Original_AC14)) AND
        ((:IsNull_AC15 = 1 AND AC15 IS NULL) OR (AC15 = :Original_AC15)) AND
        (AC21 = :Original_AC21) AND
        ((:IsNull_AC22 = 1 AND AC22 IS NULL) OR (AC22 = :Original_AC22)) AND
        ((:IsNull_AC23 = 1 AND AC23 IS NULL) OR (AC23 = :Original_AC23)) AND
        ((:IsNull_AC24 = 1 AND AC24 IS NULL) OR (AC24 = :Original_AC24)) AND
        ((:IsNull_AC25 = 1 AND AC25 IS NULL) OR (AC25 = :Original_AC25)) AND
        (SummC = :Original_SummC) AND
        (Cur = :Original_Cur) AND
        (Summ = :Original_Summ) AND
        ((:IsNull_QV = 1 AND QV IS NULL) OR (QV = :Original_QV))
    );

    O_ZDt = ORIGINAL_ZDT;
    IF (ISNULL_ZDT = 1) THEN
    BEGIN
        O_ZDt = null;
    END

    VUSER = rdb$get_context('USER_SESSION', 'UserName');
    if(VUSER is null) then VUSER = User;

     execute procedure sp_ops_update_log(
        :Original_id,
        :vuser,
        :Original_DocId, 
        :Original_AC11, 
        :Original_AC12, 
        :Original_AC13, 
        :Original_AC14, 
        :Original_AC15, 
        :Original_AC21, 
        :Original_AC22, 
        :Original_AC23, 
        :Original_AC24, 
        :Original_AC25, 
        :Original_SummC, 
        :Original_Cur, 
        :Original_Summ, 
        :Original_QV,
        :O_ZDt);


    SELECT 
        id, DocId, Descr, 
        AC11, AC12, AC13, AC14, AC15, 
        AC21, AC22, AC23, AC24, AC25, 
        SummC, Cur, Summ, QV, NL, ZDt
    FROM OPS 
    WHERE (id = :pid)
    INTO
        :id, :DocId, :Descr,
        :AC11, :AC12, :AC13, :AC14, :AC15, 
        :AC21, :AC22, :AC23, :AC24, :AC25, 
        :SummC, :Cur, :Summ, :QV, :NL, :ZDt;

end^


ALTER PROCEDURE SP_OPS_UPDATE_LOG (
    ID INTEGER,
    USR VARCHAR(15),
    ORIGINAL_DOCID INTEGER,
    ORIGINAL_AC11 VARCHAR(8),
    ORIGINAL_AC12 VARCHAR(8),
    ORIGINAL_AC13 VARCHAR(5),
    ORIGINAL_AC14 VARCHAR(8),
    ORIGINAL_AC15 VARCHAR(5),
    ORIGINAL_AC21 VARCHAR(8),
    ORIGINAL_AC22 VARCHAR(8),
    ORIGINAL_AC23 VARCHAR(5),
    ORIGINAL_AC24 VARCHAR(8),
    ORIGINAL_AC25 VARCHAR(5),
    ORIGINAL_SUMMC NUMERIC(15,4),
    ORIGINAL_CUR VARCHAR(3),
    ORIGINAL_SUMM NUMERIC(15,4),
    ORIGINAL_QV FLOAT,
    ORIGINAL_ZDT TIMESTAMP)
AS
declare variable IDL integer;
    declare variable NOW timestamp;
    declare variable XDT timestamp;
BEGIN
    now = localtimestamp(0);
    xdt = dateadd(-1 hour to now);

    IF (:Original_ZDt IS NULL OR :Original_ZDt < xdt)
    THEN BEGIN
        INSERT INTO LOPS 
            (dtl, usl, id, DocId,
            AC11, AC12, AC13, AC14, AC15,
            AC21, AC22, AC23, AC24, AC25,
            SummC, Cur, Summ, QV, ODT)
        VALUES 
        (
            :now,
            :Usr,
            :id,
            :Original_DocId, 
            :Original_AC11,
            :Original_AC12, 
            :Original_AC13, 
            :Original_AC14, 
            :Original_AC15, 
            :Original_AC21, 
            :Original_AC22, 
            :Original_AC23, 
            :Original_AC24, 
            :Original_AC25, 
            :Original_SummC, 
            :Original_Cur, 
            :Original_Summ, 
            :Original_QV,
            :ORIGINAL_ZDT
        );
    END
END^


ALTER PROCEDURE SP_OPSD_DELETE (
    ORIGINAL_ID INTEGER,
    ORIGINAL_DATE DATE,
    ISNULL_NRX INTEGER,
    ORIGINAL_NRX VARCHAR(5),
    ISNULL_DOCTYP INTEGER,
    ORIGINAL_DOCTYP VARCHAR(10),
    ISNULL_DOCST INTEGER,
    ORIGINAL_DOCST VARCHAR(6),
    ISNULL_DOCNR INTEGER,
    ORIGINAL_DOCNR VARCHAR(15),
    ISNULL_CLID INTEGER,
    ORIGINAL_CLID VARCHAR(15),
    ISNULL_CLID2 INTEGER,
    ORIGINAL_CLID2 VARCHAR(15),
    ISNULL_DESCR INTEGER,
    ORIGINAL_DESCR VARCHAR(80),
    ORIGINAL_SUMM NUMERIC(15,4),
    ORIGINAL_PVN NUMERIC(15,4),
    ORIGINAL_ZNR INTEGER,
    ISNULL_ZU INTEGER,
    ORIGINAL_ZU VARCHAR(20),
    ISNULL_ZDT INTEGER,
    ORIGINAL_ZDT TIMESTAMP,
    ISNULL_DT2 INTEGER,
    ORIGINAL_DT2 DATE)
AS
declare variable VUSER varchar(50);
declare variable O_ZDT timestamp;
begin
    DELETE FROM OPSd
    WHERE 
    (
        (id = :Original_id) AND 
        (DETE = :Original_Date) AND
        ((:IsNull_NrX = 1 AND NrX IS NULL) OR (NrX = :Original_NrX)) AND 
        ((:IsNull_DocTyp = 1 AND DocTyp IS NULL) OR (DocTyp = :Original_DocTyp)) AND 
        ((:IsNull_DocSt = 1 AND DocSt IS NULL) OR (DocSt = :Original_DocSt)) AND 
        ((:IsNull_DocNr = 1 AND DocNr IS NULL) OR (DocNr = :Original_DocNr)) AND 
        ((:IsNull_ClId = 1 AND ClId IS NULL) OR (ClId = :Original_ClId)) AND 
        ((:IsNull_ClId2 = 1 AND ClId2 IS NULL) OR (ClId2 = :Original_ClId2)) AND 
        ((:IsNull_Descr = 1 AND Descr IS NULL) OR (Descr = :Original_Descr)) AND 
        (Summ = :Original_Summ) AND 
        (PVN = :Original_PVN) AND 
        (ZNR = :Original_ZNR) AND 
        ((:IsNull_DT2 = 1 AND DT2 IS NULL) OR (DT2 = :Original_DT2))
    );

    O_ZDt = :Original_ZDt;
    IF (:IsNull_ZDt = 1) THEN
    BEGIN
        O_ZDt = null;
    END

    VUSER = rdb$get_context('USER_SESSION', 'UserName');
    if(VUSER is null) then VUSER = User;

    EXECUTE PROCEDURE sp_opsd_delete_log(
            :Original_id,
            :VUSER,
            :Original_Date, 
            :Original_NrX, 
            :Original_DocTyp, 
            :Original_DocSt, 
            :Original_DocNr, 
            :Original_ClId, 
            :Original_ClId2, 
            :Original_Descr, 
            :Original_Summ, 
            :Original_PVN, 
            :Original_ZNR,
            :O_ZDt);


end^


ALTER PROCEDURE SP_OPSD_DELETE_LOG (
    ID INTEGER,
    USR VARCHAR(15),
    ORIGINAL_DATE DATE,
    ORIGINAL_NRX VARCHAR(5),
    ORIGINAL_DOCTYP VARCHAR(10),
    ORIGINAL_DOCST VARCHAR(6),
    ORIGINAL_DOCNR VARCHAR(15),
    ORIGINAL_CLID VARCHAR(15),
    ORIGINAL_CLID2 VARCHAR(15),
    ORIGINAL_DESCR VARCHAR(80),
    ORIGINAL_SUMM NUMERIC(15,4),
    ORIGINAL_PVN NUMERIC(15,4),
    ORIGINAL_ZNR INTEGER,
    ORIGINAL_ZDT TIMESTAMP)
AS
declare variable IDL integer;
    declare variable NOW timestamp;
    declare variable XDT timestamp;
begin
    now = current_timestamp(0);
    xdt = dateadd(-1 hour to now);

    IF (:Original_ZDt IS NULL OR :Original_ZDt < xdt)
    THEN BEGIN

        INSERT INTO LOPSD
            (id, ZDt, dtld, ZU, DETE, NrX,
            DocTyp, DocSt, DocNr,
            ClId, ClId2, Descr, Summ, PVN, ZNR, ODT)
        VALUES (
            :id,
            :now,
            :now,
            :Usr,
            :Original_Date, 
            :Original_NrX, 
            :Original_DocTyp, 
            :Original_DocSt, 
            :Original_DocNr, 
            :Original_ClId, 
            :Original_ClId2, 
            :Original_Descr, 
            :Original_Summ, 
            :Original_PVN, 
            :Original_ZNR,
            :ORIGINAL_ZDT
            );

    END
    ELSE BEGIN

        UPDATE LOPSD 
        SET 
            dtld = :now
        WHERE LOPSD.id = :id;

    END

end^


ALTER PROCEDURE SP_OPSD_FILTER_AND (
    PDATE1 DATE,
    PDATE2 DATE,
    PTEXT VARCHAR(50),
    PCLID VARCHAR(15),
    PAC11 VARCHAR(8),
    PAC12 VARCHAR(8),
    PAC13 VARCHAR(5),
    PAC14 VARCHAR(8),
    PAC15 VARCHAR(5),
    PAC21 VARCHAR(8),
    PAC22 VARCHAR(8),
    PAC23 VARCHAR(5),
    PAC24 VARCHAR(8),
    PAC25 VARCHAR(5),
    PDOCGR VARCHAR(10))
RETURNS (
    ID TYPE OF COLUMN OPSD.ID,
    DETE TYPE OF COLUMN OPSD.DETE,
    NRX TYPE OF COLUMN OPSD.NRX,
    DOCTYP TYPE OF COLUMN OPSD.DOCTYP,
    DOCST TYPE OF COLUMN OPSD.DOCST,
    DOCNR TYPE OF COLUMN OPSD.DOCNR,
    CLID TYPE OF COLUMN OPSD.CLID,
    CLID2 TYPE OF COLUMN OPSD.CLID2,
    DESCR TYPE OF COLUMN OPSD.DESCR,
    SUMM TYPE OF COLUMN OPSD.SUMM,
    PVN TYPE OF COLUMN OPSD.PVN,
    OPT TYPE OF COLUMN OPSD.OPT,
    ZNR TYPE OF COLUMN OPSD.ZNR,
    ZU TYPE OF COLUMN OPSD.ZU,
    ZDT TYPE OF COLUMN OPSD.ZDT,
    DT2 TYPE OF COLUMN OPSD.DT2,
    YR TYPE OF COLUMN OPSD.YR,
    NL TYPE OF COLUMN OPSD.NL)
AS
begin
    if
    (
        pac11 is null and
        pac12 is null and
        pac13 is null and
        pac14 is null and
        pac15 is null and
        pac21 is null and
        pac22 is null and
        pac23 is null and
        pac24 is null and
        pac25 is null

    )
    then begin
        for select
            id, DETE,  nrx, doctyp, docst, docnr,
            clid, clid2, descr, summ, pvn,
            opt, znr, zu, zdt, dt2, nl, yr
        from opsd
        where
            (:pdate1 IS NULL OR opsd.DETE >= :pdate1) AND
            (:pdate2 IS NULL OR opsd.DETE <= :pdate2) AND
            (:pclid IS NULL OR ClId = :pclid OR ClId2 = :pclid) AND
            (:ptext IS NULL OR OPSd.Descr LIKE :ptext) AND
            (
                :PDOCGR IS NULL OR EXISTS(
                    SELECT DTA.ID
                    FROM doctypb AS DTB inner join doctypa AS DTA on DTB.ida = DTA.id
                    WHERE DTB.ID = OPSD.doctyp AND DTA.ID = :PDOCGR
                )
            )

        ORDER BY DETE, id
        into
            :id, :DETE, :nrx, :doctyp, :docst, :docnr,
            :clid, :clid2, :descr, :summ, :pvn,
            :opt, :znr, :zu, :zdt, :dt2, :nl, :yr
        do
        begin
            suspend;
        end
    end
    else begin
        for select
            id, DETE,  nrx, doctyp, docst, docnr,
            clid, clid2, descr, summ, pvn,
            opt, znr, zu, zdt, dt2, nl, yr
        from opsd
        where
            (:pdate1 IS NULL OR opsd.DETE >= :pdate1) AND
            (:pdate2 IS NULL OR opsd.DETE <= :pdate2) AND
            (:pclid IS NULL OR ClId = :pclid OR ClId2 = :pclid) AND
            (:ptext IS NULL OR OPSd.Descr LIKE :ptext) AND
            (
                :PDOCGR IS NULL OR EXISTS(
                    SELECT DTA.ID
                    FROM doctypb AS DTB inner join doctypa AS DTA on DTB.ida = DTA.id
                    WHERE DTB.ID = OPSD.doctyp AND DTA.ID = :PDOCGR
                )
            ) AND
            EXISTS
            (
                SELECT NULL
                FROM OPS o1
                WHERE
                (
                    (o1.DocId = OPSd.id) AND
                    (
                        (
                            (:pac11 IS NULL OR o1.AC11 LIKE :pac11) AND
                            (:pac12 IS NULL OR o1.AC12 LIKE :pac12) AND
                            (:pac13 IS NULL OR o1.AC13 LIKE :pac13) AND
                            (:pac14 IS NULL OR o1.AC14 LIKE :pac14) AND
                            (:pac15 IS NULL OR o1.AC15 LIKE :pac15)
                        )
                        AND
                        (
                            (:pac21 IS NULL OR o1.AC21 LIKE :pac21) AND
                            (:pac22 IS NULL OR o1.AC22 LIKE :pac22) AND
                            (:pac23 IS NULL OR o1.AC23 LIKE :pac23) AND
                            (:pac24 IS NULL OR o1.AC24 LIKE :pac24) AND
                            (:pac25 IS NULL OR o1.AC25 LIKE :pac25)
                        )
                    )
                )
            )
        ORDER BY DETE, opsd.id
        into
            :id, :DETE, :nrx, :doctyp, :docst, :docnr,
            :clid, :clid2, :descr, :summ, :pvn,
            :opt, :znr, :zu, :zdt, :dt2, :nl, :yr
        do
        begin
            suspend;
        end
    end
end^


ALTER PROCEDURE SP_OPSD_FILTER_OR (
    PDATE1 DATE,
    PDATE2 DATE,
    PTEXT VARCHAR(50),
    PCLID VARCHAR(15),
    PAC11 VARCHAR(8),
    PAC12 VARCHAR(8),
    PAC13 VARCHAR(5),
    PAC14 VARCHAR(8),
    PAC15 VARCHAR(5),
    PAC21 VARCHAR(8),
    PAC22 VARCHAR(8),
    PAC23 VARCHAR(5),
    PAC24 VARCHAR(8),
    PAC25 VARCHAR(5),
    PDOCGR VARCHAR(10))
RETURNS (
    ID TYPE OF COLUMN OPSD.ID,
    DETE TYPE OF COLUMN OPSD.DETE,
    NRX TYPE OF COLUMN OPSD.NRX,
    DOCTYP TYPE OF COLUMN OPSD.DOCTYP,
    DOCST TYPE OF COLUMN OPSD.DOCST,
    DOCNR TYPE OF COLUMN OPSD.DOCNR,
    CLID TYPE OF COLUMN OPSD.CLID,
    CLID2 TYPE OF COLUMN OPSD.CLID2,
    DESCR TYPE OF COLUMN OPSD.DESCR,
    SUMM TYPE OF COLUMN OPSD.SUMM,
    PVN TYPE OF COLUMN OPSD.PVN,
    OPT TYPE OF COLUMN OPSD.OPT,
    ZNR TYPE OF COLUMN OPSD.ZNR,
    ZU TYPE OF COLUMN OPSD.ZU,
    ZDT TYPE OF COLUMN OPSD.ZDT,
    DT2 TYPE OF COLUMN OPSD.DT2,
    YR TYPE OF COLUMN OPSD.YR,
    NL TYPE OF COLUMN OPSD.NL)
AS
begin
    if
    (
        pac11 is null and
        pac12 is null and
        pac13 is null and
        pac14 is null and
        pac15 is null and
        pac21 is null and
        pac22 is null and
        pac23 is null and
        pac24 is null and
        pac25 is null

    )
    then begin
        for select
            id, DETE,  nrx, doctyp, docst, docnr,
            clid, clid2, descr, summ, pvn,
            opt, znr, zu, zdt, dt2, nl, yr
        from opsd
        where
            (:pdate1 IS NULL OR opsd.DETE >= :pdate1) AND
            (:pdate2 IS NULL OR opsd.DETE <= :pdate2) AND
            (:pclid IS NULL OR ClId = :pclid OR ClId2 = :pclid) AND
            (:ptext IS NULL OR OPSd.Descr LIKE :ptext) AND
            (
                :PDOCGR IS NULL OR EXISTS(
                    SELECT DTA.ID
                    FROM doctypb AS DTB inner join doctypa AS DTA on DTB.ida = DTA.id
                    WHERE DTB.ID = OPSD.doctyp AND DTA.ID = :PDOCGR
                )
            )
        ORDER BY DETE, id
        into
            :id, :DETE, :nrx, :doctyp, :docst, :docnr,
            :clid, :clid2, :descr, :summ, :pvn,
            :opt, :znr, :zu, :zdt, :dt2, :nl, :yr
        do
        begin
            suspend;
        end
    end
    else begin
        for select
            id, DETE,  nrx, doctyp, docst, docnr,
            clid, clid2, descr, summ, pvn,
            opt, znr, zu, zdt, dt2, nl, yr
        from opsd
        where
            (:pdate1 IS NULL OR opsd.DETE >= :pdate1) AND
            (:pdate2 IS NULL OR opsd.DETE <= :pdate2) AND
            (:pclid IS NULL OR ClId = :pclid OR ClId2 = :pclid) AND
            (:ptext IS NULL OR OPSd.Descr LIKE :ptext) AND
            (
                :PDOCGR IS NULL OR EXISTS(
                    SELECT DTA.ID
                    FROM doctypb AS DTB inner join doctypa AS DTA on DTB.ida = DTA.id
                    WHERE DTB.ID = OPSD.doctyp AND DTA.ID = :PDOCGR
                )
            ) AND
            EXISTS
            (
                SELECT NULL
                FROM OPS o1
                WHERE
                (
                    (o1.DocId = OPSd.id) AND
                    (
                        (
                            (:pac11 IS NULL OR o1.AC11 LIKE :pac11) AND
                            (:pac12 IS NULL OR o1.AC12 LIKE :pac12) AND
                            (:pac13 IS NULL OR o1.AC13 LIKE :pac13) AND
                            (:pac14 IS NULL OR o1.AC14 LIKE :pac14) AND
                            (:pac15 IS NULL OR o1.AC15 LIKE :pac15)
                        )
                        OR
                        (
                            (:pac21 IS NULL OR o1.AC21 LIKE :pac21) AND
                            (:pac22 IS NULL OR o1.AC22 LIKE :pac22) AND
                            (:pac23 IS NULL OR o1.AC23 LIKE :pac23) AND
                            (:pac24 IS NULL OR o1.AC24 LIKE :pac24) AND
                            (:pac25 IS NULL OR o1.AC25 LIKE :pac25)
                        )
                    )
                )
            )
        ORDER BY DETE, opsd.id
        into
            :id, :DETE, :nrx, :doctyp, :docst, :docnr,
            :clid, :clid2, :descr, :summ, :pvn,
            :opt, :znr, :zu, :zdt, :dt2, :nl, :yr
        do
        begin
            suspend;
        end
    end
end^


ALTER PROCEDURE SP_OPSD_GETNEXTNRFORYEARA (
    YR INTEGER)
RETURNS (
    NEXTNR INTEGER)
AS
begin
    execute procedure SP_OPSD_GETNEXTNRFORYEARA_K(:yr, 1)
    returning_values :NEXTNR;

    suspend;
end^


ALTER PROCEDURE SP_OPSD_GETNEXTNRFORYEARA_K (
    YR INTEGER,
    PK INTEGER)
RETURNS (
    NEXTNR INTEGER)
AS
declare variable K integer;
begin
    if (yr < 2010 or (yr > 2030) ) then
    begin
        nextnr = -1;
        exit;
    end
    k = yr - 2010;

    if (k < 16) then
        if (k < 8) then
            if (k < 4) then
                nextnr = case k
                when 0 then gen_id(year00, :pk)
                when 1 then gen_id(year01, :pk)
                when 2 then gen_id(year02, :pk)
                when 3 then gen_id(year03, :pk)
                end;
            else
                nextnr = case k
                when 4 then gen_id(year04, :pk)
                when 5 then gen_id(year05, :pk)
                when 6 then gen_id(year06, :pk)
                when 7 then gen_id(year07, :pk)
                end;
        else
            if (k < 12) then
                nextnr = case k
                when 8 then gen_id(year08, :pk)
                when 9 then gen_id(year09, :pk)
                when 10 then gen_id(year10, :pk)
                when 11 then gen_id(year11, :pk)
                end;
            else
                nextnr = case k
                when 12 then gen_id(year12, :pk)
                when 13 then gen_id(year13, :pk)
                when 14 then gen_id(year14, :pk)
                when 15 then gen_id(year15, :pk)
                end;
    else
        if (k < 24) then
            if (k < 20) then
                nextnr = case k
                when 16 then gen_id(year16, :pk)
                when 17 then gen_id(year17, :pk)
                when 18 then gen_id(year18, :pk)
                when 19 then gen_id(year19, :pk)
                end;
            else
                nextnr = case k
                when 20 then gen_id(year20, :pk)
                when 21 then gen_id(year21, :pk)
                when 22 then gen_id(year22, :pk)
                when 23 then gen_id(year23, :pk)
                end;
        else
            if (k < 28) then
                nextnr = case k
                when 24 then gen_id(year24, :pk)
                when 25 then gen_id(year25, :pk)
                when 26 then gen_id(year26, :pk)
                when 27 then gen_id(year27, :pk)
                end;
            else
                nextnr = case k
                when 28 then gen_id(year28, :pk)
                when 29 then gen_id(year29, :pk)
                when 30 then gen_id(year30, :pk)
                when 31 then gen_id(year31, :pk)
                end;

    suspend;

end^


ALTER PROCEDURE SP_OPSD_ID
RETURNS (
    NEXTID INTEGER)
AS
begin
    nextid = GEN_ID("GEN_OPSD_ID",1);
    suspend;
end^


ALTER PROCEDURE SP_OPSD_IDK (
    PK INTEGER)
RETURNS (
    NEXTID INTEGER)
AS
begin
    nextid = GEN_ID("GEN_OPSD_ID", :PK);
    suspend;
end^


ALTER PROCEDURE SP_OPSD_INSERT (
    PID INTEGER,
    PDETE DATE,
    PNRX VARCHAR(5),
    PDOCTYP VARCHAR(10),
    PDOCST VARCHAR(6),
    PDOCNR VARCHAR(15),
    PCLID VARCHAR(15),
    PCLID2 VARCHAR(15),
    PDESCR VARCHAR(80),
    PSUMM NUMERIC(15,4),
    PPVN NUMERIC(15,4),
    POPT INTEGER,
    PZNR INTEGER,
    PZU VARCHAR(20),
    PZDT TIMESTAMP,
    PDT2 DATE,
    PNL SMALLINT)
RETURNS (
    ID TYPE OF COLUMN OPSD.ID,
    DETE TYPE OF COLUMN OPSD.DETE,
    NRX TYPE OF COLUMN OPSD.NRX,
    DOCTYP TYPE OF COLUMN OPSD.DOCTYP,
    DOCST TYPE OF COLUMN OPSD.DOCST,
    DOCNR TYPE OF COLUMN OPSD.DOCNR,
    CLID TYPE OF COLUMN OPSD.CLID,
    CLID2 TYPE OF COLUMN OPSD.CLID2,
    DESCR TYPE OF COLUMN OPSD.DESCR,
    SUMM TYPE OF COLUMN OPSD.SUMM,
    PVN TYPE OF COLUMN OPSD.PVN,
    OPT TYPE OF COLUMN OPSD.OPT,
    ZNR TYPE OF COLUMN OPSD.ZNR,
    ZU TYPE OF COLUMN OPSD.ZU,
    ZDT TYPE OF COLUMN OPSD.ZDT,
    DT2 TYPE OF COLUMN OPSD.DT2,
    YR TYPE OF COLUMN OPSD.YR,
    NL TYPE OF COLUMN OPSD.NL)
AS
begin
    INSERT INTO OPSd
        (id, DETE, NrX, DocTyp, DocSt, DocNr,
        ClId, ClId2, Descr, Summ, PVN,
        Opt, ZNR, ZU, ZDt, DT2, NL)
    VALUES
        (:pid, :pDete, :pNrX, :pDocTyp, :pDocSt, :pDocNr,
        :pClId, :pClId2, :pDescr, :pSumm, :pPVN,
        :pOpt, :pznr, :pZU, localtimestamp(0), :pDT2, 0)
    RETURNING
        id, DETE,  nrx, doctyp, docst, docnr,
        clid, clid2, descr, summ, pvn,
        opt, znr, zu, zdt, dt2, nl, yr
    INTO
        :id, :DETE, :nrx, :doctyp, :docst, :docnr,
        :clid, :clid2, :descr, :summ, :pvn,
        :opt, :znr, :zu, :zdt, :dt2, :nl, :yr;

    suspend;

end^


ALTER PROCEDURE SP_OPSD_UPDATE (
    PDETE DATE,
    PNRX VARCHAR(5),
    PDOCTYP VARCHAR(10),
    PDOCST VARCHAR(6),
    PDOCNR VARCHAR(15),
    PCLID VARCHAR(15),
    PCLID2 VARCHAR(15),
    PDESCR VARCHAR(80),
    PSUMM NUMERIC(15,4),
    PPVN NUMERIC(15,4),
    POPT INTEGER,
    PZNR INTEGER,
    PZU VARCHAR(20),
    PZDT TIMESTAMP,
    PDT2 DATE,
    PNL SMALLINT,
    ORIGINAL_ID INTEGER,
    ORIGINAL_DATE DATE,
    ISNULL_NRX INTEGER,
    ORIGINAL_NRX VARCHAR(5),
    ISNULL_DOCTYP INTEGER,
    ORIGINAL_DOCTYP VARCHAR(10),
    ISNULL_DOCST INTEGER,
    ORIGINAL_DOCST VARCHAR(6),
    ISNULL_DOCNR INTEGER,
    ORIGINAL_DOCNR VARCHAR(15),
    ISNULL_CLID INTEGER,
    ORIGINAL_CLID VARCHAR(15),
    ISNULL_CLID2 INTEGER,
    ORIGINAL_CLID2 VARCHAR(15),
    ISNULL_DESCR INTEGER,
    ORIGINAL_DESCR VARCHAR(80),
    ORIGINAL_SUMM NUMERIC(15,4),
    ORIGINAL_PVN NUMERIC(15,4),
    ISNULL_OPT INTEGER,
    ORIGINAL_OPT INTEGER,
    ORIGINAL_ZNR INTEGER,
    ISNULL_ZU INTEGER,
    ORIGINAL_ZU VARCHAR(20),
    ISNULL_ZDT INTEGER,
    ORIGINAL_ZDT TIMESTAMP,
    ISNULL_DT2 INTEGER,
    ORIGINAL_DT2 DATE,
    ISNULL_NL INTEGER,
    ORIGINAL_NL SMALLINT,
    ISNULL_YR INTEGER,
    ORIGINAL_YR INTEGER,
    PID INTEGER)
RETURNS (
    ID TYPE OF COLUMN OPSD.ID,
    DETE TYPE OF COLUMN OPSD.DETE,
    NRX TYPE OF COLUMN OPSD.NRX,
    DOCTYP TYPE OF COLUMN OPSD.DOCTYP,
    DOCST TYPE OF COLUMN OPSD.DOCST,
    DOCNR TYPE OF COLUMN OPSD.DOCNR,
    CLID TYPE OF COLUMN OPSD.CLID,
    CLID2 TYPE OF COLUMN OPSD.CLID2,
    DESCR TYPE OF COLUMN OPSD.DESCR,
    SUMM TYPE OF COLUMN OPSD.SUMM,
    PVN TYPE OF COLUMN OPSD.PVN,
    OPT TYPE OF COLUMN OPSD.OPT,
    ZNR TYPE OF COLUMN OPSD.ZNR,
    ZU TYPE OF COLUMN OPSD.ZU,
    ZDT TYPE OF COLUMN OPSD.ZDT,
    DT2 TYPE OF COLUMN OPSD.DT2,
    YR TYPE OF COLUMN OPSD.YR,
    NL TYPE OF COLUMN OPSD.NL)
AS
declare variable XYR integer;
declare variable NEXTNR integer;
declare variable VUSER varchar(50);
declare variable O_ZDT timestamp;
begin
    /*
    xyr = EXTRACT(YEAR FROM :pDete);
    NEXTNR = :Original_ZNR;

    IF (:Original_yr <> xyr) THEN
    BEGIN
        EXECUTE PROCEDURE  sp_opsd_getNextNrForYearA(:xyr) returning_values :nextnr;
        IF (NEXTNR = -1) THEN
        BEGIN
            exception my_exception_badyearvalue;
            EXIT;
        END
    END
    */
    --VUSER = USER;
    VUSER = PZU;

    UPDATE OPSd
    SET 
        DETE = :pDete,
        NrX = :pNrX,
        DocTyp = :pDocTyp,
        DocSt = :pDocSt,
        DocNr = :pDocNr,
        ClId = :pClId,
        ClId2 = :pClId2,
        Descr = :pDescr,
        Summ = :pSumm,
        PVN = :pPVN,
        Opt = :pOpt,
        ZNR = :pznr,
        ZU = :VUSER,
        ZDt = localtimestamp(0),
        DT2 = :pDT2,
        NL = :pNL
    WHERE 
    (
        (id = :Original_id) AND 
        (DETE = :Original_Date) AND
        ((:IsNull_NrX = 1 AND NrX IS NULL) OR (NrX = :Original_NrX)) AND 
        ((:IsNull_DocTyp = 1 AND DocTyp IS NULL) OR (DocTyp = :Original_DocTyp)) AND 
        ((:IsNull_DocSt = 1 AND DocSt IS NULL) OR (DocSt = :Original_DocSt)) AND 
        ((:IsNull_DocNr = 1 AND DocNr IS NULL) OR (DocNr = :Original_DocNr)) AND 
        ((:IsNull_ClId = 1 AND ClId IS NULL) OR (ClId = :Original_ClId)) AND 
        ((:IsNull_ClId2 = 1 AND ClId2 IS NULL) OR (ClId2 = :Original_ClId2)) AND 
        ((:IsNull_Descr = 1 AND Descr IS NULL) OR (Descr = :Original_Descr)) AND 
        (Summ = :Original_Summ) AND 
        (PVN = :Original_PVN) AND 
        (ZNR = :Original_ZNR) AND 
        ((:IsNull_DT2 = 1 AND DT2 IS NULL) OR (DT2 = :Original_DT2))
    );

    O_ZDt = :Original_ZDt;
    IF (:IsNull_ZDt = 1) THEN
    BEGIN
        O_ZDt = null;
    END

    EXECUTE PROCEDURE sp_opsd_update_log(
            :Original_id,
            :VUSER,
            :Original_Date, 
            :Original_NrX, 
            :Original_DocTyp, 
            :Original_DocSt, 
            :Original_DocNr, 
            :Original_ClId, 
            :Original_ClId2, 
            :Original_Descr, 
            :Original_Summ, 
            :Original_PVN, 
            :Original_ZNR,
            :O_ZDt);


end^


ALTER PROCEDURE SP_OPSD_UPDATE_LOG (
    ID INTEGER,
    USR VARCHAR(15),
    ORIGINAL_DATE DATE,
    ORIGINAL_NRX VARCHAR(5),
    ORIGINAL_DOCTYP VARCHAR(10),
    ORIGINAL_DOCST VARCHAR(6),
    ORIGINAL_DOCNR VARCHAR(15),
    ORIGINAL_CLID VARCHAR(15),
    ORIGINAL_CLID2 VARCHAR(15),
    ORIGINAL_DESCR VARCHAR(80),
    ORIGINAL_SUMM NUMERIC(15,4),
    ORIGINAL_PVN NUMERIC(15,4),
    ORIGINAL_ZNR INTEGER,
    ORIGINAL_ZDT TIMESTAMP)
AS
declare variable NOW timestamp;
    declare variable XDT timestamp;
begin
    now = localtimestamp(0);
    xdt = dateadd(-1 hour to now);

    IF (:Original_ZDt IS NULL OR :Original_ZDt < xdt)
    THEN BEGIN
        INSERT INTO LOPSD
            (id, ZDt, ZU, DETE, NrX,
            DocTyp, DocSt, DocNr,
            ClId, ClId2, Descr, Summ, PVN, ZNR, ODT)
        VALUES (
            :id,
            :now,
            :Usr,
            :Original_Date, 
            :Original_NrX, 
            :Original_DocTyp, 
            :Original_DocSt, 
            :Original_DocNr, 
            :Original_ClId, 
            :Original_ClId2, 
            :Original_Descr, 
            :Original_Summ, 
            :Original_PVN, 
            :Original_ZNR,
            :ORIGINAL_ZDT
            );

    END

end^


ALTER PROCEDURE SP_PARAMS (
    USERNAME VARCHAR(20))
RETURNS (
    ID TYPE OF COLUMN PARAMS.ID,
    PNAME TYPE OF COLUMN PARAMS.PNAME,
    PVALUE TYPE OF COLUMN PARAMS.PVALUE,
    USR TYPE OF COLUMN PARAMS.USR)
AS
begin
    FOR SELECT id, pname, pvalue, usr
    FROM params
    WHERE Params.Usr = 'SYSTEM' OR Params.Usr = :username
    ORDER BY Params.PName
    INTO :id, :pname, :pvalue, :usr
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_REKINS_11 (
    PDID INTEGER)
RETURNS (
    ID TYPE OF COLUMN OPS.ID,
    DOCID TYPE OF COLUMN OPS.DOCID,
    DESCR TYPE OF COLUMN OPS.DESCR,
    AC11 TYPE OF COLUMN OPS.AC11,
    AC12 TYPE OF COLUMN OPS.AC12,
    AC13 TYPE OF COLUMN OPS.AC13,
    AC14 TYPE OF COLUMN OPS.AC14,
    AC15 TYPE OF COLUMN OPS.AC15,
    AC21 TYPE OF COLUMN OPS.AC21,
    AC22 TYPE OF COLUMN OPS.AC22,
    AC23 TYPE OF COLUMN OPS.AC23,
    AC24 TYPE OF COLUMN OPS.AC24,
    AC25 TYPE OF COLUMN OPS.AC25,
    SUMMC TYPE OF COLUMN OPS.SUMMC,
    CUR TYPE OF COLUMN OPS.CUR,
    SUMM TYPE OF COLUMN OPS.SUMM,
    QV TYPE OF COLUMN OPS.QV,
    NL TYPE OF COLUMN OPS.NL,
    ZDT TYPE OF COLUMN OPS.ZDT)
AS
begin
  for select ops.id,
             ops.docid,
             ops.descr,
             ops.ac11,
             ops.ac12,
             ops.ac13,
             ops.ac14,
             ops.ac15,
             ops.ac21,
             ops.ac22,
             ops.ac23,
             ops.ac24,
             ops.ac25,
             ops.summc,
             ops.cur,
             ops.summ,
             ops.qv,
             ops.nl,
             ops.zdt

      FROM OPS
      WHERE
        ops.DOCID = :PDID
      ORDER BY ops.id

      into :id,
           :docid,
           :descr,
           :ac11,
           :ac12,
           :ac13,
           :ac14,
           :ac15,
           :ac21,
           :ac22,
           :ac23,
           :ac24,
           :ac25,
           :summc,
           :cur,
           :summ,
           :qv,
           :nl,
           :zdt
  do
  begin
    suspend;
  end
end^


ALTER PROCEDURE SP_REP_APGR_01 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8))
RETURNS (
    ID TYPE OF COLUMN ROPS2A.ID,
    SPID TYPE OF COLUMN ROPS2A.SPID,
    AC TYPE OF COLUMN ROPS2A.AC,
    RAC TYPE OF COLUMN ROPS2A.RAC,
    NAME TYPE OF COLUMN ROPS2A.NAME,
    B0 TYPE OF COLUMN ROPS2A.B0,
    SDB TYPE OF COLUMN ROPS2A.SDB,
    SCR TYPE OF COLUMN ROPS2A.SCR,
    TDB TYPE OF COLUMN ROPS2A.TDB,
    TCR TYPE OF COLUMN ROPS2A.TCR,
    CLID TYPE OF COLUMN ROPS2A.CLID,
    NAME1 TYPE OF COLUMN ROPS2A.NAME1,
    REGNR TYPE OF COLUMN ROPS2A.REGNR,
    RNAME TYPE OF COLUMN ROPS2A.RNAME)
AS
begin
    FOR SELECT
        gen_id(GEN_ROPS2A_ID, 1) as ID,
        current_connection as SPID,
        :PAC as AC,
        null as RAC,
        acp21.name as NAME,
        0 as b0,
        coalesce(T2.ADb, 0.00) as sdb,
        coalesce(T2.ACr, 0.00) as scr,
        coalesce(T2.BDb, 0.00) as tdb,
        coalesce(T2.BCr, 0.00) as tcr,
        null as clid,
        null as name1,
        null as regnr,
        null as rname
    FROM
    (
        SELECT SUM(SDb) AS ADb, SUM(SCr) AS ACr, SUM(TDb) AS BDb, SUM(TCr) AS BCr
        FROM
        (
            SELECT 
                OPS.AC11 AS AC,
                CASE
                    WHEN OPSd.Dete < :sdt THEN OPS.Summ
                    ELSE 0.00
                END as SDb,
                0.00 as SCr,
                CASE
                    WHEN OPSd.Dete >= :sdt THEN OPS.Summ
                    ELSE 0.00
                END as TDb,
                0.00 as TCr

            FROM OPSd JOIN OPS ON OPSd.id = OPS.DocId
            WHERE OPSd.Dete <= :edt AND OPS.AC11 LIKE :pac

            UNION ALL

            SELECT 
                OPS.AC21 AS AC,
                0.00 as SDb,
                CASE
                    WHEN OPSd.Dete < :sdt THEN OPS.Summ
                    ELSE 0.00
                END as SCr,
                0.00 as TDb,
                CASE
                    WHEN OPSd.Dete >= :sdt THEN OPS.Summ
                    ELSE 0.00
                END as TCr

            FROM OPSd JOIN OPS ON OPSd.id = OPS.DocId
            WHERE OPSd.Dete <= :edt AND OPS.AC21 LIKE :pac

            UNION ALL

            SELECT 
                Bal0.AC11 AS AC,
                Bal0.SummD AS SDb,
                Bal0.SummC AS SCr,
                0.00 AS TDb,
                0.00 AS TCr
            FROM Bal0
            WHERE Bal0.AC11 LIKE :pac

        ) AS T1

    ) AS T2
    LEFT JOIN AcP21 ON :pac = AcP21.AC

    INTO
        :id, :spid, :ac, :rac, :name,
        :b0,
        :sdb, :scr, :tdb, :tcr,
        :clid, :name1, :regnr, :rname

    do
    begin
        suspend;
    end

end^


ALTER PROCEDURE SP_REP_APGR_01_CLID (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15))
RETURNS (
    ID TYPE OF COLUMN ROPS2A.ID,
    SPID TYPE OF COLUMN ROPS2A.SPID,
    AC TYPE OF COLUMN ROPS2A.AC,
    RAC TYPE OF COLUMN ROPS2A.RAC,
    NAME TYPE OF COLUMN ROPS2A.NAME,
    B0 TYPE OF COLUMN ROPS2A.B0,
    SDB TYPE OF COLUMN ROPS2A.SDB,
    SCR TYPE OF COLUMN ROPS2A.SCR,
    TDB TYPE OF COLUMN ROPS2A.TDB,
    TCR TYPE OF COLUMN ROPS2A.TCR,
    CLID TYPE OF COLUMN ROPS2A.CLID,
    NAME1 TYPE OF COLUMN ROPS2A.NAME1,
    REGNR TYPE OF COLUMN ROPS2A.REGNR,
    RNAME TYPE OF COLUMN ROPS2A.RNAME)
AS
begin
    FOR SELECT
        gen_id(GEN_ROPS2A_ID, 1) as ID,
        current_connection as SPID,
        :PAC as AC,
        null as RAC,
        acp21.name as NAME,
        0 as b0,
        coalesce(T2.ADb, 0.00) as sdb,
        coalesce(T2.ACr, 0.00) as scr,
        coalesce(T2.BDb, 0.00) as tdb,
        coalesce(T2.BCr, 0.00) as tcr,
        :pclid as clid,
        Persons.Name as name1,
        Persons.regnr as regnr,
        null as rname
    FROM
    (
        SELECT SUM(SDb) AS ADb, SUM(SCr) AS ACr, SUM(TDb) AS BDb, SUM(TCr) AS BCr
        FROM
        (
            SELECT 
                OPS.AC11 AS AC,
                CASE
                    WHEN OPSd.Dete < :sdt THEN OPS.Summ
                    ELSE 0.00
                END as SDb,
                0.00 as SCr,
                CASE
                    WHEN OPSd.Dete >= :sdt THEN OPS.Summ
                    ELSE 0.00
                END as TDb,
                0.00 as TCr

            FROM OPSd JOIN OPS ON OPSd.id = OPS.DocId
            WHERE
                OPSd.Dete <= :edt AND
                OPS.AC11 LIKE :pac AND
                OPSd.clid = :pclid


            UNION ALL

            SELECT 
                OPS.AC21 AS AC,
                0.00 as SDb,
                CASE
                    WHEN OPSd.Dete < :sdt THEN OPS.Summ
                    ELSE 0.00
                END as SCr,
                0.00 as TDb,
                CASE
                    WHEN OPSd.Dete >= :sdt THEN OPS.Summ
                    ELSE 0.00
                END as TCr

            FROM OPSd JOIN OPS ON OPSd.id = OPS.DocId
            WHERE
                OPSd.Dete <= :edt AND
                OPS.AC21 LIKE :pac AND
                OPSd.clid = :pclid

            UNION ALL

            SELECT 
                Bal0.AC11 AS AC,
                Bal0.SummD AS SDb,
                Bal0.SummC AS SCr,
                0.00 AS TDb,
                0.00 AS TCr
            FROM Bal0
            WHERE
                Bal0.AC11 LIKE :pac AND
                Bal0.ClId = :pclid

        ) AS T1

    ) AS T2
    LEFT JOIN AcP21 ON :pac = AcP21.AC
    LEFT JOIN Persons ON :pclid = Persons.ClId

    INTO
        :id, :spid, :ac, :rac, :name,
        :b0,
        :sdb, :scr, :tdb, :tcr,
        :clid, :name1, :regnr, :rname

    do
    begin
        suspend;
    end

end^


ALTER PROCEDURE SP_REP_APGR_01_CLID2 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15))
RETURNS (
    ID TYPE OF COLUMN ROPS2A.ID,
    SPID TYPE OF COLUMN ROPS2A.SPID,
    AC TYPE OF COLUMN ROPS2A.AC,
    RAC TYPE OF COLUMN ROPS2A.RAC,
    NAME TYPE OF COLUMN ROPS2A.NAME,
    B0 TYPE OF COLUMN ROPS2A.B0,
    SDB TYPE OF COLUMN ROPS2A.SDB,
    SCR TYPE OF COLUMN ROPS2A.SCR,
    TDB TYPE OF COLUMN ROPS2A.TDB,
    TCR TYPE OF COLUMN ROPS2A.TCR,
    CLID TYPE OF COLUMN ROPS2A.CLID,
    NAME1 TYPE OF COLUMN ROPS2A.NAME1,
    REGNR TYPE OF COLUMN ROPS2A.REGNR,
    RNAME TYPE OF COLUMN ROPS2A.RNAME)
AS
begin
    FOR SELECT
        gen_id(GEN_ROPS2A_ID, 1) as ID,
        current_connection as SPID,
        :PAC as AC,
        null as RAC,
        acp21.name as NAME,
        0 as b0,
        coalesce(T2.ADb, 0.00) as sdb,
        coalesce(T2.ACr, 0.00) as scr,
        coalesce(T2.BDb, 0.00) as tdb,
        coalesce(T2.BCr, 0.00) as tcr,
        :pclid as clid,
        Persons.Name as name1,
        Persons.regnr as regnr,
        null as rname
    FROM
    (
        SELECT SUM(SDb) AS ADb, SUM(SCr) AS ACr, SUM(TDb) AS BDb, SUM(TCr) AS BCr
        FROM
        (
            SELECT 
                OPS.AC11 AS AC,
                CASE
                    WHEN OPSd.Dete < :sdt THEN OPS.Summ
                    ELSE 0.00
                END as SDb,
                0.00 as SCr,
                CASE
                    WHEN OPSd.Dete >= :sdt THEN OPS.Summ
                    ELSE 0.00
                END as TDb,
                0.00 as TCr

            FROM OPSd JOIN OPS ON OPSd.id = OPS.DocId
            WHERE
                OPSd.Dete <= :edt AND
                OPS.AC11 LIKE :pac AND
                OPSd.clid2 = :pclid


            UNION ALL

            SELECT 
                OPS.AC21 AS AC,
                0.00 as SDb,
                CASE
                    WHEN OPSd.Dete < :sdt THEN OPS.Summ
                    ELSE 0.00
                END as SCr,
                0.00 as TDb,
                CASE
                    WHEN OPSd.Dete >= :sdt THEN OPS.Summ
                    ELSE 0.00
                END as TCr

            FROM OPSd JOIN OPS ON OPSd.id = OPS.DocId
            WHERE
                OPSd.Dete <= :edt AND
                OPS.AC21 LIKE :pac AND
                OPSd.clid2 = :pclid

            UNION ALL

            SELECT 
                Bal0.AC11 AS AC,
                Bal0.SummD AS SDb,
                Bal0.SummC AS SCr,
                0.00 AS TDb,
                0.00 AS TCr
            FROM Bal0
            WHERE
                Bal0.AC11 LIKE :pac AND
                Bal0.ClId = :pclid

        ) AS T1

    ) AS T2
    LEFT JOIN AcP21 ON :pac = AcP21.AC
    LEFT JOIN Persons ON :pclid = Persons.ClId

    INTO
        :id, :spid, :ac, :rac, :name,
        :b0,
        :sdb, :scr, :tdb, :tcr,
        :clid, :name1, :regnr, :rname

    do
    begin
        suspend;
    end

end^


ALTER PROCEDURE SP_REP_APGR_02 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8))
RETURNS (
    ID TYPE OF COLUMN ROPS2A.ID,
    SPID TYPE OF COLUMN ROPS2A.SPID,
    AC TYPE OF COLUMN ROPS2A.AC,
    RAC TYPE OF COLUMN ROPS2A.RAC,
    NAME TYPE OF COLUMN ROPS2A.NAME,
    B0 TYPE OF COLUMN ROPS2A.B0,
    SDB TYPE OF COLUMN ROPS2A.SDB,
    SCR TYPE OF COLUMN ROPS2A.SCR,
    TDB TYPE OF COLUMN ROPS2A.TDB,
    TCR TYPE OF COLUMN ROPS2A.TCR,
    CLID TYPE OF COLUMN ROPS2A.CLID,
    NAME1 TYPE OF COLUMN ROPS2A.NAME1,
    REGNR TYPE OF COLUMN ROPS2A.REGNR,
    RNAME TYPE OF COLUMN ROPS2A.RNAME)
AS
begin
    FOR SELECT
        gen_id(GEN_ROPS2A_ID, 1) as ID,
        current_connection as SPID,
        T2.AC as AC,
        null as RAC,
        acp21.name as NAME,
        T2.ADb - T2.ACr as b0,
        T2.ADb as sdb,
        T2.ACr as scr,
        T2.BDb as tdb,
        T2.BCr as tcr,
        null as clid,
        null as name1,
        null as regnr,
        null as rname
    FROM
    (
        SELECT AC, SUM(SDb) AS ADb, SUM(SCr) AS ACr, SUM(TDb) AS BDb, SUM(TCr) AS BCr
        FROM
        (
            SELECT 
                OPS.AC11 AS AC,
                CASE
                    WHEN OPSd.Dete < :sdt THEN OPS.Summ
                    ELSE 0.00
                END as SDb,
                0.00 as SCr,
                CASE
                    WHEN OPSd.Dete >= :sdt THEN OPS.Summ
                    ELSE 0.00
                END as TDb,
                0.00 as TCr

            FROM OPSd JOIN OPS ON OPSd.id = OPS.DocId
            WHERE OPSd.Dete <= :edt AND OPS.AC11 LIKE :pac

            UNION ALL

            SELECT 
                OPS.AC21 AS AC,
                0.00 as SDb,
                CASE
                    WHEN OPSd.Dete < :sdt THEN OPS.Summ
                    ELSE 0.00
                END as SCr,
                0.00 as TDb,
                CASE
                    WHEN OPSd.Dete >= :sdt THEN OPS.Summ
                    ELSE 0.00
                END as TCr

            FROM OPSd JOIN OPS ON OPSd.id = OPS.DocId
            WHERE OPSd.Dete <= :edt AND OPS.AC21 LIKE :pac

            UNION ALL

            SELECT 
                Bal0.AC11 AS AC,
                Bal0.SummD AS SDb,
                Bal0.SummC AS SCr,
                0.00 AS TDb,
                0.00 AS TCr
            FROM Bal0
            WHERE Bal0.AC11 LIKE :pac

        ) AS T1
        GROUP BY AC

    ) AS T2
    LEFT JOIN AcP21 ON T2.AC = AcP21.AC

    WHERE 
        (T2.ADb - T2.ACr) <> 0.00 OR
        T2.BDb <> 0.00 OR
        T2.BCr <> 0.00

    ORDER BY AC

    INTO
        :id, :spid, :ac, :rac, :name,
        :b0,
        :sdb, :scr, :tdb, :tcr,
        :clid, :name1, :regnr, :rname

    do
    begin
        suspend;
    end

end^


ALTER PROCEDURE SP_REP_APGR_02_CLID (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15))
RETURNS (
    ID TYPE OF COLUMN ROPS2A.ID,
    SPID TYPE OF COLUMN ROPS2A.SPID,
    AC TYPE OF COLUMN ROPS2A.AC,
    RAC TYPE OF COLUMN ROPS2A.RAC,
    NAME TYPE OF COLUMN ROPS2A.NAME,
    B0 TYPE OF COLUMN ROPS2A.B0,
    SDB TYPE OF COLUMN ROPS2A.SDB,
    SCR TYPE OF COLUMN ROPS2A.SCR,
    TDB TYPE OF COLUMN ROPS2A.TDB,
    TCR TYPE OF COLUMN ROPS2A.TCR,
    CLID TYPE OF COLUMN ROPS2A.CLID,
    NAME1 TYPE OF COLUMN ROPS2A.NAME1,
    REGNR TYPE OF COLUMN ROPS2A.REGNR,
    RNAME TYPE OF COLUMN ROPS2A.RNAME)
AS
begin
    FOR SELECT
        gen_id(GEN_ROPS2A_ID, 1) as ID,
        current_connection as SPID,
        T2.AC as AC,
        null as RAC,
        acp21.name as NAME,
        T2.ADb - T2.ACr as b0,
        T2.ADb as sdb,
        T2.ACr as scr,
        T2.BDb as tdb,
        T2.BCr as tcr,
        T2.Clid as clid,
        Persons.Name as name1,
        Persons.regnr as regnr,
        null as rname
    FROM
    (
        SELECT T1.AC, T1.clid, SUM(SDb) AS ADb, SUM(SCr) AS ACr, SUM(TDb) AS BDb, SUM(TCr) AS BCr
        FROM
        (
            SELECT 
                OPS.AC11 AS AC,
                OPSd.ClId AS Clid,
                CASE
                    WHEN OPSd.Dete < :sdt THEN OPS.Summ
                    ELSE 0.00
                END as SDb,
                0.00 as SCr,
                CASE
                    WHEN OPSd.Dete >= :sdt THEN OPS.Summ
                    ELSE 0.00
                END as TDb,
                0.00 as TCr

            FROM OPSd JOIN OPS ON OPSd.id = OPS.DocId
            WHERE
                OPSd.Dete <= :edt AND
                OPS.AC11 LIKE :pac AND
                (:pclid IS NULL OR OPSd.ClId = :pclid)


            UNION ALL

            SELECT 
                OPS.AC21 AS AC,
                OPSd.ClId AS Clid,
                0.00 as SDb,
                CASE
                    WHEN OPSd.Dete < :sdt THEN OPS.Summ
                    ELSE 0.00
                END as SCr,
                0.00 as TDb,
                CASE
                    WHEN OPSd.Dete >= :sdt THEN OPS.Summ
                    ELSE 0.00
                END as TCr

            FROM OPSd JOIN OPS ON OPSd.id = OPS.DocId
            WHERE
                OPSd.Dete <= :edt AND
                OPS.AC21 LIKE :pac AND
                (:pclid IS NULL OR OPSd.ClId = :pclid)

            UNION ALL

            SELECT 
                Bal0.AC11 AS AC,
                Bal0.ClId AS Clid,
                Bal0.SummD AS SDb,
                Bal0.SummC AS SCr,
                0.00 AS TDb,
                0.00 AS TCr
            FROM Bal0
            WHERE
                Bal0.AC11 LIKE :pac AND
                (:pclid IS NULL OR Bal0.ClId = :pclid)

        ) AS T1
        GROUP BY T1.AC, T1.clid

    ) AS T2
    LEFT JOIN AcP21 ON T2.AC = AcP21.AC
    LEFT JOIN Persons ON T2.Clid = Persons.ClId

    WHERE 
        (T2.ADb - T2.ACr) <> 0.00 OR
        T2.BDb <> 0.00 OR
        T2.BCr <> 0.00

    ORDER BY AC, Clid

    INTO
        :id, :spid, :ac, :rac, :name,
        :b0,
        :sdb, :scr, :tdb, :tcr,
        :clid, :name1, :regnr, :rname

    do
    begin
        suspend;
    end

end^


ALTER PROCEDURE SP_REP_APGR_10 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8))
RETURNS (
    ID TYPE OF COLUMN ROPS2A.ID,
    SPID TYPE OF COLUMN ROPS2A.SPID,
    AC TYPE OF COLUMN ROPS2A.AC,
    RAC TYPE OF COLUMN ROPS2A.RAC,
    NAME TYPE OF COLUMN ROPS2A.NAME,
    B0 TYPE OF COLUMN ROPS2A.B0,
    SDB TYPE OF COLUMN ROPS2A.SDB,
    SCR TYPE OF COLUMN ROPS2A.SCR,
    TDB TYPE OF COLUMN ROPS2A.TDB,
    TCR TYPE OF COLUMN ROPS2A.TCR,
    CLID TYPE OF COLUMN ROPS2A.CLID,
    NAME1 TYPE OF COLUMN ROPS2A.NAME1,
    REGNR TYPE OF COLUMN ROPS2A.REGNR,
    RNAME TYPE OF COLUMN ROPS2A.RNAME)
AS
begin
    FOR SELECT
        gen_id(GEN_ROPS2A_ID, 1) as ID,
        current_connection as SPID,
        :PAC as AC,
        null as RAC,
        acp21.name as NAME,
        0 as b0,
        coalesce(T2.ADb, 0.00) as sdb,
        coalesce(T2.ACr, 0.00) as scr,
        coalesce(T2.BDb, 0.00) as tdb,
        coalesce(T2.BCr, 0.00) as tcr,
        null as clid,
        null as name1,
        null as regnr,
        null as rname
    FROM
    (
        SELECT SUM(SDb) AS ADb, SUM(SCr) AS ACr, SUM(TDb) AS BDb, SUM(TCr) AS BCr
        FROM
        (
            SELECT 
                OPS.AC11 AS AC,
                CASE
                    WHEN OPSd.Dete < :sdt THEN OPS.Summ
                    ELSE 0.00
                END as SDb,
                0.00 as SCr,
                CASE
                    WHEN OPSd.Dete >= :sdt THEN OPS.Summ
                    ELSE 0.00
                END as TDb,
                0.00 as TCr

            FROM OPSd JOIN OPS ON OPSd.id = OPS.DocId
            WHERE OPSd.Dete <= :edt AND OPS.AC11 LIKE :pac

            UNION ALL

            SELECT 
                OPS.AC21 AS AC,
                0.00 as SDb,
                CASE
                    WHEN OPSd.Dete < :sdt THEN OPS.Summ
                    ELSE 0.00
                END as SCr,
                0.00 as TDb,
                CASE
                    WHEN OPSd.Dete >= :sdt THEN OPS.Summ
                    ELSE 0.00
                END as TCr

            FROM OPSd JOIN OPS ON OPSd.id = OPS.DocId
            WHERE OPSd.Dete <= :edt AND OPS.AC21 LIKE :pac

            UNION ALL

            SELECT 
                Bal0.AC11 AS AC,
                Bal0.SummD AS SDb,
                Bal0.SummC AS SCr,
                0.00 AS TDb,
                0.00 AS TCr
            FROM Bal0
            WHERE Bal0.AC11 LIKE :pac

        ) AS T1

    ) AS T2
    LEFT JOIN AcP21 ON :pac = AcP21.AC

    INTO
        :id, :spid, :ac, :rac, :name,
        :b0,
        :sdb, :scr, :tdb, :tcr,
        :clid, :name1, :regnr, :rname

    do
    begin
        suspend;
    end

end^


ALTER PROCEDURE SP_REP_APGR_10_CLID (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15))
RETURNS (
    ID TYPE OF COLUMN ROPS2A.ID,
    SPID TYPE OF COLUMN ROPS2A.SPID,
    AC TYPE OF COLUMN ROPS2A.AC,
    RAC TYPE OF COLUMN ROPS2A.RAC,
    NAME TYPE OF COLUMN ROPS2A.NAME,
    B0 TYPE OF COLUMN ROPS2A.B0,
    SDB TYPE OF COLUMN ROPS2A.SDB,
    SCR TYPE OF COLUMN ROPS2A.SCR,
    TDB TYPE OF COLUMN ROPS2A.TDB,
    TCR TYPE OF COLUMN ROPS2A.TCR,
    CLID TYPE OF COLUMN ROPS2A.CLID,
    NAME1 TYPE OF COLUMN ROPS2A.NAME1,
    REGNR TYPE OF COLUMN ROPS2A.REGNR,
    RNAME TYPE OF COLUMN ROPS2A.RNAME)
AS
begin
    FOR SELECT
        gen_id(GEN_ROPS2A_ID, 1) as ID,
        current_connection as SPID,
        T2.AC as AC,
        null as RAC,
        acp21.name as NAME,
        0 as b0,
        T2.ADb as sdb,
        T2.ACr as scr,
        T2.BDb as tdb,
        T2.BCr as tcr,
        T2.Clid as clid,
        Persons.Name as name1,
        Persons.regnr as regnr,
        null as rname
    FROM
    (
        SELECT T1.AC, T1.clid, SUM(SDb) AS ADb, SUM(SCr) AS ACr, SUM(TDb) AS BDb, SUM(TCr) AS BCr
        FROM
        (
            SELECT 
                OPS.AC11 AS AC,
                OPSd.ClId AS Clid,
                CASE
                    WHEN OPSd.Dete < :sdt THEN OPS.Summ
                    ELSE 0.00
                END as SDb,
                0.00 as SCr,
                CASE
                    WHEN OPSd.Dete >= :sdt THEN OPS.Summ
                    ELSE 0.00
                END as TDb,
                0.00 as TCr

            FROM OPSd JOIN OPS ON OPSd.id = OPS.DocId
            WHERE
                OPSd.Dete <= :edt AND
                OPS.AC11 LIKE :pac AND
                (:pclid IS NULL OR OPSd.ClId = :pclid)


            UNION ALL

            SELECT 
                OPS.AC21 AS AC,
                OPSd.ClId AS Clid,
                0.00 as SDb,
                CASE
                    WHEN OPSd.Dete < :sdt THEN OPS.Summ
                    ELSE 0.00
                END as SCr,
                0.00 as TDb,
                CASE
                    WHEN OPSd.Dete >= :sdt THEN OPS.Summ
                    ELSE 0.00
                END as TCr

            FROM OPSd JOIN OPS ON OPSd.id = OPS.DocId
            WHERE
                OPSd.Dete <= :edt AND
                OPS.AC21 LIKE :pac AND
                (:pclid IS NULL OR OPSd.ClId = :pclid)

            UNION ALL

            SELECT 
                Bal0.AC11 AS AC,
                Bal0.ClId AS Clid,
                Bal0.SummD AS SDb,
                Bal0.SummC AS SCr,
                0.00 AS TDb,
                0.00 AS TCr
            FROM Bal0
            WHERE
                Bal0.AC11 LIKE :pac AND
                (:pclid IS NULL OR Bal0.ClId = :pclid)

        ) AS T1
        GROUP BY T1.AC, T1.clid

    ) AS T2
    LEFT JOIN AcP21 ON :pac = AcP21.AC
    LEFT JOIN Persons ON T2.Clid = Persons.ClId

    WHERE 
        (T2.ADb - T2.ACr) <> 0.00 OR
        T2.BDb <> 0.00 OR
        T2.BCr <> 0.00

    ORDER BY AC, Clid

    INTO
        :id, :spid, :ac, :rac, :name,
        :b0,
        :sdb, :scr, :tdb, :tcr,
        :clid, :name1, :regnr, :rname

    do
    begin
        suspend;
    end

end^


ALTER PROCEDURE SP_REP_APGR_11 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8))
RETURNS (
    ID TYPE OF COLUMN ROPS2A.ID,
    SPID TYPE OF COLUMN ROPS2A.SPID,
    AC TYPE OF COLUMN ROPS2A.AC,
    RAC TYPE OF COLUMN ROPS2A.RAC,
    NAME TYPE OF COLUMN ROPS2A.NAME,
    B0 TYPE OF COLUMN ROPS2A.B0,
    SDB TYPE OF COLUMN ROPS2A.SDB,
    SCR TYPE OF COLUMN ROPS2A.SCR,
    TDB TYPE OF COLUMN ROPS2A.TDB,
    TCR TYPE OF COLUMN ROPS2A.TCR,
    CLID TYPE OF COLUMN ROPS2A.CLID,
    NAME1 TYPE OF COLUMN ROPS2A.NAME1,
    REGNR TYPE OF COLUMN ROPS2A.REGNR,
    RNAME TYPE OF COLUMN ROPS2A.RNAME)
AS
begin
    FOR SELECT
        gen_id(GEN_ROPS2A_ID, 1) as ID,
        current_connection as SPID,
        T2.AC as AC,
        null as RAC,
        acp21.name as NAME,
        T2.ADb - T2.ACr as b0,
        T2.ADb as sdb,
        T2.ACr as scr,
        T2.BDb as tdb,
        T2.BCr as tcr,
        null as clid,
        null as name1,
        null as regnr,
        null as rname
    FROM
    (
        SELECT AC, SUM(SDb) AS ADb, SUM(SCr) AS ACr, SUM(TDb) AS BDb, SUM(TCr) AS BCr
        FROM
        (
            SELECT 
                OPS.AC11 AS AC,
                CASE
                    WHEN OPSd.Dete < :sdt THEN OPS.Summ
                    ELSE 0.00
                END as SDb,
                0.00 as SCr,
                CASE
                    WHEN OPSd.Dete >= :sdt THEN OPS.Summ
                    ELSE 0.00
                END as TDb,
                0.00 as TCr

            FROM OPSd JOIN OPS ON OPSd.id = OPS.DocId
            WHERE OPSd.Dete <= :edt AND OPS.AC11 LIKE :pac

            UNION ALL

            SELECT 
                OPS.AC21 AS AC,
                0.00 as SDb,
                CASE
                    WHEN OPSd.Dete < :sdt THEN OPS.Summ
                    ELSE 0.00
                END as SCr,
                0.00 as TDb,
                CASE
                    WHEN OPSd.Dete >= :sdt THEN OPS.Summ
                    ELSE 0.00
                END as TCr

            FROM OPSd JOIN OPS ON OPSd.id = OPS.DocId
            WHERE OPSd.Dete <= :edt AND OPS.AC21 LIKE :pac

            UNION ALL

            SELECT 
                Bal0.AC11 AS AC,
                Bal0.SummD AS SDb,
                Bal0.SummC AS SCr,
                0.00 AS TDb,
                0.00 AS TCr
            FROM Bal0
            WHERE Bal0.AC11 LIKE :pac

        ) AS T1
        GROUP BY AC

    ) AS T2
    LEFT JOIN AcP21 ON T2.AC = AcP21.AC

    WHERE 
        (T2.ADb - T2.ACr) <> 0.00 OR
        T2.BDb <> 0.00 OR
        T2.BCr <> 0.00

    ORDER BY AC

    INTO
        :id, :spid, :ac, :rac, :name,
        :b0,
        :sdb, :scr, :tdb, :tcr,
        :clid, :name1, :regnr, :rname

    do
    begin
        suspend;
    end

end^


ALTER PROCEDURE SP_REP_APGR_21 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PACLEN INTEGER)
RETURNS (
    ID TYPE OF COLUMN ROPS2A.ID,
    SPID TYPE OF COLUMN ROPS2A.SPID,
    AC TYPE OF COLUMN ROPS2A.AC,
    RAC TYPE OF COLUMN ROPS2A.RAC,
    NAME TYPE OF COLUMN ROPS2A.NAME,
    B0 TYPE OF COLUMN ROPS2A.B0,
    SDB TYPE OF COLUMN ROPS2A.SDB,
    SCR TYPE OF COLUMN ROPS2A.SCR,
    TDB TYPE OF COLUMN ROPS2A.TDB,
    TCR TYPE OF COLUMN ROPS2A.TCR,
    CLID TYPE OF COLUMN ROPS2A.CLID,
    NAME1 TYPE OF COLUMN ROPS2A.NAME1,
    REGNR TYPE OF COLUMN ROPS2A.REGNR,
    RNAME TYPE OF COLUMN ROPS2A.RNAME)
AS
begin
    FOR SELECT
        gen_id(GEN_ROPS2A_ID, 1) as ID,
        current_connection as SPID,
        T2.AC as AC,
        null as RAC,
        acp21.name as NAME,
        T2.ADb - T2.ACr as b0,
        T2.ADb as sdb,
        T2.ACr as scr,
        T2.BDb as tdb,
        T2.BCr as tcr,
        null as clid,
        null as name1,
        null as regnr,
        null as rname
    FROM
    (
        SELECT AC, SUM(SDb) AS ADb, SUM(SCr) AS ACr, SUM(TDb) AS BDb, SUM(TCr) AS BCr
        FROM
        (
            SELECT 
                LEFT(OPS.AC11, :paclen) AS AC,
                CASE
                    WHEN OPSd.Dete < :sdt THEN OPS.Summ
                    ELSE 0.00
                END as SDb,
                0.00 as SCr,
                CASE
                    WHEN OPSd.Dete >= :sdt THEN OPS.Summ
                    ELSE 0.00
                END as TDb,
                0.00 as TCr

            FROM OPSd JOIN OPS ON OPSd.id = OPS.DocId
            WHERE OPSd.Dete <= :edt AND OPS.AC11 LIKE :pac

            UNION ALL

            SELECT 
                LEFT(OPS.AC21, :paclen) AS AC,
                0.00 as SDb,
                CASE
                    WHEN OPSd.Dete < :sdt THEN OPS.Summ
                    ELSE 0.00
                END as SCr,
                0.00 as TDb,
                CASE
                    WHEN OPSd.Dete >= :sdt THEN OPS.Summ
                    ELSE 0.00
                END as TCr

            FROM OPSd JOIN OPS ON OPSd.id = OPS.DocId
            WHERE OPSd.Dete <= :edt AND OPS.AC21 LIKE :pac

            UNION ALL

            SELECT 
                LEFT(Bal0.AC11, :paclen) AS AC,
                Bal0.SummD AS SDb,
                Bal0.SummC AS SCr,
                0.00 AS TDb,
                0.00 AS TCr
            FROM Bal0
            WHERE Bal0.AC11 LIKE :pac

        ) AS T1
        GROUP BY AC

    ) AS T2
    LEFT JOIN AcP21 ON T2.AC = AcP21.AC

    WHERE 
        (T2.ADb - T2.ACr) <> 0.00 OR
        T2.BDb <> 0.00 OR
        T2.BCr <> 0.00

    ORDER BY AC

    INTO
        :id, :spid, :ac, :rac, :name,
        :b0,
        :sdb, :scr, :tdb, :tcr,
        :clid, :name1, :regnr, :rname

    do
    begin
        suspend;
    end

end^


ALTER PROCEDURE SP_REP_APGR_CUR_01 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCUR VARCHAR(3))
RETURNS (
    ID TYPE OF COLUMN ROPS2A.ID,
    SPID TYPE OF COLUMN ROPS2A.SPID,
    AC TYPE OF COLUMN ROPS2A.AC,
    RAC TYPE OF COLUMN ROPS2A.RAC,
    NAME TYPE OF COLUMN ROPS2A.NAME,
    B0 TYPE OF COLUMN ROPS2A.B0,
    SDB TYPE OF COLUMN ROPS2A.SDB,
    SCR TYPE OF COLUMN ROPS2A.SCR,
    TDB TYPE OF COLUMN ROPS2A.TDB,
    TCR TYPE OF COLUMN ROPS2A.TCR,
    CLID TYPE OF COLUMN ROPS2A.CLID,
    NAME1 TYPE OF COLUMN ROPS2A.NAME1,
    REGNR TYPE OF COLUMN ROPS2A.REGNR,
    RNAME TYPE OF COLUMN ROPS2A.RNAME)
AS
begin
    FOR SELECT
        gen_id(GEN_ROPS2A_ID, 1) as ID,
        current_connection as SPID,
        T2.AC as AC,
        null as RAC,
        acp21.name as NAME,
        T2.ADb - T2.ACr as b0,
        T2.ADb as sdb,
        T2.ACr as scr,
        T2.BDb as tdb,
        T2.BCr as tcr,
        null as clid,
        null as name1,
        null as regnr,
        null as rname
    FROM
    (
        SELECT AC, SUM(SDb) AS ADb, SUM(SCr) AS ACr, SUM(TDb) AS BDb, SUM(TCr) AS BCr
        FROM
        (
            SELECT 
                OPS.AC11 AS AC,
                CASE
                    WHEN OPSd.Dete < :sdt THEN OPS.Summ
                    ELSE 0.00
                END as SDb,
                0.00 as SCr,
                CASE
                    WHEN OPSd.Dete >= :sdt THEN OPS.Summ
                    ELSE 0.00
                END as TDb,
                0.00 as TCr

            FROM OPSd JOIN OPS ON OPSd.id = OPS.DocId
            WHERE
                OPSd.Dete <= :edt AND
                OPS.AC11 = :pac AND
                OPS.Cur = :pcur

            UNION ALL

            SELECT 
                OPS.AC21 AS AC,
                0.00 as SDb,
                CASE
                    WHEN OPSd.Dete < :sdt THEN OPS.Summ
                    ELSE 0.00
                END as SCr,
                0.00 as TDb,
                CASE
                    WHEN OPSd.Dete >= :sdt THEN OPS.Summ
                    ELSE 0.00
                END as TCr

            FROM OPSd JOIN OPS ON OPSd.id = OPS.DocId
            WHERE
                OPSd.Dete <= :edt AND
                OPS.AC21 = :pac AND
                OPS.Cur = :pcur

            UNION ALL

            SELECT 
                Bal0.AC11 AS AC,
                Bal0.SummD AS SDb,
                Bal0.SummC AS SCr,
                0.00 AS TDb,
                0.00 AS TCr
            FROM Bal0
            WHERE Bal0.AC11 = :pac AND Bal0.Cur = :pcur

        ) AS T1
        GROUP BY AC

    ) AS T2
    LEFT JOIN AcP21 ON T2.AC = AcP21.AC

    WHERE 
        (T2.ADb - T2.ACr) <> 0.00 OR
        T2.BDb <> 0.00 OR
        T2.BCr <> 0.00

    ORDER BY AC

    INTO
        :id, :spid, :ac, :rac, :name,
        :b0,
        :sdb, :scr, :tdb, :tcr,
        :clid, :name1, :regnr, :rname

    do
    begin
        suspend;
    end

end^


ALTER PROCEDURE SP_REP_APGR_CUR_01_CLID (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(8),
    PCUR VARCHAR(3))
RETURNS (
    ID TYPE OF COLUMN ROPS2A.ID,
    SPID TYPE OF COLUMN ROPS2A.SPID,
    AC TYPE OF COLUMN ROPS2A.AC,
    RAC TYPE OF COLUMN ROPS2A.RAC,
    NAME TYPE OF COLUMN ROPS2A.NAME,
    B0 TYPE OF COLUMN ROPS2A.B0,
    SDB TYPE OF COLUMN ROPS2A.SDB,
    SCR TYPE OF COLUMN ROPS2A.SCR,
    TDB TYPE OF COLUMN ROPS2A.TDB,
    TCR TYPE OF COLUMN ROPS2A.TCR,
    CLID TYPE OF COLUMN ROPS2A.CLID,
    NAME1 TYPE OF COLUMN ROPS2A.NAME1,
    REGNR TYPE OF COLUMN ROPS2A.REGNR,
    RNAME TYPE OF COLUMN ROPS2A.RNAME)
AS
begin
    FOR SELECT
        gen_id(GEN_ROPS2A_ID, 1) as ID,
        current_connection as SPID,
        T2.AC as AC,
        null as RAC,
        acp21.name as NAME,
        T2.ADb - T2.ACr as b0,
        T2.ADb as sdb,
        T2.ACr as scr,
        T2.BDb as tdb,
        T2.BCr as tcr,
        T2.Clid as clid,
        Persons.Name as name1,
        Persons.regnr as regnr,
        null as rname
    FROM
    (
        SELECT AC, T1.Clid AS Clid, SUM(SDb) AS ADb, SUM(SCr) AS ACr, SUM(TDb) AS BDb, SUM(TCr) AS BCr
        FROM
        (
            SELECT 
                OPS.AC11 AS AC,
                OPSd.ClId AS Clid,
                CASE
                    WHEN OPSd.Dete < :sdt THEN OPS.Summ
                    ELSE 0.00
                END as SDb,
                0.00 as SCr,
                CASE
                    WHEN OPSd.Dete >= :sdt THEN OPS.Summ
                    ELSE 0.00
                END as TDb,
                0.00 as TCr

            FROM OPSd JOIN OPS ON OPSd.id = OPS.DocId
            WHERE
                OPSd.Dete <= :edt AND
                OPS.AC11 LIKE :pac AND
                OPS.Cur = :pcur AND
                (:pclid IS NULL OR OPSd.ClId = :pclid)

            UNION ALL

            SELECT 
                OPS.AC21 AS AC,
                OPSd.ClId AS Clid,
                0.00 as SDb,
                CASE
                    WHEN OPSd.Dete < :sdt THEN OPS.Summ
                    ELSE 0.00
                END as SCr,
                0.00 as TDb,
                CASE
                    WHEN OPSd.Dete >= :sdt THEN OPS.Summ
                    ELSE 0.00
                END as TCr

            FROM OPSd JOIN OPS ON OPSd.id = OPS.DocId
            WHERE
                OPSd.Dete <= :edt AND
                OPS.AC21 = :pac AND
                OPS.Cur = :pcur AND
                (:pclid IS NULL OR OPSd.ClId = :pclid)

            UNION ALL

            SELECT 
                Bal0.AC11 AS AC,
                Bal0.ClId AS Clid,
                Bal0.SummD AS SDb,
                Bal0.SummC AS SCr,
                0.00 AS TDb,
                0.00 AS TCr
            FROM Bal0
            WHERE
                Bal0.AC11 = :pac AND
                Bal0.Cur = :pcur AND
                (:pclid IS NULL OR Bal0.ClId = :pclid)

        ) AS T1
        GROUP BY AC, T1.Clid

    ) AS T2
    LEFT JOIN AcP21 ON T2.AC = AcP21.AC
    LEFT JOIN Persons ON T2.Clid = Persons.ClId

    WHERE 
        (T2.ADb - T2.ACr) <> 0.00 OR
        T2.BDb <> 0.00 OR
        T2.BCr <> 0.00

    ORDER BY AC

    INTO
        :id, :spid, :ac, :rac, :name,
        :b0,
        :sdb, :scr, :tdb, :tcr,
        :clid, :name1, :regnr, :rname

    do
    begin
        suspend;
    end

end^


ALTER PROCEDURE SP_REP_APGR_DZ_11 (
    SDT DATE,
    EDT DATE)
RETURNS (
    ID TYPE OF COLUMN ROPS3A.ID,
    SPID TYPE OF COLUMN ROPS3A.SPID,
    RAC TYPE OF COLUMN ROPS3A.RAC,
    NAME TYPE OF COLUMN ROPS3A.NAME,
    SDB TYPE OF COLUMN ROPS3A.SDB,
    SCR TYPE OF COLUMN ROPS3A.SCR,
    AC1 TYPE OF COLUMN ROPS3A.AC1,
    CLID TYPE OF COLUMN ROPS3A.CLID)
AS
begin
    FOR SELECT
        gen_id(GEN_ROPS3A_ID, 1) as id,
        current_connection as spid,
        T2.AC AS RAc,
        Acp23.Name AS Name,
        T2.BDb AS SDb,
        T2.BCr AS SCr,
        NULL AS AC1,
        NULL AS Clid

    FROM
    (
        SELECT AC, SUM(TDb) AS BDb, SUM(TCr) AS BCr
        FROM
        (
            SELECT 
                OPS.AC13 AS AC,
                OPS.Summ AS TDb,
                0.00 AS TCr

            FROM OPSd JOIN OPS ON OPSd.id = OPS.DocId
            WHERE 
                OPSd.Dete BETWEEN :sdt AND :edt AND
                OPS.AC13 IS NOT NULL AND
                OPS.AC13 NOT IN ('KA','BA','CN')

            UNION ALL

            SELECT 
                OPS.AC23 AS AC,
                0.00 AS TDb,
                OPS.Summ AS TCr

            FROM OPSd JOIN OPS ON OPSd.id = OPS.DocId
            WHERE 
                OPSd.Dete BETWEEN :sdt AND :edt AND
                OPS.AC23 IS NOT NULL AND
                OPS.AC23 NOT IN ('KA','BA','CN')

        ) AS T1

        GROUP BY T1.AC
    ) AS T2    
    LEFT JOIN Acp23 ON Acp23.idx = T2.AC
    
    ORDER BY RAc

    INTO
        :id, :spid, :rac, :name,
        :sdb, :scr, :ac1, :clid
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_REP_APGR_DZ_12 (
    SDT DATE,
    EDT DATE)
RETURNS (
    ID TYPE OF COLUMN ROPS2A.ID,
    SPID TYPE OF COLUMN ROPS2A.SPID,
    AC TYPE OF COLUMN ROPS2A.AC,
    RAC TYPE OF COLUMN ROPS2A.RAC,
    NAME TYPE OF COLUMN ROPS2A.NAME,
    B0 TYPE OF COLUMN ROPS2A.B0,
    SDB TYPE OF COLUMN ROPS2A.SDB,
    SCR TYPE OF COLUMN ROPS2A.SCR,
    TDB TYPE OF COLUMN ROPS2A.TDB,
    TCR TYPE OF COLUMN ROPS2A.TCR,
    CLID TYPE OF COLUMN ROPS2A.CLID,
    NAME1 TYPE OF COLUMN ROPS2A.NAME1,
    REGNR TYPE OF COLUMN ROPS2A.REGNR,
    RNAME TYPE OF COLUMN ROPS2A.RNAME)
AS
begin
    FOR SELECT
        gen_id(GEN_ROPS2A_ID, 1) as ID,
        current_connection as SPID,
        T2.AC as AC,
        null as RAC,
        acp23.name as NAME,
        T2.ADb - T2.ACr as b0,
        T2.ADb as sdb,
        T2.ACr as scr,
        T2.BDb as tdb,
        T2.BCr as tcr,
        null as clid,
        null as name1,
        null as regnr,
        null as rname
    FROM
    (
        SELECT AC, SUM(SDb) AS ADb, SUM(SCr) AS ACr, SUM(TDb) AS BDb, SUM(TCr) AS BCr
        FROM
        (
            SELECT 
                OPS.AC13 AS AC,
                OPS.Summ AS SDb,
                0.00 AS SCr,
                0.00 AS TDb,
                0.00 AS TCr

            FROM OPSd JOIN OPS ON OPSd.id = OPS.DocId
            WHERE 
                OPSd.Dete < :sdt AND
                OPS.AC13 IN ('KA', 'BA', 'CN')

            UNION ALL

            SELECT 
                OPS.AC23 AS AC,
                0.00 AS SDb,
                OPS.Summ AS SCr,
                0.00 AS TDb,
                0.00 AS TCr

            FROM OPSd JOIN OPS ON OPSd.id = OPS.DocId
            WHERE 
                OPSd.Dete < :sdt AND
                OPS.AC23 IN ('KA', 'BA', 'CN')

            UNION ALL

            SELECT 
                OPS.AC13 AS AC,
                0.00 AS SDb,
                0.00 AS SCr,
                OPS.Summ AS TDb,
                0.00 AS TCr

            FROM OPSd JOIN OPS ON OPSd.id = OPS.DocId
            WHERE 
                OPSd.Dete BETWEEN :sdt AND :edt AND 
                OPS.AC13 IN ('KA', 'BA', 'CN')

            UNION ALL

            SELECT 
                OPS.AC23 AS AC,
                0.00 AS SDb,
                0.00 AS SCr,
                0.00 AS TDb,
                OPS.Summ AS TCr

            FROM OPSd JOIN OPS ON OPSd.id = OPS.DocId
            WHERE 
                OPSd.Dete BETWEEN :sdt AND :edt AND 
                OPS.AC23 IN ('KA', 'BA', 'CN')
            
            UNION ALL

            
            SELECT 
                AcP21.id1 AS AC,
                Bal0.SummD AS SDb,
                Bal0.SummC AS SCr,
                0.00 AS TDb,
                0.00 AS TCr

            FROM Bal0 JOIN AcP21 ON Bal0.AC11 = AcP21.AC
            WHERE AcP21.id1 IN ('KA', 'BA', 'CN')

        ) AS T1

        GROUP BY T1.AC
    ) AS T2    

    LEFT JOIN Acp23 ON Acp23.idx = T2.AC
    
    ORDER BY AC

    into
        :id, :spid, :ac, :rac, :name,
        :b0,
        :sdb, :scr, :tdb, :tcr,
        :clid, :name1, :regnr, :rname
    do
    begin
        suspend;
    end

end^


ALTER PROCEDURE SP_REP_APGR_FULL_11 (
    SDT DATE,
    EDT DATE,
    PAC1 VARCHAR(8),
    PAC2 VARCHAR(8),
    PAC3 VARCHAR(5),
    PAC4 VARCHAR(8),
    PAC5 VARCHAR(5),
    PCLID VARCHAR(15),
    PXAC1 INTEGER,
    PXAC2 INTEGER,
    PXAC3 INTEGER,
    PXAC4 INTEGER,
    PXAC5 INTEGER,
    PXCLID INTEGER)
RETURNS (
    ID TYPE OF COLUMN TREPAPAN.ID,
    SPID TYPE OF COLUMN TREPAPAN.SPID,
    AC1 TYPE OF COLUMN TREPAPAN.AC1,
    AC2 TYPE OF COLUMN TREPAPAN.AC2,
    AC3 TYPE OF COLUMN TREPAPAN.AC3,
    AC4 TYPE OF COLUMN TREPAPAN.AC4,
    AC5 TYPE OF COLUMN TREPAPAN.AC5,
    CL TYPE OF COLUMN TREPAPAN.CL,
    S1 TYPE OF COLUMN TREPAPAN.S1,
    S2 TYPE OF COLUMN TREPAPAN.S2,
    S3 TYPE OF COLUMN TREPAPAN.S3,
    S4 TYPE OF COLUMN TREPAPAN.S4)
AS
begin
    FOR SELECT
        gen_id(gen_trepapan_id, 1) AS ID,
        current_connection AS spid,
        T3.AC1 AS AC1,
        T3.AC2 AS AC2,
        T3.AC3 AS AC3,
        T3.AC4 AS AC4,
        T3.AC5 AS AC5,
        T3.CL AS CL,
        T3.SS1 AS S1,
        T3.SS2 AS S2,
        T3.SS3 AS s3,
        T3.SS4 AS s4
    FROM
    (
        SELECT 
            AC1, AC2, AC3, AC4, AC5, CL,
            SUM(SS1) AS SS1, SUM(SS2) AS SS2, SUM(SS3) AS SS3, SUM(SS4) AS SS4
        FROM
        (
            SELECT 
                CASE WHEN :pxac1 = 1 THEN T1.AC1 ELSE NULL END AS AC1,
                CASE WHEN :pxac2 = 1 THEN T1.AC2 ELSE NULL END AS AC2,
                CASE WHEN :pxac3 = 1 THEN T1.AC3 ELSE NULL END AS AC3,
                CASE WHEN :pxac4 = 1 THEN T1.AC4 ELSE NULL END AS AC4,
                CASE WHEN :pxac5 = 1 THEN T1.AC5 ELSE NULL END AS AC5,
                CASE WHEN :pxclid = 1 THEN T1.CL ELSE NULL END AS CL,
                SUM(S1) AS SS1, SUM(S2) AS SS2, SUM(s3) AS SS3, SUM(s4) AS SS4
            FROM
            (
                SELECT 
                    OPS.AC11 AS AC1,
                    OPS.AC12 AS AC2,
                    OPS.AC13 AS AC3,
                    OPS.AC14 AS AC4,
                    OPS.AC15 AS AC5,
                    OPSd.ClId AS CL,
                    OPS.Summ AS S1,
                    0.00 AS S2,
                    coalesce(OPS.QV, 0.00) AS s3,
                    0.00 AS S4

                FROM OPSd JOIN OPS ON OPSd.id = OPS.DocId
                WHERE 
                    OPSd.Dete BETWEEN :sdt AND :edt AND 
                    (:pac1 IS NULL OR OPS.AC11 LIKE :pac1) AND
                    (:pac2 IS NULL OR OPS.AC12 LIKE :pac2) AND
                    (:pac3 IS NULL OR OPS.AC13 LIKE :pac3) AND
                    (:pac4 IS NULL OR OPS.AC14 LIKE :pac4) AND
                    (:pac5 IS NULL OR OPS.AC15 LIKE :pac5) AND
                    (:pclid IS NULL OR OPSd.ClId = :pclid)

                UNION ALL

                SELECT 
                    OPS.AC21 AS AC1,
                    OPS.AC22 AS AC2,
                    OPS.AC23 AS AC3,
                    OPS.AC24 AS AC4,
                    OPS.AC25 AS AC5,
                    OPSd.ClId AS CL,
                    0.00 AS S1,
                    OPS.Summ AS S2,
                    0.00 AS S3,
                    coalesce(OPS.QV, 0.00) AS s4

                FROM OPSd JOIN OPS ON OPSd.id = OPS.DocId
                WHERE 
                    OPSd.Dete BETWEEN :sdt AND :edt AND 
                    (:pac1 IS NULL OR OPS.AC21 LIKE :pac1) AND
                    (:pac2 IS NULL OR OPS.AC22 LIKE :pac2) AND
                    (:pac3 IS NULL OR OPS.AC23 LIKE :pac3) AND
                    (:pac4 IS NULL OR OPS.AC24 LIKE :pac4) AND
                    (:pac5 IS NULL OR OPS.AC25 LIKE :pac5) AND
                    (:pclid IS NULL OR OPSd.ClId = :pclid)

            ) AS T1
            GROUP BY T1.AC1, T1.AC2, T1.AC3, T1.AC4, T1.AC5, T1.CL

        )AS T2
        GROUP BY T2.AC1, T2.AC2, T2.AC3, T2.AC4, T2.AC5, T2.CL

    ) AS T3    
    ORDER BY AC1, AC2, AC3, AC4, AC5, CL

    into
        :id, :spid, :ac1, :ac2, :ac3, :ac4, :ac5,
        :cl, :s1, :s2, :s3, :s4
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_REP_APGR_FULL_12 (
    SDT DATE,
    EDT DATE,
    PAC1 VARCHAR(8),
    PAC2 VARCHAR(8),
    PAC3 VARCHAR(5),
    PAC4 VARCHAR(8),
    PAC5 VARCHAR(5),
    PCLID VARCHAR(15))
RETURNS (
    ID TYPE OF COLUMN TREPAPAN.ID,
    SPID TYPE OF COLUMN TREPAPAN.SPID,
    AC1 TYPE OF COLUMN TREPAPAN.AC1,
    AC2 TYPE OF COLUMN TREPAPAN.AC2,
    AC3 TYPE OF COLUMN TREPAPAN.AC3,
    AC4 TYPE OF COLUMN TREPAPAN.AC4,
    AC5 TYPE OF COLUMN TREPAPAN.AC5,
    CL TYPE OF COLUMN TREPAPAN.CL,
    S1 TYPE OF COLUMN TREPAPAN.S1,
    S2 TYPE OF COLUMN TREPAPAN.S2,
    S3 TYPE OF COLUMN TREPAPAN.S3,
    S4 TYPE OF COLUMN TREPAPAN.S4)
AS
begin
    FOR SELECT
        gen_id(gen_trepapan_id, 1) AS ID,
        current_connection AS spid,
        T2.AC1 AS AC1,
        T2.AC2 AS AC2,
        T2.AC3 AS AC3,
        T2.AC4 AS AC4,
        T2.AC5 AS AC5,
        T2.CL AS CL,
        T2.SS1 AS S1,
        T2.SS2 AS S2,
        T2.SS3 AS s3,
        T2.SS4 AS s4
    FROM
    (
        SELECT
            AC1, AC2, AC3, AC4, AC5, CL,
            SUM(S1) AS SS1, SUM(S2) AS SS2, SUM(s3) AS SS3, SUM(s4) AS SS4
        FROM
        (
            SELECT 
                OPS.AC11 AS AC1,
                OPS.AC12 AS AC2,
                OPS.AC13 AS AC3,
                OPS.AC14 AS AC4,
                OPS.AC15 AS AC5,
                OPSd.ClId AS CL,
                OPS.Summ AS S1,
                0.00 AS S2,
                coalesce(OPS.QV, 0.00) AS s3,
                0.00 AS S4

            FROM OPSd JOIN OPS ON OPSd.id = OPS.DocId
            WHERE 
                OPSd.Dete BETWEEN :sdt AND :edt AND 
                (:pac1 IS NULL OR OPS.AC11 LIKE :pac1) AND
                (:pac2 IS NULL OR OPS.AC12 LIKE :pac2) AND
                (:pac3 IS NULL OR OPS.AC13 LIKE :pac3) AND
                (:pac4 IS NULL OR OPS.AC14 LIKE :pac4) AND
                (:pac5 IS NULL OR OPS.AC15 LIKE :pac5)

            UNION ALL

            SELECT 
                OPS.AC21 AS AC1,
                OPS.AC22 AS AC2,
                OPS.AC23 AS AC3,
                OPS.AC24 AS AC4,
                OPS.AC25 AS AC5,
                OPSd.ClId AS CL,
                0.00 AS S1,
                OPS.Summ AS S2,
                0.00 AS S3,
                coalesce(OPS.QV, 0.00) AS s4

            FROM OPSd JOIN OPS ON OPSd.id = OPS.DocId
            WHERE 
                OPSd.Dete BETWEEN :sdt AND :edt AND 
                (:pac1 IS NULL OR OPS.AC21 LIKE :pac1) AND
                (:pac2 IS NULL OR OPS.AC22 LIKE :pac2) AND
                (:pac3 IS NULL OR OPS.AC23 LIKE :pac3) AND
                (:pac4 IS NULL OR OPS.AC24 LIKE :pac4) AND
                (:pac5 IS NULL OR OPS.AC25 LIKE :pac5)

        ) AS T1

        GROUP BY T1.AC1, T1.AC2, T1.AC3, T1.AC4, T1.AC5, T1.CL
    ) AS T2    
    ORDER BY AC1, AC2, AC3, AC4, AC5, CL

    into
        :id, :spid, :ac1, :ac2, :ac3, :ac4, :ac5,
        :cl, :s1, :s2, :s3, :s4
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_REP_APGR_MT_11 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8))
RETURNS (
    ID TYPE OF COLUMN TREPMT.ID,
    SPID TYPE OF COLUMN TREPMT.SPID,
    AD TYPE OF COLUMN TREPMT.AD,
    AC1 TYPE OF COLUMN TREPMT.AC1,
    AC2 TYPE OF COLUMN TREPMT.AC2,
    ACN1 TYPE OF COLUMN TREPMT.ACN1,
    ACN2 TYPE OF COLUMN TREPMT.ACN2,
    M1 TYPE OF COLUMN TREPMT.M1,
    M2 TYPE OF COLUMN TREPMT.M2,
    M3 TYPE OF COLUMN TREPMT.M3,
    M4 TYPE OF COLUMN TREPMT.M4,
    M5 TYPE OF COLUMN TREPMT.M5,
    M6 TYPE OF COLUMN TREPMT.M6,
    M7 TYPE OF COLUMN TREPMT.M7,
    M8 TYPE OF COLUMN TREPMT.M8,
    M9 TYPE OF COLUMN TREPMT.M9,
    M10 TYPE OF COLUMN TREPMT.M10,
    M11 TYPE OF COLUMN TREPMT.M11,
    M12 TYPE OF COLUMN TREPMT.M12,
    N1 TYPE OF COLUMN TREPMT.N1,
    N2 TYPE OF COLUMN TREPMT.N2,
    N3 TYPE OF COLUMN TREPMT.N3,
    N4 TYPE OF COLUMN TREPMT.N4,
    N5 TYPE OF COLUMN TREPMT.N5,
    N6 TYPE OF COLUMN TREPMT.N6,
    N7 TYPE OF COLUMN TREPMT.N7,
    N8 TYPE OF COLUMN TREPMT.N8,
    N9 TYPE OF COLUMN TREPMT.N9,
    N10 TYPE OF COLUMN TREPMT.N10,
    N11 TYPE OF COLUMN TREPMT.N11,
    N12 TYPE OF COLUMN TREPMT.N12,
    MT TYPE OF COLUMN TREPMT.MT,
    NT TYPE OF COLUMN TREPMT.NT)
AS
begin
    FOR SELECT
        gen_id(GEN_TREPMT_ID, 1) AS id,
        current_connection AS spid,
        null AS ad,
        T3.AC AS AC1,
        null AS AC2,
        AcP21.Name AS ACN1,
        NULL AS ACN2,
        M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12,
        N1,N2,N3,N4,N5,N6,N7,N8,N9,N10,N11,N12,
        0 AS MT, 0 as NT
    FROM
    (
        SELECT 
            AC,
            SUM(CASE WHEN MT = 1 THEN ADb ELSE 0.00 END) AS M1,
            SUM(CASE WHEN MT = 2 THEN ADb ELSE 0.00 END) AS M2,
            SUM(CASE WHEN MT = 3 THEN ADb ELSE 0.00 END) AS M3,
            SUM(CASE WHEN MT = 4 THEN ADb ELSE 0.00 END) AS M4,
            SUM(CASE WHEN MT = 5 THEN ADb ELSE 0.00 END) AS M5,
            SUM(CASE WHEN MT = 6 THEN ADb ELSE 0.00 END) AS M6,
            SUM(CASE WHEN MT = 7 THEN ADb ELSE 0.00 END) AS M7,
            SUM(CASE WHEN MT = 8 THEN ADb ELSE 0.00 END) AS M8,
            SUM(CASE WHEN MT = 9 THEN ADb ELSE 0.00 END) AS M9,
            SUM(CASE WHEN MT = 10 THEN ADb ELSE 0.00 END) AS M10,
            SUM(CASE WHEN MT = 11 THEN ADb ELSE 0.00 END) AS M11,
            SUM(CASE WHEN MT = 12 THEN ADb ELSE 0.00 END) AS M12,
            
            SUM(CASE WHEN MT = 1 THEN ACr ELSE 0.00 END) AS N1,
            SUM(CASE WHEN MT = 2 THEN ACr ELSE 0.00 END) AS N2,
            SUM(CASE WHEN MT = 3 THEN ACr ELSE 0.00 END) AS N3,
            SUM(CASE WHEN MT = 4 THEN ACr ELSE 0.00 END) AS N4,
            SUM(CASE WHEN MT = 5 THEN ACr ELSE 0.00 END) AS N5,
            SUM(CASE WHEN MT = 6 THEN ACr ELSE 0.00 END) AS N6,
            SUM(CASE WHEN MT = 7 THEN ACr ELSE 0.00 END) AS N7,
            SUM(CASE WHEN MT = 8 THEN ACr ELSE 0.00 END) AS N8,
            SUM(CASE WHEN MT = 9 THEN ACr ELSE 0.00 END) AS N9,
            SUM(CASE WHEN MT = 10 THEN ACr ELSE 0.00 END) AS N10,
            SUM(CASE WHEN MT = 11 THEN ACr ELSE 0.00 END) AS N11,
            SUM(CASE WHEN MT = 12 THEN ACr ELSE 0.00 END) AS N12

        FROM
        (
            SELECT AC, MT, SUM(SDb) AS ADb, SUM(SCr) AS ACr
            FROM
            (
                SELECT 
                    OPS.AC11 AS AC,
                    EXTRACT(MONTH FROM OPSd.Dete) AS MT,
                    OPS.Summ AS SDb,
                    0.00 AS SCr

                FROM OPSd JOIN OPS ON OPSd.id = OPS.DocId
                WHERE OPSd.Dete BETWEEN :sdt AND :edt AND OPS.AC11 LIKE :pac

                UNION ALL

                SELECT 
                    OPS.AC21 AS AC,
                    EXTRACT(MONTH FROM OPSd.Dete) AS MT,
                    0.00 AS SDb,
                    OPS.Summ AS SCr

                FROM OPSd JOIN OPS ON OPSd.id = OPS.DocId
                WHERE OPSd.Dete BETWEEN :sdt AND :edt AND OPS.AC21 LIKE :pac

            ) AS T1

            GROUP BY T1.AC, T1.MT

        ) AS T2
        GROUP BY T2.AC
    ) AS T3

    LEFT JOIN AcP21 ON AcP21.AC = T3.AC
    ORDER BY AC1

    into
        id, spid, ad, ac1, ac2, acn1, acn2,
        m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12,
        n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12,
        mt, nt
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_REP_APGR_MT_12 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8))
RETURNS (
    ID TYPE OF COLUMN TREPMT.ID,
    SPID TYPE OF COLUMN TREPMT.SPID,
    AD TYPE OF COLUMN TREPMT.AD,
    AC1 TYPE OF COLUMN TREPMT.AC1,
    AC2 TYPE OF COLUMN TREPMT.AC2,
    ACN1 TYPE OF COLUMN TREPMT.ACN1,
    ACN2 TYPE OF COLUMN TREPMT.ACN2,
    M1 TYPE OF COLUMN TREPMT.M1,
    M2 TYPE OF COLUMN TREPMT.M2,
    M3 TYPE OF COLUMN TREPMT.M3,
    M4 TYPE OF COLUMN TREPMT.M4,
    M5 TYPE OF COLUMN TREPMT.M5,
    M6 TYPE OF COLUMN TREPMT.M6,
    M7 TYPE OF COLUMN TREPMT.M7,
    M8 TYPE OF COLUMN TREPMT.M8,
    M9 TYPE OF COLUMN TREPMT.M9,
    M10 TYPE OF COLUMN TREPMT.M10,
    M11 TYPE OF COLUMN TREPMT.M11,
    M12 TYPE OF COLUMN TREPMT.M12,
    N1 TYPE OF COLUMN TREPMT.N1,
    N2 TYPE OF COLUMN TREPMT.N2,
    N3 TYPE OF COLUMN TREPMT.N3,
    N4 TYPE OF COLUMN TREPMT.N4,
    N5 TYPE OF COLUMN TREPMT.N5,
    N6 TYPE OF COLUMN TREPMT.N6,
    N7 TYPE OF COLUMN TREPMT.N7,
    N8 TYPE OF COLUMN TREPMT.N8,
    N9 TYPE OF COLUMN TREPMT.N9,
    N10 TYPE OF COLUMN TREPMT.N10,
    N11 TYPE OF COLUMN TREPMT.N11,
    N12 TYPE OF COLUMN TREPMT.N12,
    MT TYPE OF COLUMN TREPMT.MT,
    NT TYPE OF COLUMN TREPMT.NT)
AS
begin
    FOR SELECT
        gen_id(GEN_TREPMT_ID, 1) AS id,
        current_connection AS spid,
        null AS ad,
        T3.AC1 AS AC1,
        T3.AC2 AS AC2,
        AcP21.Name AS ACN1,
        AcP24.Name AS ACN2,
        M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12,
        N1,N2,N3,N4,N5,N6,N7,N8,N9,N10,N11,N12,
        0 AS MT, 0 as NT
    FROM
    (
        SELECT 
            AC1, AC2,
            SUM(CASE WHEN MT = 1 THEN ADb ELSE 0.00 END) AS M1,
            SUM(CASE WHEN MT = 2 THEN ADb ELSE 0.00 END) AS M2,
            SUM(CASE WHEN MT = 3 THEN ADb ELSE 0.00 END) AS M3,
            SUM(CASE WHEN MT = 4 THEN ADb ELSE 0.00 END) AS M4,
            SUM(CASE WHEN MT = 5 THEN ADb ELSE 0.00 END) AS M5,
            SUM(CASE WHEN MT = 6 THEN ADb ELSE 0.00 END) AS M6,
            SUM(CASE WHEN MT = 7 THEN ADb ELSE 0.00 END) AS M7,
            SUM(CASE WHEN MT = 8 THEN ADb ELSE 0.00 END) AS M8,
            SUM(CASE WHEN MT = 9 THEN ADb ELSE 0.00 END) AS M9,
            SUM(CASE WHEN MT = 10 THEN ADb ELSE 0.00 END) AS M10,
            SUM(CASE WHEN MT = 11 THEN ADb ELSE 0.00 END) AS M11,
            SUM(CASE WHEN MT = 12 THEN ADb ELSE 0.00 END) AS M12,
            
            SUM(CASE WHEN MT = 1 THEN ACr ELSE 0.00 END) AS N1,
            SUM(CASE WHEN MT = 2 THEN ACr ELSE 0.00 END) AS N2,
            SUM(CASE WHEN MT = 3 THEN ACr ELSE 0.00 END) AS N3,
            SUM(CASE WHEN MT = 4 THEN ACr ELSE 0.00 END) AS N4,
            SUM(CASE WHEN MT = 5 THEN ACr ELSE 0.00 END) AS N5,
            SUM(CASE WHEN MT = 6 THEN ACr ELSE 0.00 END) AS N6,
            SUM(CASE WHEN MT = 7 THEN ACr ELSE 0.00 END) AS N7,
            SUM(CASE WHEN MT = 8 THEN ACr ELSE 0.00 END) AS N8,
            SUM(CASE WHEN MT = 9 THEN ACr ELSE 0.00 END) AS N9,
            SUM(CASE WHEN MT = 10 THEN ACr ELSE 0.00 END) AS N10,
            SUM(CASE WHEN MT = 11 THEN ACr ELSE 0.00 END) AS N11,
            SUM(CASE WHEN MT = 12 THEN ACr ELSE 0.00 END) AS N12

        FROM
        (
            SELECT AC1, AC2, MT, SUM(SDb) AS ADb, SUM(SCr) AS ACr
            FROM
            (
                SELECT 
                    OPS.AC11 AS AC1,
                    OPS.AC14 AS AC2,
                    EXTRACT(MONTH FROM OPSd.Dete) AS MT,
                    OPS.Summ AS SDb,
                    0.00 AS SCr

                FROM OPSd JOIN OPS ON OPSd.id = OPS.DocId
                WHERE OPSd.Dete BETWEEN :sdt AND :edt AND OPS.AC11 LIKE :pac

                UNION ALL

                SELECT 
                    OPS.AC21 AS AC,
                    OPS.AC24 AS AC2,
                    EXTRACT(MONTH FROM OPSd.Dete) AS MT,
                    0.00 AS SDb,
                    OPS.Summ AS SCr

                FROM OPSd JOIN OPS ON OPSd.id = OPS.DocId
                WHERE OPSd.Dete BETWEEN :sdt AND :edt AND OPS.AC21 LIKE :pac

            ) AS T1

            GROUP BY T1.AC2, T1.AC1, T1.MT

        ) AS T2
        GROUP BY T2.AC2, T2.AC1
    ) AS T3

    LEFT JOIN AcP21 ON AcP21.AC = T3.AC1
    LEFT JOIN AcP24 ON AcP24.idx = T3.AC2

    ORDER BY AC2, AC1

    into
        id, spid, ad, ac1, ac2, acn1, acn2,
        m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12,
        n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12,
        mt, nt
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_REP_APGR_MT_21 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8))
RETURNS (
    ID TYPE OF COLUMN TREPMT.ID,
    SPID TYPE OF COLUMN TREPMT.SPID,
    AD TYPE OF COLUMN TREPMT.AD,
    AC1 TYPE OF COLUMN TREPMT.AC1,
    AC2 TYPE OF COLUMN TREPMT.AC2,
    ACN1 TYPE OF COLUMN TREPMT.ACN1,
    ACN2 TYPE OF COLUMN TREPMT.ACN2,
    M1 TYPE OF COLUMN TREPMT.M1,
    M2 TYPE OF COLUMN TREPMT.M2,
    M3 TYPE OF COLUMN TREPMT.M3,
    M4 TYPE OF COLUMN TREPMT.M4,
    M5 TYPE OF COLUMN TREPMT.M5,
    M6 TYPE OF COLUMN TREPMT.M6,
    M7 TYPE OF COLUMN TREPMT.M7,
    M8 TYPE OF COLUMN TREPMT.M8,
    M9 TYPE OF COLUMN TREPMT.M9,
    M10 TYPE OF COLUMN TREPMT.M10,
    M11 TYPE OF COLUMN TREPMT.M11,
    M12 TYPE OF COLUMN TREPMT.M12,
    N1 TYPE OF COLUMN TREPMT.N1,
    N2 TYPE OF COLUMN TREPMT.N2,
    N3 TYPE OF COLUMN TREPMT.N3,
    N4 TYPE OF COLUMN TREPMT.N4,
    N5 TYPE OF COLUMN TREPMT.N5,
    N6 TYPE OF COLUMN TREPMT.N6,
    N7 TYPE OF COLUMN TREPMT.N7,
    N8 TYPE OF COLUMN TREPMT.N8,
    N9 TYPE OF COLUMN TREPMT.N9,
    N10 TYPE OF COLUMN TREPMT.N10,
    N11 TYPE OF COLUMN TREPMT.N11,
    N12 TYPE OF COLUMN TREPMT.N12,
    MT TYPE OF COLUMN TREPMT.MT,
    NT TYPE OF COLUMN TREPMT.NT)
AS
begin
-- Mx - debeta summa, Nx - daudzums
    FOR SELECT
        gen_id(GEN_TREPMT_ID, 1) AS id,
        current_connection AS spid,
        null AS ad,
        T3.AC1 AS AC1,
        T3.AC2 AS AC2,
        AcP21.Name AS ACN1,
        AcP24.Name AS ACN2,
        M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12,
        N1,N2,N3,N4,N5,N6,N7,N8,N9,N10,N11,N12,
        0 AS MT, 0 as NT
    FROM
    (
        SELECT 
            AC1, AC2,
            SUM(CASE WHEN MT = 1 THEN ADb ELSE 0.00 END) AS M1,
            SUM(CASE WHEN MT = 2 THEN ADb ELSE 0.00 END) AS M2,
            SUM(CASE WHEN MT = 3 THEN ADb ELSE 0.00 END) AS M3,
            SUM(CASE WHEN MT = 4 THEN ADb ELSE 0.00 END) AS M4,
            SUM(CASE WHEN MT = 5 THEN ADb ELSE 0.00 END) AS M5,
            SUM(CASE WHEN MT = 6 THEN ADb ELSE 0.00 END) AS M6,
            SUM(CASE WHEN MT = 7 THEN ADb ELSE 0.00 END) AS M7,
            SUM(CASE WHEN MT = 8 THEN ADb ELSE 0.00 END) AS M8,
            SUM(CASE WHEN MT = 9 THEN ADb ELSE 0.00 END) AS M9,
            SUM(CASE WHEN MT = 10 THEN ADb ELSE 0.00 END) AS M10,
            SUM(CASE WHEN MT = 11 THEN ADb ELSE 0.00 END) AS M11,
            SUM(CASE WHEN MT = 12 THEN ADb ELSE 0.00 END) AS M12,
            
            SUM(CASE WHEN MT = 1 THEN AQV ELSE 0.00 END) AS N1,
            SUM(CASE WHEN MT = 2 THEN AQV ELSE 0.00 END) AS N2,
            SUM(CASE WHEN MT = 3 THEN AQV ELSE 0.00 END) AS N3,
            SUM(CASE WHEN MT = 4 THEN AQV ELSE 0.00 END) AS N4,
            SUM(CASE WHEN MT = 5 THEN AQV ELSE 0.00 END) AS N5,
            SUM(CASE WHEN MT = 6 THEN AQV ELSE 0.00 END) AS N6,
            SUM(CASE WHEN MT = 7 THEN AQV ELSE 0.00 END) AS N7,
            SUM(CASE WHEN MT = 8 THEN AQV ELSE 0.00 END) AS N8,
            SUM(CASE WHEN MT = 9 THEN AQV ELSE 0.00 END) AS N9,
            SUM(CASE WHEN MT = 10 THEN AQV ELSE 0.00 END) AS N10,
            SUM(CASE WHEN MT = 11 THEN AQV ELSE 0.00 END) AS N11,
            SUM(CASE WHEN MT = 12 THEN AQV ELSE 0.00 END) AS N12

        FROM
        (
            SELECT AC1, AC2, MT, SUM(SDb) AS ADb, SUM(SQV) AS AQV
            FROM
            (
                SELECT 
                    OPS.AC11 AS AC1,
                    OPS.AC14 AS AC2,
                    EXTRACT(MONTH FROM OPSd.Dete) AS MT,
                    OPS.Summ AS SDb,
                    coalesce(OPS.QV, 0.00) AS SQV

                FROM OPSd JOIN OPS ON OPSd.id = OPS.DocId
                WHERE OPSd.Dete BETWEEN :sdt AND :edt AND OPS.AC11 LIKE :pac

            ) AS T1

            GROUP BY T1.AC1, T1.AC2, T1.MT

        ) AS T2
        GROUP BY T2.AC1, T2.AC2
    ) AS T3

    LEFT JOIN AcP21 ON AcP21.AC = T3.AC1
    LEFT JOIN AcP24 ON AcP24.idx = T3.AC2

    ORDER BY AC1, AC2

    into
        id, spid, ad, ac1, ac2, acn1, acn2,
        m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12,
        n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12,
        mt, nt
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_REP_APGR_MT_22 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8))
RETURNS (
    ID TYPE OF COLUMN TREPMT.ID,
    SPID TYPE OF COLUMN TREPMT.SPID,
    AD TYPE OF COLUMN TREPMT.AD,
    AC1 TYPE OF COLUMN TREPMT.AC1,
    AC2 TYPE OF COLUMN TREPMT.AC2,
    ACN1 TYPE OF COLUMN TREPMT.ACN1,
    ACN2 TYPE OF COLUMN TREPMT.ACN2,
    M1 TYPE OF COLUMN TREPMT.M1,
    M2 TYPE OF COLUMN TREPMT.M2,
    M3 TYPE OF COLUMN TREPMT.M3,
    M4 TYPE OF COLUMN TREPMT.M4,
    M5 TYPE OF COLUMN TREPMT.M5,
    M6 TYPE OF COLUMN TREPMT.M6,
    M7 TYPE OF COLUMN TREPMT.M7,
    M8 TYPE OF COLUMN TREPMT.M8,
    M9 TYPE OF COLUMN TREPMT.M9,
    M10 TYPE OF COLUMN TREPMT.M10,
    M11 TYPE OF COLUMN TREPMT.M11,
    M12 TYPE OF COLUMN TREPMT.M12,
    N1 TYPE OF COLUMN TREPMT.N1,
    N2 TYPE OF COLUMN TREPMT.N2,
    N3 TYPE OF COLUMN TREPMT.N3,
    N4 TYPE OF COLUMN TREPMT.N4,
    N5 TYPE OF COLUMN TREPMT.N5,
    N6 TYPE OF COLUMN TREPMT.N6,
    N7 TYPE OF COLUMN TREPMT.N7,
    N8 TYPE OF COLUMN TREPMT.N8,
    N9 TYPE OF COLUMN TREPMT.N9,
    N10 TYPE OF COLUMN TREPMT.N10,
    N11 TYPE OF COLUMN TREPMT.N11,
    N12 TYPE OF COLUMN TREPMT.N12,
    MT TYPE OF COLUMN TREPMT.MT,
    NT TYPE OF COLUMN TREPMT.NT)
AS
begin
-- Mx - debeta summa, Nx - daudzums
    FOR SELECT
        gen_id(GEN_TREPMT_ID, 1) AS id,
        current_connection AS spid,
        null AS ad,
        T3.AC1 AS AC1,
        T3.AC2 AS AC2,
        AcP21.Name AS ACN1,
        AcP24.Name AS ACN2,
        M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12,
        N1,N2,N3,N4,N5,N6,N7,N8,N9,N10,N11,N12,
        0 AS MT, 0 as NT
    FROM
    (
        SELECT 
            AC1, AC2,
            SUM(CASE WHEN MT = 1 THEN ADb ELSE 0.00 END) AS M1,
            SUM(CASE WHEN MT = 2 THEN ADb ELSE 0.00 END) AS M2,
            SUM(CASE WHEN MT = 3 THEN ADb ELSE 0.00 END) AS M3,
            SUM(CASE WHEN MT = 4 THEN ADb ELSE 0.00 END) AS M4,
            SUM(CASE WHEN MT = 5 THEN ADb ELSE 0.00 END) AS M5,
            SUM(CASE WHEN MT = 6 THEN ADb ELSE 0.00 END) AS M6,
            SUM(CASE WHEN MT = 7 THEN ADb ELSE 0.00 END) AS M7,
            SUM(CASE WHEN MT = 8 THEN ADb ELSE 0.00 END) AS M8,
            SUM(CASE WHEN MT = 9 THEN ADb ELSE 0.00 END) AS M9,
            SUM(CASE WHEN MT = 10 THEN ADb ELSE 0.00 END) AS M10,
            SUM(CASE WHEN MT = 11 THEN ADb ELSE 0.00 END) AS M11,
            SUM(CASE WHEN MT = 12 THEN ADb ELSE 0.00 END) AS M12,
            
            SUM(CASE WHEN MT = 1 THEN AQV ELSE 0.00 END) AS N1,
            SUM(CASE WHEN MT = 2 THEN AQV ELSE 0.00 END) AS N2,
            SUM(CASE WHEN MT = 3 THEN AQV ELSE 0.00 END) AS N3,
            SUM(CASE WHEN MT = 4 THEN AQV ELSE 0.00 END) AS N4,
            SUM(CASE WHEN MT = 5 THEN AQV ELSE 0.00 END) AS N5,
            SUM(CASE WHEN MT = 6 THEN AQV ELSE 0.00 END) AS N6,
            SUM(CASE WHEN MT = 7 THEN AQV ELSE 0.00 END) AS N7,
            SUM(CASE WHEN MT = 8 THEN AQV ELSE 0.00 END) AS N8,
            SUM(CASE WHEN MT = 9 THEN AQV ELSE 0.00 END) AS N9,
            SUM(CASE WHEN MT = 10 THEN AQV ELSE 0.00 END) AS N10,
            SUM(CASE WHEN MT = 11 THEN AQV ELSE 0.00 END) AS N11,
            SUM(CASE WHEN MT = 12 THEN AQV ELSE 0.00 END) AS N12

        FROM
        (
            SELECT AC1, AC2, MT, SUM(SDb) AS ADb, SUM(SQV) AS AQV
            FROM
            (
                SELECT 
                    OPS.AC21 AS AC1,
                    OPS.AC24 AS AC2,
                    EXTRACT(MONTH FROM OPSd.Dete) AS MT,
                    OPS.Summ AS SDb,
                    coalesce(OPS.QV, 0.00) AS SQV

                FROM OPSd JOIN OPS ON OPSd.id = OPS.DocId
                WHERE OPSd.Dete BETWEEN :sdt AND :edt AND OPS.AC21 LIKE :pac

            ) AS T1

            GROUP BY T1.AC1, T1.AC2, T1.MT

        ) AS T2
        GROUP BY T2.AC1, T2.AC2
    ) AS T3

    LEFT JOIN AcP21 ON AcP21.AC = T3.AC1
    LEFT JOIN AcP24 ON AcP24.idx = T3.AC2

    ORDER BY AC1, AC2

    into
        id, spid, ad, ac1, ac2, acn1, acn2,
        m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12,
        n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12,
        mt, nt
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_REP_APGR_NP_11 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8))
RETURNS (
    ID TYPE OF COLUMN ROPS2A.ID,
    SPID TYPE OF COLUMN ROPS2A.SPID,
    AC TYPE OF COLUMN ROPS2A.AC,
    RAC TYPE OF COLUMN ROPS2A.RAC,
    NAME TYPE OF COLUMN ROPS2A.NAME,
    B0 TYPE OF COLUMN ROPS2A.B0,
    SDB TYPE OF COLUMN ROPS2A.SDB,
    SCR TYPE OF COLUMN ROPS2A.SCR,
    TDB TYPE OF COLUMN ROPS2A.TDB,
    TCR TYPE OF COLUMN ROPS2A.TCR,
    CLID TYPE OF COLUMN ROPS2A.CLID,
    NAME1 TYPE OF COLUMN ROPS2A.NAME1,
    REGNR TYPE OF COLUMN ROPS2A.REGNR,
    RNAME TYPE OF COLUMN ROPS2A.RNAME)
AS
begin
    FOR SELECT
        gen_id(GEN_ROPS2A_ID, 1) AS id,
        current_connection AS spid,
        T2.AC AS AC,
        NULL AS RAC,
        AcP21.Name AS Name,
        0.00 AS B0,
        0.00 AS SDb,
        0.00 AS SCr,
        T2.BDb AS TDb,
        T2.BCr AS TCr,
        NULL AS Clid,
        NULL AS Name1,
        NULL AS RegNr,
        NULL AS RName
    FROM
    (
        SELECT AC, SUM(TDb) AS BDb, SUM(TCr) AS BCr
        FROM
        (
            SELECT 
                OPS.AC12 AS AC,
                OPS.Summ AS TDb,
                0.00 AS TCr

            FROM OPSd JOIN OPS ON OPSd.id = OPS.DocId
            WHERE OPSd.Dete BETWEEN :sdt AND :edt AND OPS.AC12 LIKE :pac

            UNION ALL

            SELECT 
                OPS.AC22 AS AC,
                0.00 AS TDb,
                OPS.Summ AS TCr

            FROM OPSd JOIN OPS ON OPSd.id = OPS.DocId
            WHERE OPSd.Dete BETWEEN :sdt AND :edt AND OPS.AC22 LIKE :pac

        ) AS T1

        GROUP BY T1.AC
    ) AS T2    

    LEFT JOIN AcP21    ON AcP21.AC = T2.AC
    
    ORDER BY AC

    into
        :id, :spid, :ac, :rac, :name,
        :b0,
        :sdb, :scr, :tdb, :tcr,
        :clid, :name1, :regnr, :rname
    do
    begin
        suspend;
    end

end^


ALTER PROCEDURE SP_REP_APGR_NP_12 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PACLEN INTEGER)
RETURNS (
    ID TYPE OF COLUMN ROPS2A.ID,
    SPID TYPE OF COLUMN ROPS2A.SPID,
    AC TYPE OF COLUMN ROPS2A.AC,
    RAC TYPE OF COLUMN ROPS2A.RAC,
    NAME TYPE OF COLUMN ROPS2A.NAME,
    B0 TYPE OF COLUMN ROPS2A.B0,
    SDB TYPE OF COLUMN ROPS2A.SDB,
    SCR TYPE OF COLUMN ROPS2A.SCR,
    TDB TYPE OF COLUMN ROPS2A.TDB,
    TCR TYPE OF COLUMN ROPS2A.TCR,
    CLID TYPE OF COLUMN ROPS2A.CLID,
    NAME1 TYPE OF COLUMN ROPS2A.NAME1,
    REGNR TYPE OF COLUMN ROPS2A.REGNR,
    RNAME TYPE OF COLUMN ROPS2A.RNAME)
AS
begin
    FOR SELECT
        gen_id(GEN_ROPS2A_ID, 1) AS id,
        current_connection AS spid,
        T2.AC AS AC,
        NULL AS RAC,
        AcP21.Name AS Name,
        0.00 AS B0,
        0.00 AS SDb,
        0.00 AS SCr,
        T2.BDb AS TDb,
        T2.BCr AS TCr,
        NULL AS Clid,
        NULL AS Name1,
        NULL AS RegNr,
        NULL AS RName
    FROM
    (
        SELECT AC, SUM(TDb) AS BDb, SUM(TCr) AS BCr
        FROM
        (
            SELECT 
                LEFT(OPS.AC12, :paclen) AS AC,
                OPS.Summ AS TDb,
                0.00 AS TCr

            FROM OPSd JOIN OPS ON OPSd.id = OPS.DocId
            WHERE OPSd.Dete BETWEEN :sdt AND :edt AND OPS.AC12 LIKE :pac

            UNION ALL

            SELECT 
                LEFT(OPS.AC22, :paclen) AS AC,
                0.00 AS TDb,
                OPS.Summ AS TCr

            FROM OPSd JOIN OPS ON OPSd.id = OPS.DocId
            WHERE OPSd.Dete BETWEEN :sdt AND :edt AND OPS.AC22 LIKE :pac

        ) AS T1

        GROUP BY T1.AC
    ) AS T2    

    LEFT JOIN AcP21    ON AcP21.AC = T2.AC
    
    ORDER BY AC

    into
        :id, :spid, :ac, :rac, :name,
        :b0,
        :sdb, :scr, :tdb, :tcr,
        :clid, :name1, :regnr, :rname
    do
    begin
        suspend;
    end

end^


ALTER PROCEDURE SP_REP_BAL_11 (
    SDT DATE,
    EDT DATE)
RETURNS (
    AC VARCHAR(8),
    S1 MONEY,
    S2 MONEY)
AS
begin
    FOR SELECT
        T2.AC AS AC,
        T2.ADb - T2.ACr AS S1,
        T2.BDb - T2.BCr AS S2
    FROM
    (
        SELECT AC, SUM(SDb) AS ADb, SUM(SCr) AS ACr, SUM(TDb) AS BDb, SUM(TCr) AS BCr
        FROM
        (
            SELECT 
                OPS.AC11 AS AC,
                CASE
                    WHEN OPSd.Dete < :sdt THEN OPS.Summ
                    ELSE 0.00
                END AS SDb,
                0.00 AS SCr,
                CASE
                    WHEN OPSd.Dete >= :sdt THEN OPS.Summ
                    ELSE 0.00
                END AS TDb,
                0.00 AS TCr

            FROM OPSd JOIN OPS ON OPSd.id = OPS.DocId
            WHERE OPSd.Dete <= :edt

            UNION ALL

            SELECT 
                OPS.AC21 AS AC,
                0.00 AS SDb,
                CASE
                    WHEN OPSd.Dete < :sdt THEN OPS.Summ
                    ELSE 0.00
                END AS SCr,
                0.00 AS TDb,
                CASE
                    WHEN OPSd.Dete >= :sdt THEN OPS.Summ
                    ELSE 0.00
                END AS TCr

            FROM OPSd JOIN OPS ON OPSd.id = OPS.DocId
            WHERE OPSd.Dete <= :edt

            UNION ALL

            SELECT 
                Bal0.AC11 AS AC,
                Bal0.SummD AS SDb,
                Bal0.SummC AS SCr,
                0.00 AS TDb,
                0.00 AS TCr
            FROM Bal0

        ) AS T1

        GROUP BY T1.AC
    ) AS T2    

    WHERE (ADb - ACr) <> 0.00 OR BDb <> 0.00 OR BCr <> 0.00

    ORDER BY AC

    INTO
        :AC, :S1, S2
    DO
    BEGIN
        SUSPEND;
    END
end^


ALTER PROCEDURE SP_REP_BAL_12 (
    SDT DATE,
    EDT DATE,
    PBALID VARCHAR(10))
RETURNS (
    ID TYPE OF COLUMN BALA21.ID,
    SPID TYPE OF COLUMN BALA21.SPID,
    BID TYPE OF COLUMN BALA21.BID,
    S1 TYPE OF COLUMN BALA21.S1,
    S2 TYPE OF COLUMN BALA21.S2)
AS
begin
    INSERT INTO ttemp_balaC (AC, S1, S2)
        SELECT T1.AC, T1.S1, T1.S2
        FROM sp_rep_bal_11(:SDT, :EDT) AS T1;

    INSERT INTO ttemp_BalA21 (bid, S1, S2)
    SELECT 
        BalA2.id AS bid,
        SUM(iif(BalA3.tp = 'Db', T1a.S1, - T1a.S1)) AS s1,
        SUM(iif(BalA3.tp = 'Db', T1a.S2, - T1a.S2)) AS s2
    FROM BalA1
        INNER JOIN BalA2 ON BalA1.balid = BalA2.balid
        INNER JOIN BalA3 ON BalA2.id = BalA3.id2
        INNER JOIN ttemp_balaC AS T1a ON T1a.AC LIKE REPLACE(BalA3.ac,'*','%')
    WHERE
        BalA1.balid = :pbalid AND
        BalA2.tp = 'S'
    GROUP BY BalA2.id;


    INSERT INTO ttemp_BalA21 (bid, S1, S2)
    SELECT 
        BalA2.id AS bid,
        SUM(T2.s1) AS s1,
        SUM(T2.s2) AS s2
    FROM 
        BalA1 
        INNER JOIN BalA2 ON BalA1.balid = BalA2.balid
        INNER JOIN
            (
                SELECT BalA2.nr, ttemp_BalA21.s1, ttemp_BalA21.s2
                FROM BalA2 INNER JOIN ttemp_BalA21 
                    ON ttemp_BalA21.bid = BalA2.id
            ) AS T2
            ON T2.nr BETWEEN BalA2.nr1 AND BalA2.nr2
    WHERE
        BalA1.balid = :pbalid AND
        BalA2.tp = 'K'
    GROUP BY BalA2.id;


    INSERT INTO ttemp_BalA21 (bid, S1, S2)
    SELECT 
        BalA2.id AS bid,
        SUM(T2.s1) AS s1,
        SUM(T2.s2) AS s2
    FROM 
        BalA1 
        INNER JOIN BalA2 ON BalA1.balid = BalA2.balid
        INNER JOIN
            (
                SELECT BalA2.nr, ttemp_BalA21.s1, ttemp_BalA21.s2
                FROM BalA2 INNER JOIN ttemp_BalA21 
                    ON ttemp_BalA21.bid = BalA2.id
            ) AS T2
            ON T2.nr = BalA2.nr1
    WHERE
        BalA1.balid = :pbalid AND
        BalA2.tp = 'V'
    GROUP BY BalA2.id;


    FOR SELECT
        ttemp_BalA21.bid AS id, -- hack
        0 AS spid,
        ttemp_BalA21.bid AS bid,
        ttemp_BalA21.s1 AS s1,
        ttemp_BalA21.s2 AS s2
    FROM ttemp_BalA21
        INNER JOIN BalA2 ON ttemp_BalA21.bid = BalA2.id
    ORDER BY BalA2.nr

    into
        :id, :spid, :bid, :s1, :s2
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_REP_BAL_13 (
    PBALID VARCHAR(10))
RETURNS (
    AC TYPE OF COLUMN ACP21.AC,
    NAME TYPE OF COLUMN ACP21.NAME,
    ID1 TYPE OF COLUMN ACP21.ID1,
    ID2 TYPE OF COLUMN ACP21.ID2)
AS
begin
-- rezult√Ñ¬Åt√Ñ¬Å AcP21.AC, kas netika iesumm√Ñ‚Äúti bilances formul√Ñ¬Ås
    FOR SELECT
        AcP21.AC, null, null, null
    FROM AcP21 LEFT JOIN
    (    
        SELECT DISTINCT AcP21.AC
        FROM BalA1
            INNER JOIN BalA2 ON BalA1.balid = BalA2.balid
            INNER JOIN BalA3 ON BalA2.id = BalA3.id2
            INNER JOIN AcP21 ON AcP21.AC LIKE REPLACE(BalA3.ac,'*','%')
        WHERE
            BalA1.balid = :pbalid AND
            BalA2.tp = 'S'
    ) AS T1 ON AcP21.AC = T1.AC
    WHERE T1.AC IS NULL
    ORDER BY AC
      into :ac, :name, :id1, :id2
  do
  begin
    suspend;
  end
end^


ALTER PROCEDURE SP_REP_BAL_21 (
    SDT DATE,
    EDT DATE)
RETURNS (
    AC VARCHAR(8),
    M0 MONEY,
    M1 MONEY,
    M2 MONEY,
    M3 MONEY,
    M4 MONEY,
    M5 MONEY,
    M6 MONEY,
    M7 MONEY,
    M8 MONEY,
    M9 MONEY,
    M10 MONEY,
    M11 MONEY,
    M12 MONEY)
AS
begin
    FOR SELECT
        AC, M0, M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11, M12
    FROM
    (
        SELECT
            T2.AC AS AC,
            SUM(CASE WHEN MT = 0 THEN S1 ELSE 0.00 END) AS M0,
            SUM(CASE WHEN MT = 1 THEN S1 ELSE 0.00 END) AS M1,
            SUM(CASE WHEN MT = 2 THEN S1 ELSE 0.00 END) AS M2,
            SUM(CASE WHEN MT = 3 THEN S1 ELSE 0.00 END) AS M3,
            SUM(CASE WHEN MT = 4 THEN S1 ELSE 0.00 END) AS M4,
            SUM(CASE WHEN MT = 5 THEN S1 ELSE 0.00 END) AS M5,
            SUM(CASE WHEN MT = 6 THEN S1 ELSE 0.00 END) AS M6,
            SUM(CASE WHEN MT = 7 THEN S1 ELSE 0.00 END) AS M7,
            SUM(CASE WHEN MT = 8 THEN S1 ELSE 0.00 END) AS M8,
            SUM(CASE WHEN MT = 9 THEN S1 ELSE 0.00 END) AS M9,
            SUM(CASE WHEN MT = 10 THEN S1 ELSE 0.00 END) AS M10,
            SUM(CASE WHEN MT = 11 THEN S1 ELSE 0.00 END) AS M11,
            SUM(CASE WHEN MT = 12 THEN S1 ELSE 0.00 END) AS M12
        FROM
        (
            SELECT AC, MT, SUM(SDb - SCr) AS S1
            FROM
            (
                SELECT 
                    OPS.AC11 AS AC,
                    CASE
                        WHEN OPSd.Dete < :sdt THEN 0
                        ELSE EXTRACT(MONTH FROM OPSd.Dete)
                    END AS MT,
    
                    OPS.Summ AS SDb,
                    0.00 AS SCr
    
                FROM OPSd JOIN OPS ON OPSd.id = OPS.DocId
                WHERE OPSd.Dete <= :edt
    
                UNION ALL
    
                SELECT 
                    OPS.AC21 AS AC,
                    CASE
                        WHEN OPSd.Dete < :sdt THEN 0
                        ELSE EXTRACT(MONTH FROM OPSd.Dete)
                    END AS MT,
    
                    0.00 AS SDb,
                    OPS.Summ AS SCr
    
                FROM OPSd JOIN OPS ON OPSd.id = OPS.DocId
                WHERE OPSd.Dete <= :edt
    
                UNION ALL
    
                SELECT 
                    Bal0.AC11 AS AC,
                    0 AS MT,
                    Bal0.SummD AS SDb,
                    Bal0.SummC AS SCr
                FROM Bal0
    
            ) AS T1
    
            GROUP BY T1.AC, T1.MT
        ) AS T2    
    
        WHERE (S1) <> 0.00
        GROUP BY AC
    )
    ORDER BY AC
    INTO
        :AC, :M0, :M1, :M2, :M3, :M4, :M5, :M6, :M7, :M8, :M9, :M10, :M11, :M12
    DO
    BEGIN
        SUSPEND;
    END
end^


ALTER PROCEDURE SP_REP_BAL_22 (
    SDT DATE,
    EDT DATE,
    PBALID VARCHAR(10))
RETURNS (
    ID INTEGER,
    SPID INTEGER,
    BID INTEGER,
    M0 MONEY,
    M1 MONEY,
    M2 MONEY,
    M3 MONEY,
    M4 MONEY,
    M5 MONEY,
    M6 MONEY,
    M7 MONEY,
    M8 MONEY,
    M9 MONEY,
    M10 MONEY,
    M11 MONEY,
    M12 MONEY)
AS
begin
    INSERT INTO ttemp_balmt1 (AC, M0, M1, M2, M3, M4, M5,
            M6, M7, M8, M9, M10, M11, M12)
        SELECT T1.AC, T1.M0, T1.M1, T1.M2, T1.M3, T1.M4, T1.M5,
                T1.M6, T1.M7, T1.M8, T1.M9, T1.M10, T1.M11, T1.M12
        FROM sp_rep_bal_21(:SDT, :EDT) AS T1;

    INSERT INTO ttemp_BalMT2 (bid, M0, M1, M2, M3, M4, M5,
            M6, M7, M8, M9, M10, M11, M12)
    SELECT 
        BalA2.id AS bid,
        SUM(iif(BalA3.tp = 'Db', T1a.M0, - T1a.M0)) AS M0,
        SUM(iif(BalA3.tp = 'Db', T1a.M1, - T1a.M1)) AS M1,
        SUM(iif(BalA3.tp = 'Db', T1a.M2, - T1a.M2)) AS M2,
        SUM(iif(BalA3.tp = 'Db', T1a.M3, - T1a.M3)) AS M3,
        SUM(iif(BalA3.tp = 'Db', T1a.M4, - T1a.M4)) AS M4,
        SUM(iif(BalA3.tp = 'Db', T1a.M5, - T1a.M5)) AS M5,
        SUM(iif(BalA3.tp = 'Db', T1a.M6, - T1a.M6)) AS M6,
        SUM(iif(BalA3.tp = 'Db', T1a.M7, - T1a.M7)) AS M7,
        SUM(iif(BalA3.tp = 'Db', T1a.M8, - T1a.M8)) AS M8,
        SUM(iif(BalA3.tp = 'Db', T1a.M9, - T1a.M9)) AS M9,
        SUM(iif(BalA3.tp = 'Db', T1a.M10, - T1a.M10)) AS M10,
        SUM(iif(BalA3.tp = 'Db', T1a.M11, - T1a.M11)) AS M11,
        SUM(iif(BalA3.tp = 'Db', T1a.M12, - T1a.M12)) AS M12
    FROM BalA1
        INNER JOIN BalA2 ON BalA1.balid = BalA2.balid
        INNER JOIN BalA3 ON BalA2.id = BalA3.id2
        INNER JOIN ttemp_balMT1 AS T1a ON T1a.AC LIKE REPLACE(BalA3.ac,'*','%')
    WHERE
        BalA1.balid = :pbalid AND
        BalA2.tp = 'S'
    GROUP BY BalA2.id;


    INSERT INTO ttemp_BalMT2 (bid, M0, M1, M2, M3, M4, M5,
            M6, M7, M8, M9, M10, M11, M12)
    SELECT 
        BalA2.id AS bid,
        SUM(T2.M0) AS M0,
        SUM(T2.M1) AS M1,
        SUM(T2.M2) AS M2,
        SUM(T2.M3) AS M3,
        SUM(T2.M4) AS M4,
        SUM(T2.M5) AS M5,
        SUM(T2.M6) AS M6,
        SUM(T2.M7) AS M7,
        SUM(T2.M8) AS M8,
        SUM(T2.M9) AS M9,
        SUM(T2.M10) AS M10,
        SUM(T2.M11) AS M11,
        SUM(T2.M12) AS M12
    FROM 
        BalA1 
        INNER JOIN BalA2 ON BalA1.balid = BalA2.balid
        INNER JOIN
            (
                SELECT
                    BalA2.nr,
                    ttemp_BalMT2.M0,
                    ttemp_BalMT2.M1,
                    ttemp_BalMT2.M2,
                    ttemp_BalMT2.M3,
                    ttemp_BalMT2.M4,
                    ttemp_BalMT2.M5,
                    ttemp_BalMT2.M6,
                    ttemp_BalMT2.M7,
                    ttemp_BalMT2.M8,
                    ttemp_BalMT2.M9,
                    ttemp_BalMT2.M10,
                    ttemp_BalMT2.M11,
                    ttemp_BalMT2.M12
                FROM BalA2 INNER JOIN ttemp_BalMT2
                    ON ttemp_BalMT2.bid = BalA2.id
            ) AS T2
            ON T2.nr BETWEEN BalA2.nr1 AND BalA2.nr2
    WHERE
        BalA1.balid = :pbalid AND
        BalA2.tp = 'K'
    GROUP BY BalA2.id;


    INSERT INTO ttemp_BalMT2 (bid, M0, M1, M2, M3, M4, M5,
            M6, M7, M8, M9, M10, M11, M12)
    SELECT 
        BalA2.id AS bid,
        SUM(T2.M0) AS M0,
        SUM(T2.M1) AS M1,
        SUM(T2.M2) AS M2,
        SUM(T2.M3) AS M3,
        SUM(T2.M4) AS M4,
        SUM(T2.M5) AS M5,
        SUM(T2.M6) AS M6,
        SUM(T2.M7) AS M7,
        SUM(T2.M8) AS M8,
        SUM(T2.M9) AS M9,
        SUM(T2.M10) AS M10,
        SUM(T2.M11) AS M11,
        SUM(T2.M12) AS M12
    FROM 
        BalA1 
        INNER JOIN BalA2 ON BalA1.balid = BalA2.balid
        INNER JOIN
            (
                SELECT
                    BalA2.nr,
                    ttemp_BalMT2.M0,
                    ttemp_BalMT2.M1,
                    ttemp_BalMT2.M2,
                    ttemp_BalMT2.M3,
                    ttemp_BalMT2.M4,
                    ttemp_BalMT2.M5,
                    ttemp_BalMT2.M6,
                    ttemp_BalMT2.M7,
                    ttemp_BalMT2.M8,
                    ttemp_BalMT2.M9,
                    ttemp_BalMT2.M10,
                    ttemp_BalMT2.M11,
                    ttemp_BalMT2.M12
                FROM BalA2 INNER JOIN ttemp_BalMT2
                    ON ttemp_BalMT2.bid = BalA2.id
            ) AS T2
            ON T2.nr = BalA2.nr1
    WHERE
        BalA1.balid = :pbalid AND
        BalA2.tp = 'V'
    GROUP BY BalA2.id;


    FOR SELECT
        ttemp_BalMT2.bid AS id, -- hack
        0 AS spid,
        ttemp_BalMT2.bid AS bid,
        ttemp_BalMT2.M0 AS M0,
        ttemp_BalMT2.M1 AS M1,
        ttemp_BalMT2.M2 AS M2,
        ttemp_BalMT2.M3 AS M3,
        ttemp_BalMT2.M4 AS M4,
        ttemp_BalMT2.M5 AS M5,
        ttemp_BalMT2.M6 AS M6,
        ttemp_BalMT2.M7 AS M7,
        ttemp_BalMT2.M8 AS M8,
        ttemp_BalMT2.M9 AS M9,
        ttemp_BalMT2.M10 AS M10,
        ttemp_BalMT2.M11 AS M11,
        ttemp_BalMT2.M12 AS M12
    FROM ttemp_BalMT2
        INNER JOIN BalA2 ON ttemp_BalMT2.bid = BalA2.id
    ORDER BY BalA2.nr

    into
        :id, :spid, :bid, :M0, :M1, :M2, :M3, :M4, :M5, :M6, :M7, :M8, :M9, :M10, :M11, :M12
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_REP_CURCHECK_01 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(8),
    PCUR VARCHAR(3))
RETURNS (
    ID TYPE OF COLUMN ROPS1A.ID,
    SPID TYPE OF COLUMN ROPS1A.SPID,
    DID TYPE OF COLUMN ROPS1A.DID,
    DETE TYPE OF COLUMN ROPS1A.DETE,
    NRX TYPE OF COLUMN ROPS1A.NRX,
    DOCTYP TYPE OF COLUMN ROPS1A.DOCTYP,
    DOCTYP1 TYPE OF COLUMN ROPS1A.DOCTYP1,
    DOCTYP2 TYPE OF COLUMN ROPS1A.DOCTYP2,
    DOCST TYPE OF COLUMN ROPS1A.DOCST,
    DOCNR TYPE OF COLUMN ROPS1A.DOCNR,
    CLID TYPE OF COLUMN ROPS1A.CLID,
    CLID2 TYPE OF COLUMN ROPS1A.CLID2,
    NAME TYPE OF COLUMN ROPS1A.NAME,
    NAME2 TYPE OF COLUMN ROPS1A.NAME2,
    REGNR TYPE OF COLUMN ROPS1A.REGNR,
    REGNR2 TYPE OF COLUMN ROPS1A.REGNR2,
    B0 TYPE OF COLUMN ROPS1A.B0,
    DESCR TYPE OF COLUMN ROPS1A.DESCR,
    DESCR2 TYPE OF COLUMN ROPS1A.DESCR2,
    AC1 TYPE OF COLUMN ROPS1A.AC1,
    AC2 TYPE OF COLUMN ROPS1A.AC2,
    SAC1 TYPE OF COLUMN ROPS1A.SAC1,
    SAC2 TYPE OF COLUMN ROPS1A.SAC2,
    SUMMC TYPE OF COLUMN ROPS1A.SUMMC,
    CUR TYPE OF COLUMN ROPS1A.CUR,
    SUMM TYPE OF COLUMN ROPS1A.SUMM,
    PVN TYPE OF COLUMN ROPS1A.PVN,
    RAC TYPE OF COLUMN ROPS1A.RAC,
    SDB TYPE OF COLUMN ROPS1A.SDB,
    SCR TYPE OF COLUMN ROPS1A.SCR,
    RAC2 TYPE OF COLUMN ROPS1A.RAC2,
    RAC3 TYPE OF COLUMN ROPS1A.RAC3,
    RAC4 TYPE OF COLUMN ROPS1A.RAC4,
    RAC5 TYPE OF COLUMN ROPS1A.RAC5,
    QV TYPE OF COLUMN ROPS1A.QV,
    ZNR TYPE OF COLUMN ROPS1A.ZNR)
AS
begin
--mekl√Ñ‚Äújam dokumentus ar val√Ö¬´tas konvert√Ñ¬Åcijas k√Ñ¬º√Ö¬´d√Ñ¬Åm
    FOR SELECT
        gen_id(GEN_ROPS1A_ID, 1) as id,
        0 as spid,
        T1.id AS did, 
        T1.Dete AS Dete,
        T1.NrX AS NrX,
        T1.DocTyp AS DocTyp,
        DocTyp.id1 AS DocTyp1, 
        null AS DocTyp2,
        T1.DocSt AS DocSt,
        T1.DocNr AS DocNr,
        T1.ClId AS Clid,
        T1.ClId2 AS Clid2,
        Persons.Name AS Name,
        Persons2.Name AS Name2, 
        Persons.RegNr AS RegNr,
        Persons2.RegNr AS RegNr2,
        0 as b0, 
        T1.Descr AS Descr,
        null AS Descr2,
        null AS AC1,
        null AS AC2,
        null AS SAC1,
        null AS SAC2,
        0 AS SummC,
        null AS Cur,
        T1.Summ AS Summ,
        T1.PVN AS PVN,
        null AS Rac,
        0 AS Sdb,
        0 AS Scr,
        null AS Rac2,
        null AS Rac3,
        null AS Rac4,
        null AS Rac5,
        0 AS qv,
        T1.ZNR AS ZNR
    FROM
        (
            SELECT DISTINCT OPSd.*
            FROM 
                OPSd INNER JOIN OPS ON OPSd.id = OPS.DocId
                LEFT JOIN Currency 
                ON Currency.id = OPS.Cur AND Currency.Dete = OPSd.Dete
            WHERE 
                OPSd.Dete BETWEEN :sdt AND :edt AND 
                OPS.Cur <> 'EUR' AND
                (OPS.AC11 LIKE :pac OR OPS.AC21 LIKE :pac) AND
                (
                    Currency.id IS NULL OR
                    ROUND(OPS.SummC*Currency.rate,2) <> OPS.Summ
                )
        ) AS T1

        LEFT JOIN DocTyp ON T1.DocTyp = DocTyp.id
        LEFT JOIN Persons ON T1.ClId = Persons.ClId
        LEFT JOIN Persons AS Persons2 ON T1.ClId2 = Persons2.ClId        

    ORDER BY T1.Dete, T1.id

    into
        :id, :spid, :did, :dete, :nrx,
        :doctyp, :doctyp1, :doctyp2, :docst, :docnr,
        :clid, :clid2, :name, :name2, :regnr, :regnr2,
        :b0, :descr, :descr2, :ac1, :ac2, :sac1,:sac2,
        :summc, :cur, :summ, :pvn, :rac, :sdb, :scr,
        :rac2, :rac3, :rac4, :rac5, :qv, :znr
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_REP_CURRDIFF_01 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(8),
    PCUR VARCHAR(3))
RETURNS (
    ID TYPE OF COLUMN ROPS2A.ID,
    SPID TYPE OF COLUMN ROPS2A.SPID,
    AC TYPE OF COLUMN ROPS2A.AC,
    RAC TYPE OF COLUMN ROPS2A.RAC,
    NAME TYPE OF COLUMN ROPS2A.NAME,
    B0 TYPE OF COLUMN ROPS2A.B0,
    SDB TYPE OF COLUMN ROPS2A.SDB,
    SCR TYPE OF COLUMN ROPS2A.SCR,
    TDB TYPE OF COLUMN ROPS2A.TDB,
    TCR TYPE OF COLUMN ROPS2A.TCR,
    CLID TYPE OF COLUMN ROPS2A.CLID,
    NAME1 TYPE OF COLUMN ROPS2A.NAME1,
    REGNR TYPE OF COLUMN ROPS2A.REGNR,
    RNAME TYPE OF COLUMN ROPS2A.RNAME)
AS
begin
    FOR SELECT
        gen_id(GEN_ROPS2A_ID, 1) AS id,
        current_connection AS spid,
        T2.AC AS AC,
        NULL AS RAC,
        AcP21.Name AS Name,
        0.00 as b0,
        T2.ADb AS SDb,
        T2.ACr AS SCr,
        T2.BDb AS TDb,
        T2.BCr AS TCr,
        T2.Clid AS Clid,
        Persons.Name AS Name1,
        Persons.regnr AS regnr,
        null as rname
    FROM
    (
        SELECT AC, T1.Clid AS Clid, SUM(SDb) AS ADb, SUM(SCr) AS ACr, SUM(TDb) AS BDb, SUM(TCr) AS BCr
        FROM
        (
            -- :pcur ***************
            SELECT 
                OPS.AC11 AS AC,
                OPSd.ClId AS Clid,
                OPS.SummC AS SDb,
                0.00 AS SCr,
                OPS.Summ AS TDb,
                0.00 AS TCr

            FROM OPSd JOIN OPS ON OPSd.id = OPS.DocId
            WHERE 
                OPSd.Dete <= :edt AND 
                OPS.AC11 = :pac AND 
                OPS.Cur = :pcur AND
                (:pclid IS NULL OR OPSd.ClId = :pclid)

            UNION ALL

            SELECT 
                OPS.AC21 AS AC,
                OPSd.ClId AS Clid,
                0.00 AS SDb,
                OPS.SummC AS SCr,
                0.00 AS TDb,
                OPS.Summ AS TCr


            FROM OPSd JOIN OPS ON OPSd.id = OPS.DocId
            WHERE 
                OPSd.Dete <= :edt AND 
                OPS.AC21 = :pac AND 
                OPS.Cur = :pcur AND
                (:pclid IS NULL OR OPSd.ClId = :pclid)

            -- EUR ***************
            UNION ALL

            SELECT 
                OPS.AC11 AS AC,
                OPSd.ClId AS Clid,
                0.00 AS SDb,
                0.00 AS SCr,
                OPS.Summ AS TDb,
                0.00 AS TCr

            FROM OPSd JOIN OPS ON OPSd.id = OPS.DocId
            WHERE 
                OPSd.Dete <= :edt AND 
                OPS.AC11 = :pac AND 
                OPS.Cur = 'EUR' AND
                (:pclid IS NULL OR OPSd.ClId = :pclid)

            UNION ALL

            SELECT 
                OPS.AC21 AS AC,
                OPSd.ClId AS Clid,
                0.00 AS SDb,
                0.00 AS SCr,
                0.00 AS TDb,
                OPS.Summ AS TCr


            FROM OPSd JOIN OPS ON OPSd.id = OPS.DocId
            WHERE 
                OPSd.Dete <= :edt AND 
                OPS.AC21 = :pac AND 
                OPS.Cur = 'EUR' AND
                (:pclid IS NULL OR OPSd.ClId = :pclid)

            UNION ALL

            SELECT 
                Bal0.AC11 AS AC,
                Bal0.ClId AS Clid,
                Bal0.SummDC AS SDb,
                Bal0.SummCC AS SCr,
                Bal0.SummD AS TDb,
                Bal0.SummC AS TCr
            FROM Bal0
            WHERE 
                Bal0.AC11 = :pac AND 
                Bal0.Cur = :pcur AND
                (:pclid IS NULL OR Bal0.ClId = :pclid)
            
            UNION ALL

            SELECT 
                Bal0.AC11 AS AC,
                Bal0.ClId AS Clid,
                0.00 AS SDb,
                0.00 AS SCr,
                Bal0.SummD AS TDb,
                Bal0.SummC AS TCr
            FROM Bal0
            WHERE 
                Bal0.AC11 = :pac AND 
                Bal0.Cur = 'EUR' AND
                (:pclid IS NULL OR Bal0.ClId = :pclid)

        ) AS T1
        GROUP BY AC, T1.Clid

    ) AS T2    
    LEFT JOIN AcP21 ON T2.AC = AcP21.AC
    LEFT JOIN Persons ON T2.Clid = Persons.ClId
    ORDER BY AC

    
    into
        :id, :spid, :ac, :rac, :name,
        :b0,
        :sdb, :scr, :tdb, :tcr,
        :clid, :name1, :regnr, :rname
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_REP_DARZ_1 (
    SDT DATE,
    EDT DATE)
RETURNS (
    ID TYPE OF COLUMN TREPDARZ1.ID,
    SPID TYPE OF COLUMN TREPDARZ1.SPID,
    DID TYPE OF COLUMN TREPDARZ1.DID,
    RID TYPE OF COLUMN TREPDARZ1.RID,
    DETE TYPE OF COLUMN TREPDARZ1.DETE,
    NRX TYPE OF COLUMN TREPDARZ1.NRX,
    DOCTYP TYPE OF COLUMN TREPDARZ1.DOCTYP,
    DOCST TYPE OF COLUMN TREPDARZ1.DOCST,
    DOCNR TYPE OF COLUMN TREPDARZ1.DOCNR,
    CLID TYPE OF COLUMN TREPDARZ1.CLID,
    NAME TYPE OF COLUMN TREPDARZ1.NAME,
    REGNR TYPE OF COLUMN TREPDARZ1.REGNR,
    DESCR TYPE OF COLUMN TREPDARZ1.DESCR,
    AC1 TYPE OF COLUMN TREPDARZ1.AC1,
    AC2 TYPE OF COLUMN TREPDARZ1.AC2,
    AA TYPE OF COLUMN TREPDARZ1.AA,
    A1 TYPE OF COLUMN TREPDARZ1.A1,
    A2 TYPE OF COLUMN TREPDARZ1.A2,
    A3 TYPE OF COLUMN TREPDARZ1.A3,
    A4 TYPE OF COLUMN TREPDARZ1.A4,
    A5 TYPE OF COLUMN TREPDARZ1.A5,
    A6 TYPE OF COLUMN TREPDARZ1.A6,
    A7 TYPE OF COLUMN TREPDARZ1.A7,
    A8 TYPE OF COLUMN TREPDARZ1.A8,
    A9 TYPE OF COLUMN TREPDARZ1.A9,
    A10 TYPE OF COLUMN TREPDARZ1.A10,
    A11 TYPE OF COLUMN TREPDARZ1.A11,
    A12 TYPE OF COLUMN TREPDARZ1.A12,
    A13 TYPE OF COLUMN TREPDARZ1.A13,
    A14 TYPE OF COLUMN TREPDARZ1.A14,
    A15 TYPE OF COLUMN TREPDARZ1.A15,
    A16 TYPE OF COLUMN TREPDARZ1.A16,
    A17 TYPE OF COLUMN TREPDARZ1.A17,
    A18 TYPE OF COLUMN TREPDARZ1.A18)
AS
begin
    FOR SELECT
        gen_id(GEN_TREPDARZ1_ID, 1) AS id,
        current_connection AS spid,
        DocId AS did,
        0 AS rid,
        MAX(Dete) AS Dete,
        MAX(NrX) AS NrX,
        MAX(DocTyp.id1) AS DocTyp,
        MAX(DocSt) AS DocSt,
        MAX(DocNr) AS DocNr,
        MAX(OPSd.clid) AS clid,
        MAX(Persons.name) AS Name,
        MAX(Persons.regnr) AS RegNr,
        MAX(OPSd.descr) AS Descr,

        null AS AC1,
        null AS AC2,
        null AS AA,

        SUM(CASE WHEN AC13 = 'KA' THEN OPS.Summ ELSE 0.00 END) AS A1,
        SUM(CASE WHEN AC23 = 'KA' THEN OPS.Summ ELSE 0.00 END) AS A2,
        
        SUM(CASE WHEN AC13 = 'BA' THEN OPS.Summ ELSE 0.00 END) AS A3,
        SUM(CASE WHEN AC23 = 'BA' THEN OPS.Summ ELSE 0.00 END) AS A4,
                                                                
        SUM(CASE WHEN AC13 = 'CN' THEN OPS.Summ ELSE 0.00 END) AS A5,
        SUM(CASE WHEN AC23 = 'CN' THEN OPS.Summ ELSE 0.00 END) AS A6,

        SUM(CASE WHEN AC23 = 'LIE' THEN OPS.Summ ELSE 0.00 END) AS A7,
        SUM(CASE WHEN AC23 = 'NIE' THEN OPS.Summ ELSE 0.00 END) AS A8,
        SUM(CASE WHEN AC23 = 'SUB' THEN OPS.Summ ELSE 0.00 END) AS A9,
        SUM(CASE WHEN AC23 = 'ZIE' THEN OPS.Summ ELSE 0.00 END) AS A10,
        SUM(CASE WHEN AC23 = 'CIE' THEN OPS.Summ ELSE 0.00 END) AS A11,

        SUM(CASE WHEN AC13 = 'LIZ' THEN OPS.Summ ELSE 0.00 END) AS A12,
        SUM(CASE WHEN AC13 = 'NIZ' THEN OPS.Summ ELSE 0.00 END) AS A13,
        SUM(CASE WHEN AC13 = 'PIZ' THEN OPS.Summ ELSE 0.00 END) AS A14,
        SUM(CASE WHEN AC13 = 'ZIZ' THEN OPS.Summ ELSE 0.00 END) AS A15,
        SUM(CASE WHEN AC13 = 'CIZ' THEN OPS.Summ ELSE 0.00 END) AS A16,

        SUM(CASE WHEN AC13 = 'LIZ1' THEN OPS.Summ ELSE 0.00 END) AS A17,
        SUM(CASE WHEN AC13 = 'NIZ1' THEN OPS.Summ ELSE 0.00 END) AS A18

    FROM
        OPSd JOIN OPS ON OPSd.id = OPS.DocId
        LEFT JOIN persons ON OPSd.clid = Persons.clid
        LEFT JOIN doctyp ON OPSd.doctyp = doctyp.id
    WHERE
        OPSd.Dete BETWEEN :sdt AND :edt AND
        OPS.AC13 IS NOT NULL AND
        OPS.AC23 IS NOT NULL
    GROUP BY DocId
    ORDER BY Dete, did


    into
        :id, :spid, :did, :rid, :dete, :nrx,
        :doctyp, :docst, :docnr, :clid, :name, :regnr,
        :descr, :ac1, :ac2, :aa,
        :a1, :a2, :a3, :a4, :a5, :a6, :a7, :a8,
        :a9, :a10, :a11, :a12, :a13, :a14,:a15,:a16,:a17,:a18
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_REP_DARZ_2 (
    SDT DATE,
    EDT DATE)
RETURNS (
    ID TYPE OF COLUMN TREPDARZ2.ID,
    SPID TYPE OF COLUMN TREPDARZ2.SPID,
    RID0 TYPE OF COLUMN TREPDARZ2.RID0,
    A1 TYPE OF COLUMN TREPDARZ2.A1,
    A2 TYPE OF COLUMN TREPDARZ2.A2,
    A3 TYPE OF COLUMN TREPDARZ2.A3,
    A4 TYPE OF COLUMN TREPDARZ2.A4,
    A5 TYPE OF COLUMN TREPDARZ2.A5,
    A6 TYPE OF COLUMN TREPDARZ2.A6,
    A7 TYPE OF COLUMN TREPDARZ2.A7,
    A8 TYPE OF COLUMN TREPDARZ2.A8,
    A9 TYPE OF COLUMN TREPDARZ2.A9,
    A10 TYPE OF COLUMN TREPDARZ2.A10,
    A11 TYPE OF COLUMN TREPDARZ2.A11,
    A12 TYPE OF COLUMN TREPDARZ2.A12,
    A13 TYPE OF COLUMN TREPDARZ2.A13,
    A14 TYPE OF COLUMN TREPDARZ2.A14,
    A15 TYPE OF COLUMN TREPDARZ2.A15,
    A16 TYPE OF COLUMN TREPDARZ2.A16,
    A17 TYPE OF COLUMN TREPDARZ2.A17,
    A18 TYPE OF COLUMN TREPDARZ2.A18,
    A19 TYPE OF COLUMN TREPDARZ2.A19,
    A20 TYPE OF COLUMN TREPDARZ2.A20,
    A21 TYPE OF COLUMN TREPDARZ2.A21)
AS
begin

    FOR SELECT
        gen_id(GEN_TREPDARZ2_ID, 1) AS id,
        current_connection AS spid,
        coalesce(T2.rid0, 0) AS rid0,
        coalesce(T1.A1, 0.00) AS A1,
        coalesce(T1.A2, 0.00) AS A2,
        coalesce(T1.A3, 0.00) AS A3,
        coalesce(T1.A4, 0.00) AS A4,
        coalesce(T1.A5, 0.00) AS A5,
        coalesce(T1.A6, 0.00) AS A6,
        coalesce(T2.A7, 0.00) AS A7,
        coalesce(T2.A8, 0.00) AS A8,
        coalesce(T2.A9, 0.00) AS A9,
        coalesce(T2.A10, 0.00) AS A10,
        coalesce(T2.A11, 0.00) AS A11,
        coalesce(T2.A12, 0.00) AS A12,
        coalesce(T2.A13, 0.00) AS A13,
        coalesce(T2.A14, 0.00) AS A14,
        coalesce(T2.A15, 0.00) AS A15,
        coalesce(T2.A16, 0.00) AS A16,
        coalesce(T3.A17, 0.00) AS A17,
        coalesce(T3.A18, 0.00) AS A18,
        coalesce(T3.A19, 0.00) AS A19,
        coalesce(T2.A20, 0.00) AS A20,
        coalesce(T2.A21, 0.00) AS A21

    FROM
        (SELECT
            SUM(CASE WHEN AC13 = 'KA' THEN OPS.Summ ELSE 0.00 END) AS A1,
            SUM(CASE WHEN AC23 = 'KA' THEN OPS.Summ ELSE 0.00 END) AS A2,
        
            SUM(CASE WHEN AC13 = 'BA' THEN OPS.Summ ELSE 0.00 END) AS A3,
            SUM(CASE WHEN AC23 = 'BA' THEN OPS.Summ ELSE 0.00 END) AS A4,
        
            SUM(CASE WHEN AC13 = 'CN' THEN OPS.Summ ELSE 0.00 END) AS A5,
            SUM(CASE WHEN AC23 = 'CN' THEN OPS.Summ ELSE 0.00 END) AS A6

        FROM
            OPSd JOIN OPS ON OPSd.id = OPS.DocId

        WHERE
            OPSd.Dete <= :edt AND
            OPS.AC13 IS NOT NULL AND
            OPS.AC23 IS NOT NULL
        ) AS T1,
        
        (SELECT
            COUNT(DISTINCT DocId) rid0,
        
            SUM(CASE WHEN AC23 = 'LIE' THEN OPS.Summ ELSE 0.00 END) AS A7,
            SUM(CASE WHEN AC23 = 'NIE' THEN OPS.Summ ELSE 0.00 END) AS A8,
            SUM(CASE WHEN AC23 = 'SUB' THEN OPS.Summ ELSE 0.00 END) AS A9,
            SUM(CASE WHEN AC23 = 'ZIE' THEN OPS.Summ ELSE 0.00 END) AS A10,
            SUM(CASE WHEN AC23 = 'CIE' THEN OPS.Summ ELSE 0.00 END) AS A11,

            SUM(CASE WHEN AC13 = 'LIZ' THEN OPS.Summ ELSE 0.00 END) AS A12,
            SUM(CASE WHEN AC13 = 'NIZ' THEN OPS.Summ ELSE 0.00 END) AS A13,
            SUM(CASE WHEN AC13 = 'PIZ' THEN OPS.Summ ELSE 0.00 END) AS A14,
            SUM(CASE WHEN AC13 = 'ZIZ' THEN OPS.Summ ELSE 0.00 END) AS A15,
            SUM(CASE WHEN AC13 = 'CIZ' THEN OPS.Summ ELSE 0.00 END) AS A16,

            SUM(CASE WHEN AC13 = 'LIZ1' THEN OPS.Summ ELSE 0.00 END) AS A20,
            SUM(CASE WHEN AC13 = 'NIZ1' THEN OPS.Summ ELSE 0.00 END) AS A21

        FROM
            OPSd JOIN OPS ON OPSd.id = OPS.DocId
        WHERE
            OPSd.Dete BETWEEN :sdt AND :edt AND
            OPS.AC13 IS NOT NULL AND
            OPS.AC23 IS NOT NULL
        ) AS T2,

        (SELECT 
            SUM(CASE WHEN AcP21.id1 = 'KA'
                THEN Bal0.SummD - Bal0.SummC ELSE 0.00 END) AS A17,
            SUM(CASE WHEN AcP21.id1 = 'BA'
                THEN Bal0.SummD - Bal0.SummC ELSE 0.00 END) AS A18,
            SUM(CASE WHEN AcP21.id1 = 'CN'
                THEN Bal0.SummD - Bal0.SummC ELSE 0.00 END) AS A19

        FROM Bal0
            INNER JOIN AcP21 ON Bal0.AC11 = AcP21.AC
        WHERE AcP21.id1 IN ('KA','BA','CN')
        ) AS T3


    into
        :id, :spid, :rid0,
        :a1, :a2, :a3, :a4, :a5, :a6, :a7, :a8, :a9, :a10,
        :a11, :a12, :a13, :a14, :a15, :a16, :a17, :a18, :a19, :a20, :a21
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_REP_DARZ_3 (
    SDT DATE,
    EDT DATE)
RETURNS (
    ID TYPE OF COLUMN TREPDARZ1.ID,
    SPID TYPE OF COLUMN TREPDARZ1.SPID,
    DID TYPE OF COLUMN TREPDARZ1.DID,
    RID TYPE OF COLUMN TREPDARZ1.RID,
    DETE TYPE OF COLUMN TREPDARZ1.DETE,
    NRX TYPE OF COLUMN TREPDARZ1.NRX,
    DOCTYP TYPE OF COLUMN TREPDARZ1.DOCTYP,
    DOCST TYPE OF COLUMN TREPDARZ1.DOCST,
    DOCNR TYPE OF COLUMN TREPDARZ1.DOCNR,
    CLID TYPE OF COLUMN TREPDARZ1.CLID,
    NAME TYPE OF COLUMN TREPDARZ1.NAME,
    REGNR TYPE OF COLUMN TREPDARZ1.REGNR,
    DESCR TYPE OF COLUMN TREPDARZ1.DESCR,
    AC1 TYPE OF COLUMN TREPDARZ1.AC1,
    AC2 TYPE OF COLUMN TREPDARZ1.AC2,
    AA TYPE OF COLUMN TREPDARZ1.AA,
    A1 TYPE OF COLUMN TREPDARZ1.A1,
    A2 TYPE OF COLUMN TREPDARZ1.A2,
    A3 TYPE OF COLUMN TREPDARZ1.A3,
    A4 TYPE OF COLUMN TREPDARZ1.A4,
    A5 TYPE OF COLUMN TREPDARZ1.A5,
    A6 TYPE OF COLUMN TREPDARZ1.A6,
    A7 TYPE OF COLUMN TREPDARZ1.A7,
    A8 TYPE OF COLUMN TREPDARZ1.A8,
    A9 TYPE OF COLUMN TREPDARZ1.A9,
    A10 TYPE OF COLUMN TREPDARZ1.A10,
    A11 TYPE OF COLUMN TREPDARZ1.A11,
    A12 TYPE OF COLUMN TREPDARZ1.A12,
    A13 TYPE OF COLUMN TREPDARZ1.A13,
    A14 TYPE OF COLUMN TREPDARZ1.A14,
    A15 TYPE OF COLUMN TREPDARZ1.A15,
    A16 TYPE OF COLUMN TREPDARZ1.A16)
AS
begin
    FOR SELECT
        gen_id(GEN_TREPDARZ1_ID, 1) AS id,
        current_connection AS spid,
        DocId AS did,
        0 AS rid,
        MAX(Dete) AS Dete,
        MAX(NrX) AS NrX,
        MAX(DocTyp.id1) AS DocTyp,
        MAX(DocSt) AS DocSt,
        MAX(DocNr) AS DocNr,
        MAX(OPSd.clid) AS clid,
        MAX(Persons.name) AS Name,
        MAX(Persons.regnr) AS RegNr,
        MAX(OPSd.descr) AS Descr,

        null AS AC1,
        null AS AC2,
        null AS AA,

        SUM(CASE WHEN AC13 = 'KA' THEN OPS.Summ ELSE 0.00 END) AS A1,
        SUM(CASE WHEN AC23 = 'KA' THEN OPS.Summ ELSE 0.00 END) AS A2,
        
        SUM(CASE WHEN AC13 = 'BA' THEN OPS.Summ ELSE 0.00 END) AS A3,
        SUM(CASE WHEN AC23 = 'BA' THEN OPS.Summ ELSE 0.00 END) AS A4,
        
        SUM(CASE WHEN AC13 = 'CN' THEN OPS.Summ ELSE 0.00 END) AS A5,
        SUM(CASE WHEN AC23 = 'CN' THEN OPS.Summ ELSE 0.00 END) AS A6,

        SUM(CASE WHEN AC23 = 'LIE' OR AC23 = 'SUB' THEN OPS.Summ ELSE 0.00 END) AS A7,
        SUM(CASE WHEN AC23 = 'NIE' THEN OPS.Summ ELSE 0.00 END) AS A8,
        SUM(CASE WHEN AC23 = 'ZIE' OR AC23 = 'CIE' THEN OPS.Summ ELSE 0.00 END) AS A9,

        SUM(CASE WHEN AC13 = 'DIZ' THEN OPS.Summ ELSE 0.00 END) AS A10,
        SUM(CASE WHEN AC13 = 'MIZ' THEN OPS.Summ ELSE 0.00 END) AS A11,
        SUM(CASE WHEN AC13 = 'LIZ' OR AC13 = 'NIZ' OR AC13 = 'PIZ' THEN OPS.Summ ELSE 0.00 END) AS A12,
        SUM(CASE WHEN AC13 = 'ZIZ' OR AC13 = 'CIZ' THEN OPS.Summ ELSE 0.00 END) AS A13,
        
        0 AS A14,
        0 AS A15,
        0 AS A16

    FROM
        OPSd JOIN OPS ON OPSd.id = OPS.DocId
        LEFT JOIN persons ON OPSd.clid = Persons.clid
        LEFT JOIN doctyp ON OPSd.doctyp = doctyp.id
    WHERE
        OPSd.Dete BETWEEN :sdt AND :edt AND
        OPS.AC13 IS NOT NULL AND
        OPS.AC23 IS NOT NULL
    GROUP BY DocId
    ORDER BY Dete, did

    into
        :id, :spid, :did, :rid, :DETE, :nrx,
        :doctyp, :docst, :docnr, :clid, :name, :regnr,
        :descr, :ac1, :ac2, :aa,
        :a1, :a2, :a3, :a4, :a5, :a6, :a7, :a8,
        :a9, :a10, :a11, :a12, :a13, :a14,:a15,:a16
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_REP_DARZ_4 (
    SDT DATE,
    EDT DATE)
RETURNS (
    ID TYPE OF COLUMN TREPDARZ2.ID,
    SPID TYPE OF COLUMN TREPDARZ2.SPID,
    RID0 TYPE OF COLUMN TREPDARZ2.RID0,
    A1 TYPE OF COLUMN TREPDARZ2.A1,
    A2 TYPE OF COLUMN TREPDARZ2.A2,
    A3 TYPE OF COLUMN TREPDARZ2.A3,
    A4 TYPE OF COLUMN TREPDARZ2.A4,
    A5 TYPE OF COLUMN TREPDARZ2.A5,
    A6 TYPE OF COLUMN TREPDARZ2.A6,
    A7 TYPE OF COLUMN TREPDARZ2.A7,
    A8 TYPE OF COLUMN TREPDARZ2.A8,
    A9 TYPE OF COLUMN TREPDARZ2.A9,
    A10 TYPE OF COLUMN TREPDARZ2.A10,
    A11 TYPE OF COLUMN TREPDARZ2.A11,
    A12 TYPE OF COLUMN TREPDARZ2.A12,
    A13 TYPE OF COLUMN TREPDARZ2.A13,
    A14 TYPE OF COLUMN TREPDARZ2.A14,
    A15 TYPE OF COLUMN TREPDARZ2.A15,
    A16 TYPE OF COLUMN TREPDARZ2.A16,
    A17 TYPE OF COLUMN TREPDARZ2.A17,
    A18 TYPE OF COLUMN TREPDARZ2.A18,
    A19 TYPE OF COLUMN TREPDARZ2.A19)
AS
begin
    FOR SELECT
        gen_id(GEN_TREPDARZ2_ID, 1) AS id,
        current_connection AS spid,
        coalesce(T2.rid0, 0) AS rid0,
        coalesce(T1.A1, 0.00) AS A1,
        coalesce(T1.A2, 0.00) AS A2,
        coalesce(T1.A3, 0.00) AS A3,
        coalesce(T1.A4, 0.00) AS A4,
        coalesce(T1.A5, 0.00) AS A5,
        coalesce(T1.A6, 0.00) AS A6,
        coalesce(T2.A7, 0.00) AS A7,
        coalesce(T2.A8, 0.00) AS A8,
        coalesce(T2.A9, 0.00) AS A9,
        coalesce(T2.A10, 0.00) AS A10,
        coalesce(T2.A11, 0.00) AS A11,
        coalesce(T2.A12, 0.00) AS A12,
        coalesce(T2.A13, 0.00) AS A13,
        0.00 AS A14,
        0.00 AS A15,
        0.00 AS A16,
        coalesce(T3.A17, 0.00) AS A17,
        coalesce(T3.A18, 0.00) AS A18,
        coalesce(T3.A19, 0.00) AS A19

    FROM
        (SELECT
            SUM(CASE WHEN AC13 = 'KA' THEN OPS.Summ ELSE 0.00 END) AS A1,
            SUM(CASE WHEN AC23 = 'KA' THEN OPS.Summ ELSE 0.00 END) AS A2,
        
            SUM(CASE WHEN AC13 = 'BA' THEN OPS.Summ ELSE 0.00 END) AS A3,
            SUM(CASE WHEN AC23 = 'BA' THEN OPS.Summ ELSE 0.00 END) AS A4,
        
            SUM(CASE WHEN AC13 = 'CN' THEN OPS.Summ ELSE 0.00 END) AS A5,
            SUM(CASE WHEN AC23 = 'CN' THEN OPS.Summ ELSE 0.00 END) AS A6

        FROM
            OPSd JOIN OPS ON OPSd.id = OPS.DocId

        WHERE
            OPSd.Dete <= :edt AND
            OPS.AC13 IS NOT NULL AND
            OPS.AC23 IS NOT NULL

        ) AS T1,

        (SELECT
            COUNT(DISTINCT DocId) rid0,

            SUM(CASE WHEN AC23 = 'LIE' OR AC23 = 'SUB' THEN OPS.Summ ELSE 0.00 END) AS A7,
            SUM(CASE WHEN AC23 = 'NIE' THEN OPS.Summ ELSE 0.00 END) AS A8,
            SUM(CASE WHEN AC23 = 'ZIE' OR AC23 = 'CIE' THEN OPS.Summ ELSE 0.00 END) AS A9,

            SUM(CASE WHEN AC13 = 'DIZ' THEN OPS.Summ ELSE 0.00 END) AS A10,
            SUM(CASE WHEN AC13 = 'MIZ' THEN OPS.Summ ELSE 0.00 END) AS A11,
            SUM(CASE WHEN AC13 = 'LIZ' OR AC13 = 'NIZ' OR AC13 = 'PIZ' THEN OPS.Summ ELSE 0.00 END) AS A12,
            SUM(CASE WHEN AC13 = 'ZIZ' OR AC13 = 'CIZ' THEN OPS.Summ ELSE 0.00 END) AS A13

        FROM
            OPSd JOIN OPS ON OPSd.id = OPS.DocId

        WHERE
            OPSd.Dete BETWEEN :sdt AND :edt AND
            OPS.AC13 IS NOT NULL AND
            OPS.AC23 IS NOT NULL

        ) AS T2,

        (SELECT 
            SUM(CASE WHEN AcP21.id1 = 'KA'
                THEN Bal0.SummD - Bal0.SummC ELSE 0.00 END) AS A17,
            SUM(CASE WHEN AcP21.id1 = 'BA'
                THEN Bal0.SummD - Bal0.SummC ELSE 0.00 END) AS A18,
            SUM(CASE WHEN AcP21.id1 = 'CN'
                THEN Bal0.SummD - Bal0.SummC ELSE 0.00 END) AS A19

        FROM Bal0
            INNER JOIN AcP21 ON Bal0.AC11 = AcP21.AC
        WHERE AcP21.id1 IN ('KA','BA','CN')
        ) AS T3


    into
        :id, :spid, :rid0,
        :a1, :a2, :a3, :a4, :a5, :a6, :a7, :a8, :a9, :a10,
        :a11, :a12, :a13, :a14, :a15, :a16, :a17, :a18, :a19
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_REP_DOKS_11 (
    PDATE1 DATE,
    PDATE2 DATE,
    PTEXT VARCHAR(50),
    PCLID VARCHAR(15),
    PAC11 VARCHAR(8),
    PAC12 VARCHAR(8),
    PAC13 VARCHAR(5),
    PAC14 VARCHAR(8),
    PAC15 VARCHAR(5),
    PAC21 VARCHAR(8),
    PAC22 VARCHAR(8),
    PAC23 VARCHAR(5),
    PAC24 VARCHAR(8),
    PAC25 VARCHAR(5),
    PDOCGR VARCHAR(10),
    PANDOR VARCHAR(3))
RETURNS (
    ID TYPE OF COLUMN ROPS1A.ID,
    SPID TYPE OF COLUMN ROPS1A.SPID,
    DID TYPE OF COLUMN ROPS1A.DID,
    DETE TYPE OF COLUMN ROPS1A.DETE,
    NRX TYPE OF COLUMN ROPS1A.NRX,
    DOCTYP TYPE OF COLUMN ROPS1A.DOCTYP,
    DOCTYP1 TYPE OF COLUMN ROPS1A.DOCTYP1,
    DOCTYP2 TYPE OF COLUMN ROPS1A.DOCTYP2,
    DOCST TYPE OF COLUMN ROPS1A.DOCST,
    DOCNR TYPE OF COLUMN ROPS1A.DOCNR,
    CLID TYPE OF COLUMN ROPS1A.CLID,
    CLID2 TYPE OF COLUMN ROPS1A.CLID2,
    NAME TYPE OF COLUMN ROPS1A.NAME,
    NAME2 TYPE OF COLUMN ROPS1A.NAME2,
    REGNR TYPE OF COLUMN ROPS1A.REGNR,
    REGNR2 TYPE OF COLUMN ROPS1A.REGNR2,
    B0 TYPE OF COLUMN ROPS1A.B0,
    DESCR TYPE OF COLUMN ROPS1A.DESCR,
    DESCR2 TYPE OF COLUMN ROPS1A.DESCR2,
    AC1 TYPE OF COLUMN ROPS1A.AC1,
    AC2 TYPE OF COLUMN ROPS1A.AC2,
    SAC1 TYPE OF COLUMN ROPS1A.SAC1,
    SAC2 TYPE OF COLUMN ROPS1A.SAC2,
    SUMMC TYPE OF COLUMN ROPS1A.SUMMC,
    CUR TYPE OF COLUMN ROPS1A.CUR,
    SUMM TYPE OF COLUMN ROPS1A.SUMM,
    PVN TYPE OF COLUMN ROPS1A.PVN,
    RAC TYPE OF COLUMN ROPS1A.RAC,
    SDB TYPE OF COLUMN ROPS1A.SDB,
    SCR TYPE OF COLUMN ROPS1A.SCR,
    RAC2 TYPE OF COLUMN ROPS1A.RAC2,
    RAC3 TYPE OF COLUMN ROPS1A.RAC3,
    RAC4 TYPE OF COLUMN ROPS1A.RAC4,
    RAC5 TYPE OF COLUMN ROPS1A.RAC5,
    QV TYPE OF COLUMN ROPS1A.QV,
    ZNR TYPE OF COLUMN ROPS1A.ZNR)
AS
begin
    IF
    (
        :PAC11 IS NULL AND 
        :PAC12 IS NULL AND 
        :PAC13 IS NULL AND 
        :PAC14 IS NULL AND
        :PAC15 IS NULL AND
        :PAC21 IS NULL AND 
        :PAC22 IS NULL AND 
        :PAC23 IS NULL AND 
        :PAC24 IS NULL AND
        :PAC25 IS NULL
    ) THEN
    BEGIN
        FOR SELECT
            gen_id(GEN_ROPS1A_ID, 1) as id,
            current_connection as spid,
            OPSd.id AS did, 
            OPSd.Dete AS Dete,
            OPSd.NrX AS NrX,
            OPSd.DocTyp AS DocTyp,
            DocTyp.id1 AS DocTyp1, 
            null as DocTyp2,
            OPSd.DocSt AS DocSt,
            OPSd.DocNr AS DocNr,
            OPSd.ClId AS Clid,
            OPSd.ClId2 AS Clid2,
            Persons.Name AS Name, 
            Persons2.Name AS Name2, 
            Persons.RegNr AS RegNr,
            Persons2.RegNr AS RegNr2,
            0 AS b0, 
            OPSd.Descr AS Descr,
            null AS Descr2,
            null AS AC1,
            null AS AC2,
            null AS SAC1,
            null AS SAC2,
            0 AS SummC,
            null AS Cur,
            OPSd.Summ AS Summ,
            OPSd.PVN AS PVN,
            null AS Rac,
            0 AS Sdb,
            0 AS SCr,
            null AS Rac2,
            null AS Rac3,
            null AS Rac4,
            null AS Rac5,
            0 AS qv,
            OPSd.ZNR AS ZNR

        FROM OPSd
            LEFT JOIN DocTyp ON OPSd.DocTyp = DocTyp.id
            LEFT JOIN Persons ON OPSd.ClId = Persons.ClId
            LEFT JOIN Persons AS Persons2 ON OPSd.ClId2 = Persons2.ClId        
        WHERE 
        (
            (:PDATE1 IS NULL OR Dete >= :PDATE1) AND
            (:PDATE2 IS NULL OR Dete <= :PDATE2) AND
            (:PCLID IS NULL OR OPSd.ClId = :PCLID OR ClId2 = :pclid) AND
            (:PTEXT IS NULL OR OPSd.Descr LIKE :PTEXT) AND
            (
                :PDOCGR IS NULL OR EXISTS(
                    SELECT DTA.ID
                    FROM doctypb AS DTB inner join doctypa AS DTA on DTB.ida = DTA.id
                    WHERE DTB.ID = OPSD.doctyp AND DTA.ID = :PDOCGR
                )
            )
        )
        ORDER BY Dete, did
        into
            :id, :spid, :did, :DETE, :nrx,
            :doctyp, :doctyp1, :doctyp2, :docst, :docnr,
            :clid, :clid2, :name, :name2, :regnr, :regnr2,
            :b0, :descr, :descr2, :ac1, :ac2, :sac1,:sac2,
            :summc, :cur, :summ, :pvn, :rac, :sdb, :scr,
            :rac2, :rac3, :rac4, :rac5, :qv, :znr
        do
        begin
            suspend;
        end

    END
    ELSE
    BEGIN
        IF (pandor = 'AND') THEN
        BEGIN
            FOR SELECT
                gen_id(GEN_ROPS1A_ID, 1) as id,
                current_connection as spid,
                OPSd.id AS did, 
                OPSd.Dete AS Dete,
                OPSd.NrX AS NrX,
                OPSd.DocTyp AS DocTyp,
                DocTyp.id1 AS DocTyp1, 
                null as DocTyp2,
                OPSd.DocSt AS DocSt,
                OPSd.DocNr AS DocNr,
                OPSd.ClId AS Clid,
                OPSd.ClId2 AS Clid2,
                Persons.Name AS Name, 
                Persons2.Name AS Name2, 
                Persons.RegNr AS RegNr,
                Persons2.RegNr AS RegNr2,
                0 AS b0, 
                OPSd.Descr AS Descr,
                null AS Descr2,
                null AS AC1,
                null AS AC2,
                null AS SAC1,
                null AS SAC2,
                0 AS SummC,
                null AS Cur,
                OPSd.Summ AS Summ,
                OPSd.PVN AS PVN,
                null AS Rac,
                0 AS Sdb,
                0 AS SCr,
                null AS Rac2,
                null AS Rac3,
                null AS Rac4,
                null AS Rac5,
                0 AS qv,
                OPSd.ZNR AS ZNR
            FROM OPSd
                LEFT JOIN DocTyp ON OPSd.DocTyp = DocTyp.id
                LEFT JOIN Persons ON OPSd.ClId = Persons.ClId
                LEFT JOIN Persons AS Persons2 ON OPSd.ClId2 = Persons2.ClId        
            WHERE 
            (
                (:PDATE1 IS NULL OR Dete >= :PDATE1) AND
                (:PDATE2 IS NULL OR Dete <= :PDATE2) AND
                (:PCLID IS NULL OR OPSd.ClId = :PCLID OR ClId2 = :pclid) AND
                (:PTEXT IS NULL OR OPSd.Descr LIKE :PTEXT)  AND
                (
                    :PDOCGR IS NULL OR EXISTS(
                        SELECT DTA.ID
                        FROM doctypb AS DTB inner join doctypa AS DTA on DTB.ida = DTA.id
                        WHERE DTB.ID = OPSD.doctyp AND DTA.ID = :PDOCGR
                    )
                )
                AND

                EXISTS     
                (
                    SELECT NULL
                    FROM OPS
                    WHERE
                    (
                        (OPS.DocId = OPSd.id) AND
                        (:PAC11 IS NULL OR AC11 LIKE :PAC11) AND
                        (:PAC12 IS NULL OR AC12 LIKE :PAC12) AND
                        (:PAC13 IS NULL OR AC13 LIKE :PAC13) AND
                        (:PAC14 IS NULL OR AC14 LIKE :PAC14) AND
                        (:PAC15 IS NULL OR AC15 LIKE :PAC15) AND

                        (:PAC21 IS NULL OR AC21 LIKE :PAC21) AND
                        (:PAC22 IS NULL OR AC22 LIKE :PAC22) AND
                        (:PAC23 IS NULL OR AC23 LIKE :PAC23) AND
                        (:PAC24 IS NULL OR AC24 LIKE :PAC24) AND
                        (:PAC25 IS NULL OR AC25 LIKE :PAC25)
                    )
                )
            )
            ORDER BY Dete, did
            into
                :id, :spid, :did, :DETE, :nrx,
                :doctyp, :doctyp1, :doctyp2, :docst, :docnr,
                :clid, :clid2, :name, :name2, :regnr, :regnr2,
                :b0, :descr, :descr2, :ac1, :ac2, :sac1,:sac2,
                :summc, :cur, :summ, :pvn, :rac, :sdb, :scr,
                :rac2, :rac3, :rac4, :rac5, :qv, :znr
            do
            begin
                suspend;
            end

        END 
        ELSE
        BEGIN
            FOR SELECT
                gen_id(GEN_ROPS1A_ID, 1) as id,
                current_connection as spid,
                OPSd.id AS did, 
                OPSd.Dete AS Dete,
                OPSd.NrX AS NrX,
                OPSd.DocTyp AS DocTyp,
                DocTyp.id1 AS DocTyp1, 
                null as DocTyp2,
                OPSd.DocSt AS DocSt,
                OPSd.DocNr AS DocNr,
                OPSd.ClId AS Clid,
                OPSd.ClId2 AS Clid2,
                Persons.Name AS Name, 
                Persons2.Name AS Name2, 
                Persons.RegNr AS RegNr,
                Persons2.RegNr AS RegNr2,
                0 AS b0, 
                OPSd.Descr AS Descr,
                null AS Descr2,
                null AS AC1,
                null AS AC2,
                null AS SAC1,
                null AS SAC2,
                0 AS SummC,
                null AS Cur,
                OPSd.Summ AS Summ,
                OPSd.PVN AS PVN,
                null AS Rac,
                0 AS Sdb,
                0 AS SCr,
                null AS Rac2,
                null AS Rac3,
                null AS Rac4,
                null AS Rac5,
                0 AS qv,
                OPSd.ZNR AS ZNR
            FROM OPSd
                LEFT JOIN DocTyp ON OPSd.DocTyp = DocTyp.id
                LEFT JOIN Persons ON OPSd.ClId = Persons.ClId
                LEFT JOIN Persons AS Persons2 ON OPSd.ClId2 = Persons2.ClId        

            WHERE 
            (
                (:PDATE1 IS NULL OR Dete >= :PDATE1) AND
                (:PDATE2 IS NULL OR Dete <= :PDATE2) AND
                (:PCLID IS NULL OR OPSd.ClId = :PCLID OR ClId2 = :pclid) AND
                (:PTEXT IS NULL OR OPSd.Descr LIKE :PTEXT) AND
                (
                    :PDOCGR IS NULL OR EXISTS(
                        SELECT DTA.ID
                        FROM doctypb AS DTB inner join doctypa AS DTA on DTB.ida = DTA.id
                        WHERE DTB.ID = OPSD.doctyp AND DTA.ID = :PDOCGR
                    )
                )
                AND

                EXISTS     
                (
                    SELECT NULL
                    FROM OPS
                    WHERE
                    (
                        (OPS.DocId = OPSd.id) AND
                        (
                            (
                                (:PAC11 IS NULL OR AC11 LIKE :PAC11) AND
                                (:PAC12 IS NULL OR AC12 LIKE :PAC12) AND
                                (:PAC13 IS NULL OR AC13 LIKE :PAC13) AND
                                (:PAC14 IS NULL OR AC14 LIKE :PAC14) AND
                                (:PAC15 IS NULL OR AC15 LIKE :PAC15)
                            )
                            OR
                            (
                                (:PAC21 IS NULL OR AC21 LIKE :PAC21) AND
                                (:PAC22 IS NULL OR AC22 LIKE :PAC22) AND
                                (:PAC23 IS NULL OR AC23 LIKE :PAC23) AND
                                (:PAC24 IS NULL OR AC24 LIKE :PAC24) AND
                                (:PAC25 IS NULL OR AC25 LIKE :PAC25)
                            )
                        )
                    )
                )
            )
            ORDER BY Dete, did
            into
                :id, :spid, :did, :DETE, :nrx,
                :doctyp, :doctyp1, :doctyp2, :docst, :docnr,
                :clid, :clid2, :name, :name2, :regnr, :regnr2,
                :b0, :descr, :descr2, :ac1, :ac2, :sac1,:sac2,
                :summc, :cur, :summ, :pvn, :rac, :sdb, :scr,
                :rac2, :rac3, :rac4, :rac5, :qv, :znr
            do
            begin
                suspend;
            end

        END
    END
end^


ALTER PROCEDURE SP_REP_KG_11 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8))
RETURNS (
    ID TYPE OF COLUMN ROPS1A.ID,
    SPID TYPE OF COLUMN ROPS1A.SPID,
    DID TYPE OF COLUMN ROPS1A.DID,
    DETE TYPE OF COLUMN ROPS1A.DETE,
    NRX TYPE OF COLUMN ROPS1A.NRX,
    DOCTYP TYPE OF COLUMN ROPS1A.DOCTYP,
    DOCTYP1 TYPE OF COLUMN ROPS1A.DOCTYP1,
    DOCTYP2 TYPE OF COLUMN ROPS1A.DOCTYP2,
    DOCST TYPE OF COLUMN ROPS1A.DOCST,
    DOCNR TYPE OF COLUMN ROPS1A.DOCNR,
    CLID TYPE OF COLUMN ROPS1A.CLID,
    CLID2 TYPE OF COLUMN ROPS1A.CLID2,
    NAME TYPE OF COLUMN ROPS1A.NAME,
    NAME2 TYPE OF COLUMN ROPS1A.NAME2,
    REGNR TYPE OF COLUMN ROPS1A.REGNR,
    REGNR2 TYPE OF COLUMN ROPS1A.REGNR2,
    B0 TYPE OF COLUMN ROPS1A.B0,
    DESCR TYPE OF COLUMN ROPS1A.DESCR,
    DESCR2 TYPE OF COLUMN ROPS1A.DESCR2,
    AC1 TYPE OF COLUMN ROPS1A.AC1,
    AC2 TYPE OF COLUMN ROPS1A.AC2,
    SAC1 TYPE OF COLUMN ROPS1A.SAC1,
    SAC2 TYPE OF COLUMN ROPS1A.SAC2,
    SUMMC TYPE OF COLUMN ROPS1A.SUMMC,
    CUR TYPE OF COLUMN ROPS1A.CUR,
    SUMM TYPE OF COLUMN ROPS1A.SUMM,
    PVN TYPE OF COLUMN ROPS1A.PVN,
    RAC TYPE OF COLUMN ROPS1A.RAC,
    SDB TYPE OF COLUMN ROPS1A.SDB,
    SCR TYPE OF COLUMN ROPS1A.SCR,
    RAC2 TYPE OF COLUMN ROPS1A.RAC2,
    RAC3 TYPE OF COLUMN ROPS1A.RAC3,
    RAC4 TYPE OF COLUMN ROPS1A.RAC4,
    RAC5 TYPE OF COLUMN ROPS1A.RAC5,
    QV TYPE OF COLUMN ROPS1A.QV,
    ZNR TYPE OF COLUMN ROPS1A.ZNR)
AS
begin
    FOR SELECT
        gen_id(GEN_ROPS1A_ID, 1) AS id,
        current_connection as spid,
        OPSd.id AS did,
        OPSd.Dete,
        OPSd.NrX,
        OPSd.DocTyp,
        DocTyp.id1 AS DocTyp1,
        DocTyp.tpZ AS DocTyp2,
        OPSd.DocSt,
        OPSd.DocNr,
        OPSd.ClId,
        OPSd.ClId2,
        P1.Name AS Name,
        P2.Name AS Name2,
        P1.RegNr AS RegNr,
        P2.RegNr AS RegNr2,
        0 AS b0,
        OPSd.Descr,
        OPS.Descr AS Descr2,
        null AS AC1,
        CASE WHEN OPS.AC11 = :pac THEN OPS.AC21 ELSE OPS.AC11 END AS Ac2,
        null AS SAC1,
        CASE WHEN OPS.AC11 = :pac THEN AcP21_2.Name ELSE AcP21.Name END AS SAc2,
        OPS.SummC AS SummC,
        OPS.cur AS Cur,
        OPS.Summ AS Summ,
        0 AS PVN,
        null AS Rac,
        CASE WHEN OPS.AC11 = :pac THEN OPS.Summ ELSE 0.00 END AS SDb,
        CASE WHEN OPS.AC21 = :pac THEN OPS.Summ ELSE 0.00 END AS SCr,
        null AS Rac2,
        null AS Rac3,
        null AS Rac4,
        null AS Rac5,
        0 AS qv,
        OPSd.ZNR
    FROM
        OPSd INNER 
        JOIN OPS ON OPSd.id = OPS.DocId
        LEFT JOIN AcP21 ON OPS.AC11 = AcP21.AC
        LEFT JOIN AcP21 AS AcP21_2 ON OPS.AC21 = AcP21_2.AC
        LEFT JOIN Persons AS P1 ON OPSd.ClId = P1.ClId
        LEFT JOIN Persons AS P2 ON OPSd.ClId2 = P2.ClId
        LEFT JOIN DocTyp ON OPSd.DocTyp = DocTyp.id
    WHERE
        OPSd.Dete BETWEEN :sdt AND :edt AND
        (OPS.AC11 = :pac OR OPS.AC21 = :pac)
    ORDER BY
        OPSd.Dete, 
        CASE WHEN OPS.AC11 = :pac THEN 1 ELSE 2 END,
        NrX 


    into
        :id, :spid, :did, :DETE, :nrx,
        :doctyp, :doctyp1, :doctyp2, :docst, :docnr,
        :clid, :clid2, :name, :name2, :regnr, :regnr2,
        :b0, :descr, :descr2, :ac1, :ac2, :sac1,:sac2,
        :summc, :cur, :summ, :pvn, :rac, :sdb, :scr,
        :rac2, :rac3, :rac4, :rac5, :qv, :znr
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_REP_KIEO_1 (
    PDID INTEGER)
RETURNS (
    ID TYPE OF COLUMN ROPS1A.ID,
    SPID TYPE OF COLUMN ROPS1A.SPID,
    DID TYPE OF COLUMN ROPS1A.DID,
    DETE TYPE OF COLUMN ROPS1A.DETE,
    NRX TYPE OF COLUMN ROPS1A.NRX,
    DOCTYP TYPE OF COLUMN ROPS1A.DOCTYP,
    DOCTYP1 TYPE OF COLUMN ROPS1A.DOCTYP1,
    DOCTYP2 TYPE OF COLUMN ROPS1A.DOCTYP2,
    DOCST TYPE OF COLUMN ROPS1A.DOCST,
    DOCNR TYPE OF COLUMN ROPS1A.DOCNR,
    CLID TYPE OF COLUMN ROPS1A.CLID,
    CLID2 TYPE OF COLUMN ROPS1A.CLID2,
    NAME TYPE OF COLUMN ROPS1A.NAME,
    NAME2 TYPE OF COLUMN ROPS1A.NAME2,
    REGNR TYPE OF COLUMN ROPS1A.REGNR,
    REGNR2 TYPE OF COLUMN ROPS1A.REGNR2,
    B0 TYPE OF COLUMN ROPS1A.B0,
    DESCR TYPE OF COLUMN ROPS1A.DESCR,
    DESCR2 TYPE OF COLUMN ROPS1A.DESCR2,
    AC1 TYPE OF COLUMN ROPS1A.AC1,
    AC2 TYPE OF COLUMN ROPS1A.AC2,
    SAC1 TYPE OF COLUMN ROPS1A.SAC1,
    SAC2 TYPE OF COLUMN ROPS1A.SAC2,
    SUMMC TYPE OF COLUMN ROPS1A.SUMMC,
    CUR TYPE OF COLUMN ROPS1A.CUR,
    SUMM TYPE OF COLUMN ROPS1A.SUMM,
    PVN TYPE OF COLUMN ROPS1A.PVN,
    RAC TYPE OF COLUMN ROPS1A.RAC,
    SDB TYPE OF COLUMN ROPS1A.SDB,
    SCR TYPE OF COLUMN ROPS1A.SCR,
    RAC2 TYPE OF COLUMN ROPS1A.RAC2,
    RAC3 TYPE OF COLUMN ROPS1A.RAC3,
    RAC4 TYPE OF COLUMN ROPS1A.RAC4,
    RAC5 TYPE OF COLUMN ROPS1A.RAC5,
    QV TYPE OF COLUMN ROPS1A.QV,
    ZNR TYPE OF COLUMN ROPS1A.ZNR)
AS
begin
    FOR SELECT
        gen_id(GEN_ROPS1A_ID, 1) AS id,
        current_connection as spid,
        OPSd.id AS did,
        OPSd.Dete,
        OPSd.NrX,
        OPSd.DocTyp,
        DocTyp.id1 AS DocTyp1,
        DocTyp.tpZ AS DocTyp2,
        OPSd.DocSt,
        OPSd.DocNr,
        OPSd.ClId,
        OPSd.ClId2,
        P1.Name AS Name,
        P2.Name AS Name2,
        P1.RegNr AS RegNr,
        P2.RegNr AS RegNr2,
        0 AS b0,
        OPSd.Descr,
        OPS.Descr AS Descr2,
        OPS.AC11 AS Ac1,
        OPS.AC21 AS Ac2,
        AcP21.Name AS SAc1,
        AcP21_2.Name AS SAc2,
        OPS.SummC AS SummC,
        OPS.cur AS Cur,
        OPS.Summ AS Summ,
        0 AS PVN,
        null AS Rac,
        OPS.Summ AS SDb,
        0.00 AS SCr,
        null AS Rac2,
        null AS Rac3,
        null AS Rac4,
        null AS Rac5,
        0 AS qv,
        OPSd.ZNR
    FROM
        OPSd INNER 
        JOIN OPS ON OPSd.id = OPS.DocId
        LEFT JOIN AcP21 ON OPS.AC11 = AcP21.AC
        LEFT JOIN AcP21 AS AcP21_2 ON OPS.AC21 = AcP21_2.AC
        LEFT JOIN Persons AS P1 ON OPSd.ClId = P1.ClId
        LEFT JOIN Persons AS P2 ON OPSd.ClId2 = P2.ClId
        LEFT JOIN DocTyp ON OPSd.DocTyp = DocTyp.id
    WHERE
        OPSd.id = :pdid

    into
        :id, :spid, :did, :DETE, :nrx,
        :doctyp, :doctyp1, :doctyp2, :docst, :docnr,
        :clid, :clid2, :name, :name2, :regnr, :regnr2,
        :b0, :descr, :descr2, :ac1, :ac2, :sac1,:sac2,
        :summc, :cur, :summ, :pvn, :rac, :sdb, :scr,
        :rac2, :rac3, :rac4, :rac5, :qv, :znr
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_REP_KIEO_21 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8))
RETURNS (
    ID TYPE OF COLUMN ROPS1A.ID,
    SPID TYPE OF COLUMN ROPS1A.SPID,
    DID TYPE OF COLUMN ROPS1A.DID,
    DETE TYPE OF COLUMN ROPS1A.DETE,
    NRX TYPE OF COLUMN ROPS1A.NRX,
    DOCTYP TYPE OF COLUMN ROPS1A.DOCTYP,
    DOCTYP1 TYPE OF COLUMN ROPS1A.DOCTYP1,
    DOCTYP2 TYPE OF COLUMN ROPS1A.DOCTYP2,
    DOCST TYPE OF COLUMN ROPS1A.DOCST,
    DOCNR TYPE OF COLUMN ROPS1A.DOCNR,
    CLID TYPE OF COLUMN ROPS1A.CLID,
    CLID2 TYPE OF COLUMN ROPS1A.CLID2,
    NAME TYPE OF COLUMN ROPS1A.NAME,
    NAME2 TYPE OF COLUMN ROPS1A.NAME2,
    REGNR TYPE OF COLUMN ROPS1A.REGNR,
    REGNR2 TYPE OF COLUMN ROPS1A.REGNR2,
    B0 TYPE OF COLUMN ROPS1A.B0,
    DESCR TYPE OF COLUMN ROPS1A.DESCR,
    DESCR2 TYPE OF COLUMN ROPS1A.DESCR2,
    AC1 TYPE OF COLUMN ROPS1A.AC1,
    AC2 TYPE OF COLUMN ROPS1A.AC2,
    SAC1 TYPE OF COLUMN ROPS1A.SAC1,
    SAC2 TYPE OF COLUMN ROPS1A.SAC2,
    SUMMC TYPE OF COLUMN ROPS1A.SUMMC,
    CUR TYPE OF COLUMN ROPS1A.CUR,
    SUMM TYPE OF COLUMN ROPS1A.SUMM,
    PVN TYPE OF COLUMN ROPS1A.PVN,
    RAC TYPE OF COLUMN ROPS1A.RAC,
    SDB TYPE OF COLUMN ROPS1A.SDB,
    SCR TYPE OF COLUMN ROPS1A.SCR,
    RAC2 TYPE OF COLUMN ROPS1A.RAC2,
    RAC3 TYPE OF COLUMN ROPS1A.RAC3,
    RAC4 TYPE OF COLUMN ROPS1A.RAC4,
    RAC5 TYPE OF COLUMN ROPS1A.RAC5,
    QV TYPE OF COLUMN ROPS1A.QV,
    ZNR TYPE OF COLUMN ROPS1A.ZNR)
AS
begin
    FOR SELECT
        gen_id(GEN_ROPS1A_ID, 1) AS id,
        current_connection as spid,
        OPSd.id AS did,
        OPSd.Dete,
        OPSd.NrX,
        OPSd.DocTyp,
        DocTyp.id1 AS DocTyp1,
        DocTyp.tpZ AS DocTyp2,
        OPSd.DocSt,
        OPSd.DocNr,
        OPSd.ClId,
        OPSd.ClId2,
        P1.Name AS Name,
        P2.Name AS Name2,
        P1.RegNr AS RegNr,
        P2.RegNr AS RegNr2,
        0 AS b0,
        OPSd.Descr,
        OPS.Descr AS Descr2,
        OPS.AC11 AS Ac1,
        OPS.AC21 AS Ac2,
        AcP21.Name AS SAc1,
        AcP21_2.Name AS SAc2,
        OPS.SummC AS SummC,
        OPS.cur AS Cur,
        OPS.Summ AS Summ,
        0 AS PVN,
        null AS Rac,
        OPS.Summ AS SDb,
        0.00 AS SCr,
        null AS Rac2,
        null AS Rac3,
        null AS Rac4,
        null AS Rac5,
        0 AS qv,
        OPSd.ZNR
    FROM
        OPSd INNER 
        JOIN OPS ON OPSd.id = OPS.DocId
        LEFT JOIN AcP21 ON OPS.AC11 = AcP21.AC
        LEFT JOIN AcP21 AS AcP21_2 ON OPS.AC21 = AcP21_2.AC
        LEFT JOIN Persons AS P1 ON OPSd.ClId = P1.ClId
        LEFT JOIN Persons AS P2 ON OPSd.ClId2 = P2.ClId
        LEFT JOIN DocTyp ON OPSd.DocTyp = DocTyp.id
    WHERE
        OPSd.Dete BETWEEN :sdt AND :edt AND
        OPS.AC11 = :pac
    ORDER BY
        OPSd.NrX

    into
        :id, :spid, :did, :DETE, :nrx,
        :doctyp, :doctyp1, :doctyp2, :docst, :docnr,
        :clid, :clid2, :name, :name2, :regnr, :regnr2,
        :b0, :descr, :descr2, :ac1, :ac2, :sac1,:sac2,
        :summc, :cur, :summ, :pvn, :rac, :sdb, :scr,
        :rac2, :rac3, :rac4, :rac5, :qv, :znr
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_REP_KIZO_21 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8))
RETURNS (
    ID TYPE OF COLUMN ROPS1A.ID,
    SPID TYPE OF COLUMN ROPS1A.SPID,
    DID TYPE OF COLUMN ROPS1A.DID,
    DETE TYPE OF COLUMN ROPS1A.DETE,
    NRX TYPE OF COLUMN ROPS1A.NRX,
    DOCTYP TYPE OF COLUMN ROPS1A.DOCTYP,
    DOCTYP1 TYPE OF COLUMN ROPS1A.DOCTYP1,
    DOCTYP2 TYPE OF COLUMN ROPS1A.DOCTYP2,
    DOCST TYPE OF COLUMN ROPS1A.DOCST,
    DOCNR TYPE OF COLUMN ROPS1A.DOCNR,
    CLID TYPE OF COLUMN ROPS1A.CLID,
    CLID2 TYPE OF COLUMN ROPS1A.CLID2,
    NAME TYPE OF COLUMN ROPS1A.NAME,
    NAME2 TYPE OF COLUMN ROPS1A.NAME2,
    REGNR TYPE OF COLUMN ROPS1A.REGNR,
    REGNR2 TYPE OF COLUMN ROPS1A.REGNR2,
    B0 TYPE OF COLUMN ROPS1A.B0,
    DESCR TYPE OF COLUMN ROPS1A.DESCR,
    DESCR2 TYPE OF COLUMN ROPS1A.DESCR2,
    AC1 TYPE OF COLUMN ROPS1A.AC1,
    AC2 TYPE OF COLUMN ROPS1A.AC2,
    SAC1 TYPE OF COLUMN ROPS1A.SAC1,
    SAC2 TYPE OF COLUMN ROPS1A.SAC2,
    SUMMC TYPE OF COLUMN ROPS1A.SUMMC,
    CUR TYPE OF COLUMN ROPS1A.CUR,
    SUMM TYPE OF COLUMN ROPS1A.SUMM,
    PVN TYPE OF COLUMN ROPS1A.PVN,
    RAC TYPE OF COLUMN ROPS1A.RAC,
    SDB TYPE OF COLUMN ROPS1A.SDB,
    SCR TYPE OF COLUMN ROPS1A.SCR,
    RAC2 TYPE OF COLUMN ROPS1A.RAC2,
    RAC3 TYPE OF COLUMN ROPS1A.RAC3,
    RAC4 TYPE OF COLUMN ROPS1A.RAC4,
    RAC5 TYPE OF COLUMN ROPS1A.RAC5,
    QV TYPE OF COLUMN ROPS1A.QV,
    ZNR TYPE OF COLUMN ROPS1A.ZNR)
AS
begin
    for SELECT
        gen_id(GEN_ROPS1A_ID, 1) AS id,
        current_connection as spid,
        OPSd.id AS did,
        OPSd.Dete,
        OPSd.NrX,
        OPSd.DocTyp,
        DocTyp.id1 AS DocTyp1,
        DocTyp.tpZ AS DocTyp2,
        OPSd.DocSt,
        OPSd.DocNr,
        OPSd.ClId,
        OPSd.ClId2,
        P1.Name AS Name,
        P2.Name AS Name2,
        P1.RegNr AS RegNr,
        P2.RegNr AS RegNr2,
        0.0 AS b0,
        OPSd.Descr,
        OPS.Descr AS Descr2,
        OPS.AC11 AS Ac1,
        OPS.AC21 AS Ac2,
        AcP21.Name AS SAc1,
        AcP21_2.Name AS SAc2,
        OPS.SummC AS SummC,
        OPS.cur AS Cur,
        OPS.Summ AS Summ,
        0.0 AS PVN,
        null AS Rac,
        0.00 AS SDb,
        OPS.Summ AS SCr,
        null AS Rac2,
        null AS Rac3,
        null AS Rac4,
        null AS Rac5,
        0 AS qv,
        OPSd.ZNR
    FROM
        OPSd INNER 
        JOIN OPS ON OPSd.id = OPS.DocId
        LEFT JOIN AcP21 ON OPS.AC11 = AcP21.AC
        LEFT JOIN AcP21 AS AcP21_2 ON OPS.AC21 = AcP21_2.AC
        LEFT JOIN Persons AS P1 ON OPSd.ClId = P1.ClId
        LEFT JOIN Persons AS P2 ON OPSd.ClId2 = P2.ClId
        LEFT JOIN DocTyp ON OPSd.DocTyp = DocTyp.id
    WHERE
        OPSd.Dete BETWEEN :sdt AND :edt AND
        OPS.AC21 = :pac
    ORDER BY
        OPSd.NrX

    into
        :id, :spid, :did, :DETE, :nrx,
        :doctyp, :doctyp1, :doctyp2, :docst, :docnr,
        :clid, :clid2, :name, :name2, :regnr, :regnr2,
        :b0, :descr, :descr2, :ac1, :ac2, :sac1,:sac2,
        :summc, :cur, :summ, :pvn, :rac, :sdb, :scr,
        :rac2, :rac3, :rac4, :rac5, :qv, :znr
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_REP_KORESP_01 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8))
RETURNS (
    ID TYPE OF COLUMN ROPS3A.ID,
    SPID TYPE OF COLUMN ROPS3A.SPID,
    RAC TYPE OF COLUMN ROPS3A.RAC,
    NAME TYPE OF COLUMN ROPS3A.NAME,
    SDB TYPE OF COLUMN ROPS3A.SDB,
    SCR TYPE OF COLUMN ROPS3A.SCR,
    AC1 TYPE OF COLUMN ROPS3A.AC1,
    CLID TYPE OF COLUMN ROPS3A.CLID)
AS
begin
    for SELECT
        gen_id(GEN_ROPS3A_ID, 1) as ID,
        current_connection as SPID,
        T2.AC AS RAC,
        AcP21.Name AS Name,
        T2.BDb AS SDb,
        T2.BCr AS SCr,
        null AS AC1,
        null AS CLID
    FROM
    (
        SELECT AC, SUM(TDb) AS BDb, SUM(TCr) AS BCr
        FROM
        (
            SELECT 
                OPS.AC21 AS AC,
                OPS.Summ AS TDb,
                0.00 AS TCr

            FROM OPSd JOIN OPS ON OPSd.id = OPS.DocId
            WHERE (OPSd.Dete BETWEEN :sdt AND :edt) AND OPS.AC11 LIKE :pac

            UNION ALL

            SELECT 
                OPS.AC11 AS AC,
                0.00 AS TDb,
                OPS.Summ AS TCr

            FROM OPSd JOIN OPS ON OPSd.id = OPS.DocId
            WHERE (OPSd.Dete BETWEEN :sdt AND :edt) AND OPS.AC21 LIKE :pac

        ) AS T1

        GROUP BY T1.AC
    ) AS T2    

    LEFT JOIN AcP21 ON AcP21.AC = T2.AC
    
    ORDER BY RAC

    into
        :id, :spid, :rac, :name, :sdb, :scr, :ac1, :clid
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_REP_KORESP_01_CLID (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15))
RETURNS (
    ID TYPE OF COLUMN ROPS3A.ID,
    SPID TYPE OF COLUMN ROPS3A.SPID,
    RAC TYPE OF COLUMN ROPS3A.RAC,
    NAME TYPE OF COLUMN ROPS3A.NAME,
    SDB TYPE OF COLUMN ROPS3A.SDB,
    SCR TYPE OF COLUMN ROPS3A.SCR,
    AC1 TYPE OF COLUMN ROPS3A.AC1,
    CLID TYPE OF COLUMN ROPS3A.CLID)
AS
begin
    FOR SELECT
        gen_id(GEN_ROPS3A_ID, 1) as ID,
        current_connection as SPID,
        T2.AC AS RAC,
        AcP21.Name AS Name,
        T2.BDb AS SDb,
        T2.BCr AS SCr,
        null AS AC1,
        :pclid AS Clid
    FROM
    (
        SELECT AC, SUM(TDb) AS BDb, SUM(TCr) AS BCr
        FROM
        (
            SELECT 
                OPS.AC21 AS AC,
                OPS.Summ AS TDb,
                0.00 AS TCr

            FROM OPSd JOIN OPS ON OPSd.id = OPS.DocId
            WHERE 
                (OPSd.Dete BETWEEN :sdt AND :edt) AND 
                OPS.AC11 LIKE :pac AND
                OPSd.ClId = :pclid


            UNION ALL

            SELECT 
                OPS.AC11 AS AC,
                0.00 AS TDb,
                OPS.Summ AS TCr

            FROM OPSd JOIN OPS ON OPSd.id = OPS.DocId
            WHERE 
                (OPSd.Dete BETWEEN :sdt AND :edt) AND 
                OPS.AC21 LIKE :pac AND
                OPSd.ClId = :pclid

        ) AS T1

        GROUP BY T1.AC
    ) AS T2    

    LEFT JOIN AcP21 ON AcP21.AC = T2.AC
    
    ORDER BY RAC

    into
        :id, :spid, :rac, :name, :sdb, :scr, :ac1, :clid
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_REP_KORESP_01_CLID2 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15))
RETURNS (
    ID TYPE OF COLUMN ROPS3A.ID,
    SPID TYPE OF COLUMN ROPS3A.SPID,
    RAC TYPE OF COLUMN ROPS3A.RAC,
    NAME TYPE OF COLUMN ROPS3A.NAME,
    SDB TYPE OF COLUMN ROPS3A.SDB,
    SCR TYPE OF COLUMN ROPS3A.SCR,
    AC1 TYPE OF COLUMN ROPS3A.AC1,
    CLID TYPE OF COLUMN ROPS3A.CLID)
AS
begin
    FOR SELECT
        gen_id(GEN_ROPS3A_ID, 1) as ID,
        current_connection as SPID,
        T2.AC AS RAC,
        AcP21.Name AS Name,
        T2.BDb AS SDb,
        T2.BCr AS SCr,
        null AS AC1,
        :pclid AS Clid
    FROM
    (
        SELECT AC, SUM(TDb) AS BDb, SUM(TCr) AS BCr
        FROM
        (
            SELECT 
                OPS.AC21 AS AC,
                OPS.Summ AS TDb,
                0.00 AS TCr

            FROM OPSd JOIN OPS ON OPSd.id = OPS.DocId
            WHERE 
                (OPSd.Dete BETWEEN :sdt AND :edt) AND 
                OPS.AC11 LIKE :pac AND
                OPSd.ClId2 = :pclid


            UNION ALL

            SELECT 
                OPS.AC11 AS AC,
                0.00 AS TDb,
                OPS.Summ AS TCr

            FROM OPSd JOIN OPS ON OPSd.id = OPS.DocId
            WHERE 
                (OPSd.Dete BETWEEN :sdt AND :edt) AND 
                OPS.AC21 LIKE :pac AND
                OPSd.ClId2 = :pclid

        ) AS T1

        GROUP BY T1.AC
    ) AS T2    

    LEFT JOIN AcP21 ON AcP21.AC = T2.AC
    
    ORDER BY RAC

    into
        :id, :spid, :rac, :name, :sdb, :scr, :ac1, :clid
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_REP_KORESP_01_CUR (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15),
    PCUR VARCHAR(3))
RETURNS (
    ID TYPE OF COLUMN ROPS3A.ID,
    SPID TYPE OF COLUMN ROPS3A.SPID,
    RAC TYPE OF COLUMN ROPS3A.RAC,
    NAME TYPE OF COLUMN ROPS3A.NAME,
    SDB TYPE OF COLUMN ROPS3A.SDB,
    SCR TYPE OF COLUMN ROPS3A.SCR,
    AC1 TYPE OF COLUMN ROPS3A.AC1,
    CLID TYPE OF COLUMN ROPS3A.CLID)
AS
begin
    FOR SELECT
        gen_id(GEN_ROPS3A_ID, 1) as ID,
        current_connection as SPID,
        T2.AC AS RAC,
        AcP21.Name AS Name,
        T2.BDb AS SDb,
        T2.BCr AS SCr,
        null AS AC1,
        null AS Clid
    FROM
    (
        SELECT AC, SUM(TDb) AS BDb, SUM(TCr) AS BCr
        FROM
        (
            SELECT 
                OPS.AC21 AS AC,
                OPS.SummC AS TDb,
                0.00 AS TCr

            FROM OPSd JOIN OPS ON OPSd.id = OPS.DocId
            WHERE 
                (OPSd.Dete BETWEEN :sdt AND :edt) AND 
                OPS.AC11 = :pac AND
                (:pclid IS NULL OR OPSd.ClId = :pclid) AND
                OPS.Cur = :pcur

            UNION ALL

            SELECT 
                OPS.AC11 AS AC,
                0.00 AS TDb,
                OPS.SummC AS TCr

            FROM OPSd JOIN OPS ON OPSd.id = OPS.DocId
            WHERE 
                (OPSd.Dete BETWEEN :sdt AND :edt) AND 
                OPS.AC21 LIKE :pac AND
                (:pclid IS NULL OR OPSd.ClId = :pclid) AND
                OPS.Cur = :pcur

        ) AS T1

        GROUP BY T1.AC
    ) AS T2    

    LEFT JOIN AcP21 ON AcP21.AC = T2.AC
    
    ORDER BY RAC
    into
        :id, :spid, :rac, :name, :sdb, :scr, :ac1, :clid
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_REP_KORESP_02 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8))
RETURNS (
    ID TYPE OF COLUMN ROPS3A.ID,
    SPID TYPE OF COLUMN ROPS3A.SPID,
    RAC TYPE OF COLUMN ROPS3A.RAC,
    NAME TYPE OF COLUMN ROPS3A.NAME,
    SDB TYPE OF COLUMN ROPS3A.SDB,
    SCR TYPE OF COLUMN ROPS3A.SCR,
    AC1 TYPE OF COLUMN ROPS3A.AC1,
    CLID TYPE OF COLUMN ROPS3A.CLID)
AS
begin
-- summ√Ñ‚Äújam korespond√Ñ‚Äújo√ÖÔ£ºos kontus p√Ñ‚Äúc b√Ñ¬Åzes konta un koresp. konta
    FOR SELECT
        gen_id(GEN_ROPS3A_ID, 1) as ID,
        current_connection as SPID,
        T2.RAC AS RAC,
        AcP21.Name AS Name,
        T2.BDb AS SDb,
        T2.BCr AS SCr,
        T2.AC AS AC1,
        null AS Clid
    FROM
    (
        SELECT AC, RAC, SUM(TDb) AS BDb, SUM(TCr) AS BCr
        FROM
        (
            SELECT 
                OPS.AC11 AS AC,
                OPS.AC21 AS RAC,
                OPS.Summ AS TDb,
                0.00 AS TCr

            FROM OPSd JOIN OPS ON OPSd.id = OPS.DocId
            WHERE (OPSd.Dete BETWEEN :sdt AND :edt) AND OPS.AC11 LIKE :pac

            UNION ALL

            SELECT 
                OPS.AC21 AS AC,
                OPS.AC11 AS RAC,
                0.00 AS TDb,
                OPS.Summ AS TCr

            FROM OPSd JOIN OPS ON OPSd.id = OPS.DocId
            WHERE (OPSd.Dete BETWEEN :sdt AND :edt) AND OPS.AC21 LIKE :pac

        ) AS T1

        GROUP BY T1.AC, T1.RAC
    ) AS T2    

    LEFT JOIN AcP21 ON AcP21.AC = T2.RAC
    
    ORDER BY AC1, RAC

    into
        :id, :spid, :rac, :name, :sdb, :scr, :ac1, :clid
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_REP_KORESP_02_CLID (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15))
RETURNS (
    ID TYPE OF COLUMN ROPS3A.ID,
    SPID TYPE OF COLUMN ROPS3A.SPID,
    RAC TYPE OF COLUMN ROPS3A.RAC,
    NAME TYPE OF COLUMN ROPS3A.NAME,
    SDB TYPE OF COLUMN ROPS3A.SDB,
    SCR TYPE OF COLUMN ROPS3A.SCR,
    AC1 TYPE OF COLUMN ROPS3A.AC1,
    CLID TYPE OF COLUMN ROPS3A.CLID)
AS
begin
-- summ√Ñ‚Äújam pec b√Ñ¬Åzes konta (AC), personas un korespond√Ñ‚Äújo√ÖÔ£º√Ñ¬Å konta (RAC)
    FOR SELECT
        gen_id(GEN_ROPS3A_ID, 1) as ID,
        current_connection as SPID,
        T2.RAC AS RAC,
        AcP21.Name AS Name,
        T2.BDb AS SDb,
        T2.BCr AS SCr,
        T2.AC AS AC1,
        T2.Clid AS Clid
    FROM
    (
        SELECT AC, RAC, Clid, SUM(TDb) AS BDb, SUM(TCr) AS BCr
        FROM
        (
            SELECT 
                OPS.AC11 AS AC,
                OPS.AC21 AS RAC,
                OPSd.ClId AS Clid,
                OPS.Summ AS TDb,
                0.00 AS TCr

            FROM OPSd JOIN OPS ON OPSd.id = OPS.DocId
            WHERE 
                (OPSd.Dete BETWEEN :sdt AND :edt) AND 
                OPS.AC11 LIKE :pac AND
                (:pclid IS NULL OR OPSd.ClId = :pclid)


            UNION ALL

            SELECT 
                OPS.AC21 AS AC,
                OPS.AC11 AS RAC,
                OPSd.ClId AS Clid,
                0.00 AS TDb,
                OPS.Summ AS TCr

            FROM OPSd JOIN OPS ON OPSd.id = OPS.DocId
            WHERE 
                (OPSd.Dete BETWEEN :sdt AND :edt) AND 
                OPS.AC21 LIKE :pac AND
                (:pclid IS NULL OR OPSd.ClId = :pclid)

        ) AS T1

        GROUP BY T1.AC, T1.RAC, Clid
    ) AS T2    

    LEFT JOIN AcP21 ON AcP21.AC = T2.RAC
    
    ORDER BY AC1, Clid, RAC

    into
        :id, :spid, :rac, :name, :sdb, :scr, :ac1, :clid
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_REP_KORESP_11 (
    PSD DATE,
    PED DATE,
    PAC VARCHAR(8))
RETURNS (
    ID TYPE OF COLUMN ROPS1A.ID,
    SPID TYPE OF COLUMN ROPS1A.SPID,
    DID TYPE OF COLUMN ROPS1A.DID,
    DETE TYPE OF COLUMN ROPS1A.DETE,
    NRX TYPE OF COLUMN ROPS1A.NRX,
    DOCTYP TYPE OF COLUMN ROPS1A.DOCTYP,
    DOCTYP1 TYPE OF COLUMN ROPS1A.DOCTYP1,
    DOCTYP2 TYPE OF COLUMN ROPS1A.DOCTYP2,
    DOCST TYPE OF COLUMN ROPS1A.DOCST,
    DOCNR TYPE OF COLUMN ROPS1A.DOCNR,
    CLID TYPE OF COLUMN ROPS1A.CLID,
    CLID2 TYPE OF COLUMN ROPS1A.CLID2,
    NAME TYPE OF COLUMN ROPS1A.NAME,
    NAME2 TYPE OF COLUMN ROPS1A.NAME2,
    REGNR TYPE OF COLUMN ROPS1A.REGNR,
    REGNR2 TYPE OF COLUMN ROPS1A.REGNR2,
    B0 TYPE OF COLUMN ROPS1A.B0,
    DESCR TYPE OF COLUMN ROPS1A.DESCR,
    DESCR2 TYPE OF COLUMN ROPS1A.DESCR2,
    AC1 TYPE OF COLUMN ROPS1A.AC1,
    AC2 TYPE OF COLUMN ROPS1A.AC2,
    SAC1 TYPE OF COLUMN ROPS1A.SAC1,
    SAC2 TYPE OF COLUMN ROPS1A.SAC2,
    SUMMC TYPE OF COLUMN ROPS1A.SUMMC,
    CUR TYPE OF COLUMN ROPS1A.CUR,
    SUMM TYPE OF COLUMN ROPS1A.SUMM,
    PVN TYPE OF COLUMN ROPS1A.PVN,
    RAC TYPE OF COLUMN ROPS1A.RAC,
    SDB TYPE OF COLUMN ROPS1A.SDB,
    SCR TYPE OF COLUMN ROPS1A.SCR,
    RAC2 TYPE OF COLUMN ROPS1A.RAC2,
    RAC3 TYPE OF COLUMN ROPS1A.RAC3,
    RAC4 TYPE OF COLUMN ROPS1A.RAC4,
    RAC5 TYPE OF COLUMN ROPS1A.RAC5,
    QV TYPE OF COLUMN ROPS1A.QV,
    ZNR TYPE OF COLUMN ROPS1A.ZNR)
AS
begin
    FOR SELECT
        id, spid, did, DETE, nrx,
        doctyp, doctyp1, doctyp2, docst, docnr,
        clid, clid2, name, name2, regnr, regnr2,
        b0, descr, descr2, ac1, ac2, sac1, sac2,
        summc, cur, summ, pvn, rac, sdb, scr,
        rac2, rac3, rac4, rac5, qv, znr

    FROM
    (
        SELECT 
            gen_id(GEN_ROPS1A_ID, 1) AS id,
            current_connection as spid,
            OPSd.id AS did,
            OPSd.Dete,
            OPSd.NrX,
            OPSd.DocTyp,
            DocTyp.id1 AS DocTyp1,
            DocTyp.tpZ AS DocTyp2,
            OPSd.DocSt,
            OPSd.DocNr,
            OPSd.ClId,
            OPSd.ClId2,
            P1.Name AS Name,
            P2.Name AS Name2,
            P1.RegNr AS RegNr,
            P2.RegNr AS RegNr2,
            0 AS b0,
            OPSd.Descr,
            OPS.Descr AS Descr2,
            OPS.AC11 AS Ac1,
            null AS Ac2,
            null AS SAc1,
            null AS SAc2,
            OPS.SummC AS SummC,
            OPS.cur AS Cur,
            OPS.Summ AS Summ,
            0 AS PVN,
            OPS.AC21 AS RAC,
            OPS.Summ AS SDb,
            0.00 AS SCr,
            OPS.AC22 AS RAC2,
            OPS.AC23 AS RAC3,
            OPS.AC24 AS RAC4,
            OPS.AC25 AS RAC5,
            OPS.QV,
            OPSd.ZNR
        FROM
            OPSd INNER 
            JOIN OPS ON OPSd.id = OPS.DocId
            LEFT JOIN Persons AS P1 ON OPSd.ClId = P1.ClId
            LEFT JOIN Persons AS P2 ON OPSd.ClId2 = P2.ClId
            LEFT JOIN DocTyp ON OPSd.DocTyp = DocTyp.id
        WHERE
            (OPSd.Dete BETWEEN :psd AND :ped) AND
            OPS.AC11 LIKE :pac

        UNION ALL

        SELECT 
            gen_id(GEN_ROPS1A_ID, 1) AS id,
            current_connection as spid,
            OPSd.id AS did,
            OPSd.Dete,
            OPSd.NrX,
            OPSd.DocTyp,
            DocTyp.id1 AS DocTyp1,
            DocTyp.tpZ AS DocTyp2,
            OPSd.DocSt,
            OPSd.DocNr,
            OPSd.ClId,
            OPSd.ClId2,
            P1.Name AS Name,
            P2.Name AS Name2,
            P1.RegNr AS RegNr,
            P2.RegNr AS RegNr2,
            0 AS b0,
            OPSd.Descr,
            OPS.Descr AS Descr2,
            OPS.AC21 AS Ac1,
            null AS Ac2,
            null AS SAc1,
            null AS SAc2,
            OPS.SummC AS SummC,
            OPS.cur AS Cur,
            OPS.Summ AS Summ,
            0 AS PVN,
            OPS.AC11 AS RAC,
            0.00 AS SDb,
            OPS.Summ AS SCr,
            OPS.AC12 AS RAC2,
            OPS.AC13 AS RAC3,
            OPS.AC14 AS RAC4,
            OPS.AC15 AS RAC5,
            OPS.QV,
            OPSd.ZNR
        FROM
            OPSd INNER 
            JOIN OPS ON OPSd.id = OPS.DocId
            LEFT JOIN Persons AS P1 ON OPSd.ClId = P1.ClId
            LEFT JOIN Persons AS P2 ON OPSd.ClId2 = P2.ClId
            LEFT JOIN DocTyp ON OPSd.DocTyp = DocTyp.id
        WHERE
            (OPSd.Dete BETWEEN :psd AND :ped) AND
            OPS.AC21 LIKE :pac
    ) AS TT
    ORDER BY TT.Dete, TT.ZNR


    into
        :id, :spid, :did, :DETE, :nrx,
        :doctyp, :doctyp1, :doctyp2, :docst, :docnr,
        :clid, :clid2, :name, :name2, :regnr, :regnr2,
        :b0, :descr, :descr2, :ac1, :ac2, :sac1,:sac2,
        :summc, :cur, :summ, :pvn, :rac, :sdb, :scr,
        :rac2, :rac3, :rac4, :rac5, :qv, :znr
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_REP_KORESP_11_CLID (
    PSD DATE,
    PED DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15))
RETURNS (
    ID TYPE OF COLUMN ROPS1A.ID,
    SPID TYPE OF COLUMN ROPS1A.SPID,
    DID TYPE OF COLUMN ROPS1A.DID,
    DETE TYPE OF COLUMN ROPS1A.DETE,
    NRX TYPE OF COLUMN ROPS1A.NRX,
    DOCTYP TYPE OF COLUMN ROPS1A.DOCTYP,
    DOCTYP1 TYPE OF COLUMN ROPS1A.DOCTYP1,
    DOCTYP2 TYPE OF COLUMN ROPS1A.DOCTYP2,
    DOCST TYPE OF COLUMN ROPS1A.DOCST,
    DOCNR TYPE OF COLUMN ROPS1A.DOCNR,
    CLID TYPE OF COLUMN ROPS1A.CLID,
    CLID2 TYPE OF COLUMN ROPS1A.CLID2,
    NAME TYPE OF COLUMN ROPS1A.NAME,
    NAME2 TYPE OF COLUMN ROPS1A.NAME2,
    REGNR TYPE OF COLUMN ROPS1A.REGNR,
    REGNR2 TYPE OF COLUMN ROPS1A.REGNR2,
    B0 TYPE OF COLUMN ROPS1A.B0,
    DESCR TYPE OF COLUMN ROPS1A.DESCR,
    DESCR2 TYPE OF COLUMN ROPS1A.DESCR2,
    AC1 TYPE OF COLUMN ROPS1A.AC1,
    AC2 TYPE OF COLUMN ROPS1A.AC2,
    SAC1 TYPE OF COLUMN ROPS1A.SAC1,
    SAC2 TYPE OF COLUMN ROPS1A.SAC2,
    SUMMC TYPE OF COLUMN ROPS1A.SUMMC,
    CUR TYPE OF COLUMN ROPS1A.CUR,
    SUMM TYPE OF COLUMN ROPS1A.SUMM,
    PVN TYPE OF COLUMN ROPS1A.PVN,
    RAC TYPE OF COLUMN ROPS1A.RAC,
    SDB TYPE OF COLUMN ROPS1A.SDB,
    SCR TYPE OF COLUMN ROPS1A.SCR,
    RAC2 TYPE OF COLUMN ROPS1A.RAC2,
    RAC3 TYPE OF COLUMN ROPS1A.RAC3,
    RAC4 TYPE OF COLUMN ROPS1A.RAC4,
    RAC5 TYPE OF COLUMN ROPS1A.RAC5,
    QV TYPE OF COLUMN ROPS1A.QV,
    ZNR TYPE OF COLUMN ROPS1A.ZNR)
AS
begin
    FOR SELECT
        id, spid, did, DETE, nrx,
        doctyp, doctyp1, doctyp2, docst, docnr,
        clid, clid2, name, name2, regnr, regnr2,
        b0, descr, descr2, ac1, ac2, sac1, sac2,
        summc, cur, summ, pvn, rac, sdb, scr,
        rac2, rac3, rac4, rac5, qv, znr

    FROM
    (
        SELECT 
            gen_id(GEN_ROPS1A_ID, 1) AS id,
            current_connection as spid,
            OPSd.id AS did,
            OPSd.Dete,
            OPSd.NrX,
            OPSd.DocTyp,
            DocTyp.id1 AS DocTyp1,
            DocTyp.tpZ AS DocTyp2,
            OPSd.DocSt,
            OPSd.DocNr,
            OPSd.ClId,
            OPSd.ClId2,
            P1.Name AS Name,
            P2.Name AS Name2,
            P1.RegNr AS RegNr,
            P2.RegNr AS RegNr2,
            0 AS b0,
            OPSd.Descr,
            OPS.Descr AS Descr2,
            OPS.AC11 AS Ac1,
            null AS Ac2,
            null AS SAc1,
            null AS SAc2,
            OPS.SummC AS SummC,
            OPS.cur AS Cur,
            OPS.Summ AS Summ,
            0 AS PVN,
            OPS.AC21 AS RAC,
            OPS.Summ AS SDb,
            0.00 AS SCr,
            OPS.AC22 AS RAC2,
            OPS.AC23 AS RAC3,
            OPS.AC24 AS RAC4,
            OPS.AC25 AS RAC5,
            OPS.QV,
            OPSd.ZNR
        FROM
            OPSd
            INNER JOIN OPS ON OPSd.id = OPS.DocId
            LEFT JOIN Persons AS P1 ON OPSd.ClId = P1.ClId
            LEFT JOIN Persons AS P2 ON OPSd.ClId2 = P2.ClId
            LEFT JOIN DocTyp ON OPSd.DocTyp = DocTyp.id
        WHERE
            (OPSd.Dete BETWEEN :psd AND :ped) AND
            OPS.AC11 LIKE :pac AND
            OPSd.ClId = :pclid

        UNION ALL

        SELECT 
            gen_id(GEN_ROPS1A_ID, 1) AS id,
            current_connection as spid,
            OPSd.id AS did,
            OPSd.Dete,
            OPSd.NrX,
            OPSd.DocTyp,
            DocTyp.id1 AS DocTyp1,
            DocTyp.tpZ AS DocTyp2,
            OPSd.DocSt,
            OPSd.DocNr,
            OPSd.ClId,
            OPSd.ClId2,
            P1.Name AS Name,
            P2.Name AS Name2,
            P1.RegNr AS RegNr,
            P2.RegNr AS RegNr2,
            0 AS b0,
            OPSd.Descr,
            OPS.Descr AS Descr2,
            OPS.AC21 AS Ac1,
            null AS Ac2,
            null AS SAc1,
            null AS SAc2,
            OPS.SummC AS SummC,
            OPS.cur AS Cur,
            OPS.Summ AS Summ,
            0 AS PVN,
            OPS.AC11 AS RAC,
            0.00 AS SDb,
            OPS.Summ AS SCr,
            OPS.AC12 AS RAC2,
            OPS.AC13 AS RAC3,
            OPS.AC14 AS RAC4,
            OPS.AC15 AS RAC5,
            OPS.QV,
            OPSd.ZNR
        FROM
            OPSd
            INNER JOIN OPS ON OPSd.id = OPS.DocId
            LEFT JOIN Persons AS P1 ON OPSd.ClId = P1.ClId
            LEFT JOIN Persons AS P2 ON OPSd.ClId2 = P2.ClId
            LEFT JOIN DocTyp ON OPSd.DocTyp = DocTyp.id
        WHERE
            (OPSd.Dete BETWEEN :psd AND :ped) AND
            OPS.AC21 LIKE :pac AND
            OPSd.ClId = :pclid
    ) AS TT
    ORDER BY TT.Dete, TT.ZNR


    into
        :id, :spid, :did, :DETE, :nrx,
        :doctyp, :doctyp1, :doctyp2, :docst, :docnr,
        :clid, :clid2, :name, :name2, :regnr, :regnr2,
        :b0, :descr, :descr2, :ac1, :ac2, :sac1,:sac2,
        :summc, :cur, :summ, :pvn, :rac, :sdb, :scr,
        :rac2, :rac3, :rac4, :rac5, :qv, :znr
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_REP_KORESP_11_CLID2 (
    PSD DATE,
    PED DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15))
RETURNS (
    ID TYPE OF COLUMN ROPS1A.ID,
    SPID TYPE OF COLUMN ROPS1A.SPID,
    DID TYPE OF COLUMN ROPS1A.DID,
    DETE TYPE OF COLUMN ROPS1A.DETE,
    NRX TYPE OF COLUMN ROPS1A.NRX,
    DOCTYP TYPE OF COLUMN ROPS1A.DOCTYP,
    DOCTYP1 TYPE OF COLUMN ROPS1A.DOCTYP1,
    DOCTYP2 TYPE OF COLUMN ROPS1A.DOCTYP2,
    DOCST TYPE OF COLUMN ROPS1A.DOCST,
    DOCNR TYPE OF COLUMN ROPS1A.DOCNR,
    CLID TYPE OF COLUMN ROPS1A.CLID,
    CLID2 TYPE OF COLUMN ROPS1A.CLID2,
    NAME TYPE OF COLUMN ROPS1A.NAME,
    NAME2 TYPE OF COLUMN ROPS1A.NAME2,
    REGNR TYPE OF COLUMN ROPS1A.REGNR,
    REGNR2 TYPE OF COLUMN ROPS1A.REGNR2,
    B0 TYPE OF COLUMN ROPS1A.B0,
    DESCR TYPE OF COLUMN ROPS1A.DESCR,
    DESCR2 TYPE OF COLUMN ROPS1A.DESCR2,
    AC1 TYPE OF COLUMN ROPS1A.AC1,
    AC2 TYPE OF COLUMN ROPS1A.AC2,
    SAC1 TYPE OF COLUMN ROPS1A.SAC1,
    SAC2 TYPE OF COLUMN ROPS1A.SAC2,
    SUMMC TYPE OF COLUMN ROPS1A.SUMMC,
    CUR TYPE OF COLUMN ROPS1A.CUR,
    SUMM TYPE OF COLUMN ROPS1A.SUMM,
    PVN TYPE OF COLUMN ROPS1A.PVN,
    RAC TYPE OF COLUMN ROPS1A.RAC,
    SDB TYPE OF COLUMN ROPS1A.SDB,
    SCR TYPE OF COLUMN ROPS1A.SCR,
    RAC2 TYPE OF COLUMN ROPS1A.RAC2,
    RAC3 TYPE OF COLUMN ROPS1A.RAC3,
    RAC4 TYPE OF COLUMN ROPS1A.RAC4,
    RAC5 TYPE OF COLUMN ROPS1A.RAC5,
    QV TYPE OF COLUMN ROPS1A.QV,
    ZNR TYPE OF COLUMN ROPS1A.ZNR)
AS
begin
    FOR SELECT
        id, spid, did, DETE, nrx,
        doctyp, doctyp1, doctyp2, docst, docnr,
        clid, clid2, name, name2, regnr, regnr2,
        b0, descr, descr2, ac1, ac2, sac1, sac2,
        summc, cur, summ, pvn, rac, sdb, scr,
        rac2, rac3, rac4, rac5, qv, znr

    FROM
    (
        SELECT 
            gen_id(GEN_ROPS1A_ID, 1) AS id,
            current_connection as spid,
            OPSd.id AS did,
            OPSd.Dete,
            OPSd.NrX,
            OPSd.DocTyp,
            DocTyp.id1 AS DocTyp1,
            DocTyp.tpZ AS DocTyp2,
            OPSd.DocSt,
            OPSd.DocNr,
            OPSd.ClId,
            OPSd.ClId2,
            P1.Name AS Name,
            P2.Name AS Name2,
            P1.RegNr AS RegNr,
            P2.RegNr AS RegNr2,
            0 AS b0,
            OPSd.Descr,
            OPS.Descr AS Descr2,
            OPS.AC11 AS Ac1,
            null AS Ac2,
            null AS SAc1,
            null AS SAc2,
            OPS.SummC AS SummC,
            OPS.cur AS Cur,
            OPS.Summ AS Summ,
            0 AS PVN,
            OPS.AC21 AS RAC,
            OPS.Summ AS SDb,
            0.00 AS SCr,
            OPS.AC22 AS RAC2,
            OPS.AC23 AS RAC3,
            OPS.AC24 AS RAC4,
            OPS.AC25 AS RAC5,
            OPS.QV,
            OPSd.ZNR
        FROM
            OPSd
            INNER JOIN OPS ON OPSd.id = OPS.DocId
            LEFT JOIN Persons AS P1 ON OPSd.ClId = P1.ClId
            LEFT JOIN Persons AS P2 ON OPSd.ClId2 = P2.ClId
            LEFT JOIN DocTyp ON OPSd.DocTyp = DocTyp.id
        WHERE
            (OPSd.Dete BETWEEN :psd AND :ped) AND
            OPS.AC11 LIKE :pac AND
            OPSd.ClId2 = :pclid

        UNION ALL

        SELECT 
            gen_id(GEN_ROPS1A_ID, 1) AS id,
            current_connection as spid,
            OPSd.id AS did,
            OPSd.Dete,
            OPSd.NrX,
            OPSd.DocTyp,
            DocTyp.id1 AS DocTyp1,
            DocTyp.tpZ AS DocTyp2,
            OPSd.DocSt,
            OPSd.DocNr,
            OPSd.ClId,
            OPSd.ClId2,
            P1.Name AS Name,
            P2.Name AS Name2,
            P1.RegNr AS RegNr,
            P2.RegNr AS RegNr2,
            0 AS b0,
            OPSd.Descr,
            OPS.Descr AS Descr2,
            OPS.AC21 AS Ac1,
            null AS Ac2,
            null AS SAc1,
            null AS SAc2,
            OPS.SummC AS SummC,
            OPS.cur AS Cur,
            OPS.Summ AS Summ,
            0 AS PVN,
            OPS.AC11 AS RAC,
            0.00 AS SDb,
            OPS.Summ AS SCr,
            OPS.AC12 AS RAC2,
            OPS.AC13 AS RAC3,
            OPS.AC14 AS RAC4,
            OPS.AC15 AS RAC5,
            OPS.QV,
            OPSd.ZNR
        FROM
            OPSd
            INNER JOIN OPS ON OPSd.id = OPS.DocId
            LEFT JOIN Persons AS P1 ON OPSd.ClId = P1.ClId
            LEFT JOIN Persons AS P2 ON OPSd.ClId2 = P2.ClId
            LEFT JOIN DocTyp ON OPSd.DocTyp = DocTyp.id
        WHERE
            (OPSd.Dete BETWEEN :psd AND :ped) AND
            OPS.AC21 LIKE :pac AND
            OPSd.ClId2 = :pclid
    ) AS TT
    ORDER BY TT.Dete, TT.ZNR


    into
        :id, :spid, :did, :DETE, :nrx,
        :doctyp, :doctyp1, :doctyp2, :docst, :docnr,
        :clid, :clid2, :name, :name2, :regnr, :regnr2,
        :b0, :descr, :descr2, :ac1, :ac2, :sac1,:sac2,
        :summc, :cur, :summ, :pvn, :rac, :sdb, :scr,
        :rac2, :rac3, :rac4, :rac5, :qv, :znr
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_REP_KORESP_11_CUR (
    PSD DATE,
    PED DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15),
    PCUR VARCHAR(3))
RETURNS (
    ID TYPE OF COLUMN ROPS1A.ID,
    SPID TYPE OF COLUMN ROPS1A.SPID,
    DID TYPE OF COLUMN ROPS1A.DID,
    DETE TYPE OF COLUMN ROPS1A.DETE,
    NRX TYPE OF COLUMN ROPS1A.NRX,
    DOCTYP TYPE OF COLUMN ROPS1A.DOCTYP,
    DOCTYP1 TYPE OF COLUMN ROPS1A.DOCTYP1,
    DOCTYP2 TYPE OF COLUMN ROPS1A.DOCTYP2,
    DOCST TYPE OF COLUMN ROPS1A.DOCST,
    DOCNR TYPE OF COLUMN ROPS1A.DOCNR,
    CLID TYPE OF COLUMN ROPS1A.CLID,
    CLID2 TYPE OF COLUMN ROPS1A.CLID2,
    NAME TYPE OF COLUMN ROPS1A.NAME,
    NAME2 TYPE OF COLUMN ROPS1A.NAME2,
    REGNR TYPE OF COLUMN ROPS1A.REGNR,
    REGNR2 TYPE OF COLUMN ROPS1A.REGNR2,
    B0 TYPE OF COLUMN ROPS1A.B0,
    DESCR TYPE OF COLUMN ROPS1A.DESCR,
    DESCR2 TYPE OF COLUMN ROPS1A.DESCR2,
    AC1 TYPE OF COLUMN ROPS1A.AC1,
    AC2 TYPE OF COLUMN ROPS1A.AC2,
    SAC1 TYPE OF COLUMN ROPS1A.SAC1,
    SAC2 TYPE OF COLUMN ROPS1A.SAC2,
    SUMMC TYPE OF COLUMN ROPS1A.SUMMC,
    CUR TYPE OF COLUMN ROPS1A.CUR,
    SUMM TYPE OF COLUMN ROPS1A.SUMM,
    PVN TYPE OF COLUMN ROPS1A.PVN,
    RAC TYPE OF COLUMN ROPS1A.RAC,
    SDB TYPE OF COLUMN ROPS1A.SDB,
    SCR TYPE OF COLUMN ROPS1A.SCR,
    RAC2 TYPE OF COLUMN ROPS1A.RAC2,
    RAC3 TYPE OF COLUMN ROPS1A.RAC3,
    RAC4 TYPE OF COLUMN ROPS1A.RAC4,
    RAC5 TYPE OF COLUMN ROPS1A.RAC5,
    QV TYPE OF COLUMN ROPS1A.QV,
    ZNR TYPE OF COLUMN ROPS1A.ZNR)
AS
begin
    FOR SELECT
        id, spid, did, DETE, nrx,
        doctyp, doctyp1, doctyp2, docst, docnr,
        clid, clid2, name, name2, regnr, regnr2,
        b0, descr, descr2, ac1, ac2, sac1, sac2,
        summc, cur, summ, pvn, rac, sdb, scr,
        rac2, rac3, rac4, rac5, qv, znr

    FROM
    (
        SELECT 
            gen_id(GEN_ROPS1A_ID, 1) AS id,
            current_connection as spid,
            OPSd.id AS did,
            OPSd.Dete,
            OPSd.NrX,
            OPSd.DocTyp,
            DocTyp.id1 AS DocTyp1,
            DocTyp.tpZ AS DocTyp2,
            OPSd.DocSt,
            OPSd.DocNr,
            OPSd.ClId,
            OPSd.ClId2,
            P1.Name AS Name,
            P2.Name AS Name2,
            P1.RegNr AS RegNr,
            P2.RegNr AS RegNr2,
            0 AS b0,
            OPSd.Descr,
            OPS.Descr AS Descr2,
            OPS.AC11 AS Ac1,
            null AS Ac2,
            null AS SAc1,
            null AS SAc2,
            OPS.SummC AS SummC,
            OPS.cur AS Cur,
            OPS.SummC AS Summ,
            0 AS PVN,
            OPS.AC21 AS RAC,
            OPS.SummC AS SDb,
            0.00 AS SCr,
            OPS.AC22 AS RAC2,
            OPS.AC23 AS RAC3,
            OPS.AC24 AS RAC4,
            OPS.AC25 AS RAC5,
            OPS.QV,
            OPSd.ZNR
        FROM
            OPSd
            INNER JOIN OPS ON OPSd.id = OPS.DocId
            LEFT JOIN Persons AS P1 ON OPSd.ClId = P1.ClId
            LEFT JOIN Persons AS P2 ON OPSd.ClId2 = P2.ClId
            LEFT JOIN DocTyp ON OPSd.DocTyp = DocTyp.id
        WHERE
            (OPSd.Dete BETWEEN :psd AND :ped) AND
            OPS.AC11 LIKE :pac AND
            (:pclid IS NULL OR OPSd.ClId = :pclid) AND
            OPS.Cur = :pcur

        UNION ALL

        SELECT 
            gen_id(GEN_ROPS1A_ID, 1) AS id,
            current_connection as spid,
            OPSd.id AS did,
            OPSd.Dete,
            OPSd.NrX,
            OPSd.DocTyp,
            DocTyp.id1 AS DocTyp1,
            DocTyp.tpZ AS DocTyp2,
            OPSd.DocSt,
            OPSd.DocNr,
            OPSd.ClId,
            OPSd.ClId2,
            P1.Name AS Name,
            P2.Name AS Name2,
            P1.RegNr AS RegNr,
            P2.RegNr AS RegNr2,
            0 AS b0,
            OPSd.Descr,
            OPS.Descr AS Descr2,
            OPS.AC21 AS Ac1,
            null AS Ac2,
            null AS SAc1,
            null AS SAc2,
            OPS.SummC AS SummC,
            OPS.cur AS Cur,
            OPS.SummC AS Summ,
            0 AS PVN,
            OPS.AC11 AS RAC,
            0.00 AS SDb,
            OPS.SummC AS SCr,
            OPS.AC12 AS RAC2,
            OPS.AC13 AS RAC3,
            OPS.AC14 AS RAC4,
            OPS.AC15 AS RAC5,
            OPS.QV,
            OPSd.ZNR
        FROM
            OPSd
            INNER JOIN OPS ON OPSd.id = OPS.DocId
            LEFT JOIN Persons AS P1 ON OPSd.ClId = P1.ClId
            LEFT JOIN Persons AS P2 ON OPSd.ClId2 = P2.ClId
            LEFT JOIN DocTyp ON OPSd.DocTyp = DocTyp.id
        WHERE
            (OPSd.Dete BETWEEN :psd AND :ped) AND
            OPS.AC21 LIKE :pac AND
            (:pclid IS NULL OR OPSd.ClId = :pclid) AND
            OPS.Cur = :pcur
    ) AS TT
    ORDER BY TT.Dete, TT.ZNR


    into
        :id, :spid, :did, :DETE, :nrx,
        :doctyp, :doctyp1, :doctyp2, :docst, :docnr,
        :clid, :clid2, :name, :name2, :regnr, :regnr2,
        :b0, :descr, :descr2, :ac1, :ac2, :sac1,:sac2,
        :summc, :cur, :summ, :pvn, :rac, :sdb, :scr,
        :rac2, :rac3, :rac4, :rac5, :qv, :znr
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_REP_NPMT_11 (
    SDT DATE,
    EDT DATE,
    PAD VARCHAR(3))
RETURNS (
    ID TYPE OF COLUMN TREPMT.ID,
    SPID TYPE OF COLUMN TREPMT.SPID,
    AD TYPE OF COLUMN TREPMT.AD,
    AC1 TYPE OF COLUMN TREPMT.AC1,
    AC2 TYPE OF COLUMN TREPMT.AC2,
    ACN1 TYPE OF COLUMN TREPMT.ACN1,
    ACN2 TYPE OF COLUMN TREPMT.ACN2,
    M1 TYPE OF COLUMN TREPMT.M1,
    M2 TYPE OF COLUMN TREPMT.M2,
    M3 TYPE OF COLUMN TREPMT.M3,
    M4 TYPE OF COLUMN TREPMT.M4,
    M5 TYPE OF COLUMN TREPMT.M5,
    M6 TYPE OF COLUMN TREPMT.M6,
    M7 TYPE OF COLUMN TREPMT.M7,
    M8 TYPE OF COLUMN TREPMT.M8,
    M9 TYPE OF COLUMN TREPMT.M9,
    M10 TYPE OF COLUMN TREPMT.M10,
    M11 TYPE OF COLUMN TREPMT.M11,
    M12 TYPE OF COLUMN TREPMT.M12,
    N1 TYPE OF COLUMN TREPMT.N1,
    N2 TYPE OF COLUMN TREPMT.N2,
    N3 TYPE OF COLUMN TREPMT.N3,
    N4 TYPE OF COLUMN TREPMT.N4,
    N5 TYPE OF COLUMN TREPMT.N5,
    N6 TYPE OF COLUMN TREPMT.N6,
    N7 TYPE OF COLUMN TREPMT.N7,
    N8 TYPE OF COLUMN TREPMT.N8,
    N9 TYPE OF COLUMN TREPMT.N9,
    N10 TYPE OF COLUMN TREPMT.N10,
    N11 TYPE OF COLUMN TREPMT.N11,
    N12 TYPE OF COLUMN TREPMT.N12,
    MT TYPE OF COLUMN TREPMT.MT,
    NT TYPE OF COLUMN TREPMT.NT)
AS
begin
-- summ√Ñ‚Äújam debeta AC12 (izdevumus)
-- uz TRepMT
    FOR SELECT
        gen_id(GEN_TREPMT_ID, 1) as ID,
        current_connection as SPID,
        :pad AS ad,
        T3.AC AS AC1,
        NULL AS AC2,
        AcP21.Name AS ACN1,
        NULL AS ACN2,
        M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12,
        0.0 AS N1, 0.0 AS N2, 0.0 AS N3, 0.0 AS N4, 0.0 AS N5, 0.0 AS N6,
        0.0 AS N7, 0.0 AS N8, 0.0 AS N9, 0.0 AS N10, 0.0 AS N11, 0.0 AS N12,
        0.0 AS MT, 0.0 AS NT
        
    FROM
    (
        SELECT 
            AC,
            SUM(CASE WHEN MT = 1 THEN ADb ELSE 0.00 END) AS M1,
            SUM(CASE WHEN MT = 2 THEN ADb ELSE 0.00 END) AS M2,
            SUM(CASE WHEN MT = 3 THEN ADb ELSE 0.00 END) AS M3,
            SUM(CASE WHEN MT = 4 THEN ADb ELSE 0.00 END) AS M4,
            SUM(CASE WHEN MT = 5 THEN ADb ELSE 0.00 END) AS M5,
            SUM(CASE WHEN MT = 6 THEN ADb ELSE 0.00 END) AS M6,
            SUM(CASE WHEN MT = 7 THEN ADb ELSE 0.00 END) AS M7,
            SUM(CASE WHEN MT = 8 THEN ADb ELSE 0.00 END) AS M8,
            SUM(CASE WHEN MT = 9 THEN ADb ELSE 0.00 END) AS M9,
            SUM(CASE WHEN MT = 10 THEN ADb ELSE 0.00 END) AS M10,
            SUM(CASE WHEN MT = 11 THEN ADb ELSE 0.00 END) AS M11,
            SUM(CASE WHEN MT = 12 THEN ADb ELSE 0.00 END) AS M12

        FROM
        (
            SELECT AC, MT, SUM(SDb) AS ADb, SUM(SCr) AS ACr
            FROM
            (
                SELECT 
                    OPS.AC12 AS AC,
                    EXTRACT(MONTH FROM OPSd.Dete) AS MT,
                    OPS.Summ AS SDb,
                    0.00 AS SCr

                FROM 
                    OPSd JOIN OPS ON OPSd.id = OPS.DocId
                    LEFT JOIN AcP21 ON OPS.AC12 = AcP21.AC
                WHERE 
                    OPSd.Dete BETWEEN :sdt AND :edt AND
                    OPS.AC12 IS NOT NULL AND
                    (AcP21.id1 IS NULL OR AcP21.id1 NOT IN ('KA','BA','CN'))

            ) AS T1

            GROUP BY T1.AC, T1.MT

        ) AS T2
        GROUP BY T2.AC
    ) AS T3

    LEFT JOIN AcP21 ON AcP21.AC = T3.AC
    ORDER BY AC1

    into
        :id, :spid, :ad, :ac1, :ac2, :acn1, :acn2,
        :m1, :m2, :m3, :m4, :m5, :m6, :m7, :m8, :m9, :m10, :m11, :m12,
        :n1, :n2, :n3, :n4, :n5, :n6, :n7, :n8, :n9, :n10, :n11, :n12,
        :mt, :nt
  do
  begin
    suspend;
  end
end^


ALTER PROCEDURE SP_REP_NPMT_12 (
    SDT DATE,
    EDT DATE,
    PAD VARCHAR(3))
RETURNS (
    ID TYPE OF COLUMN TREPMT.ID,
    SPID TYPE OF COLUMN TREPMT.SPID,
    AD TYPE OF COLUMN TREPMT.AD,
    AC1 TYPE OF COLUMN TREPMT.AC1,
    AC2 TYPE OF COLUMN TREPMT.AC2,
    ACN1 TYPE OF COLUMN TREPMT.ACN1,
    ACN2 TYPE OF COLUMN TREPMT.ACN2,
    M1 TYPE OF COLUMN TREPMT.M1,
    M2 TYPE OF COLUMN TREPMT.M2,
    M3 TYPE OF COLUMN TREPMT.M3,
    M4 TYPE OF COLUMN TREPMT.M4,
    M5 TYPE OF COLUMN TREPMT.M5,
    M6 TYPE OF COLUMN TREPMT.M6,
    M7 TYPE OF COLUMN TREPMT.M7,
    M8 TYPE OF COLUMN TREPMT.M8,
    M9 TYPE OF COLUMN TREPMT.M9,
    M10 TYPE OF COLUMN TREPMT.M10,
    M11 TYPE OF COLUMN TREPMT.M11,
    M12 TYPE OF COLUMN TREPMT.M12,
    N1 TYPE OF COLUMN TREPMT.N1,
    N2 TYPE OF COLUMN TREPMT.N2,
    N3 TYPE OF COLUMN TREPMT.N3,
    N4 TYPE OF COLUMN TREPMT.N4,
    N5 TYPE OF COLUMN TREPMT.N5,
    N6 TYPE OF COLUMN TREPMT.N6,
    N7 TYPE OF COLUMN TREPMT.N7,
    N8 TYPE OF COLUMN TREPMT.N8,
    N9 TYPE OF COLUMN TREPMT.N9,
    N10 TYPE OF COLUMN TREPMT.N10,
    N11 TYPE OF COLUMN TREPMT.N11,
    N12 TYPE OF COLUMN TREPMT.N12,
    MT TYPE OF COLUMN TREPMT.MT,
    NT TYPE OF COLUMN TREPMT.NT)
AS
begin
-- summ√Ñ‚Äújam debeta AC22 (ie√Ö‚Ä†√Ñ‚Äúmumi)
-- uz TRepMT
    FOR SELECT
        gen_id(GEN_TREPMT_ID, 1) as ID,
        current_connection as SPID,
        :pad AS ad,
        T3.AC AS AC1,
        NULL AS AC2,
        AcP21.Name AS ACN1,
        NULL AS ACN2,
        M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12,
        0.0 AS N1, 0.0 AS N2, 0.0 AS N3, 0.0 AS N4, 0.0 AS N5, 0.0 AS N6,
        0.0 AS N7, 0.0 AS N8, 0.0 AS N9, 0.0 AS N10, 0.0 AS N11, 0.0 AS N12,
        0.0 AS MT, 0.0 AS NT
        
    FROM
    (
        SELECT 
            AC,
            SUM(CASE WHEN MT = 1 THEN ACr ELSE 0.00 END) AS M1,
            SUM(CASE WHEN MT = 2 THEN ACr ELSE 0.00 END) AS M2,
            SUM(CASE WHEN MT = 3 THEN ACr ELSE 0.00 END) AS M3,
            SUM(CASE WHEN MT = 4 THEN ACr ELSE 0.00 END) AS M4,
            SUM(CASE WHEN MT = 5 THEN ACr ELSE 0.00 END) AS M5,
            SUM(CASE WHEN MT = 6 THEN ACr ELSE 0.00 END) AS M6,
            SUM(CASE WHEN MT = 7 THEN ACr ELSE 0.00 END) AS M7,
            SUM(CASE WHEN MT = 8 THEN ACr ELSE 0.00 END) AS M8,
            SUM(CASE WHEN MT = 9 THEN ACr ELSE 0.00 END) AS M9,
            SUM(CASE WHEN MT = 10 THEN ACr ELSE 0.00 END) AS M10,
            SUM(CASE WHEN MT = 11 THEN ACr ELSE 0.00 END) AS M11,
            SUM(CASE WHEN MT = 12 THEN ACr ELSE 0.00 END) AS M12

        FROM
        (
            SELECT AC, MT, SUM(SDb) AS ADb, SUM(SCr) AS ACr
            FROM
            (
                SELECT 
                    OPS.AC22 AS AC,
                    EXTRACT(MONTH FROM OPSd.Dete) AS MT,
                    0.00 AS SDb,
                    OPS.Summ AS SCr

                FROM 
                    OPSd JOIN OPS ON OPSd.id = OPS.DocId
                    LEFT JOIN AcP21 ON OPS.AC22 = AcP21.AC
                WHERE 
                    OPSd.Dete BETWEEN :sdt AND :edt AND
                    OPS.AC22 IS NOT NULL AND
                    (AcP21.id1 IS NULL OR AcP21.id1 NOT IN ('KA','BA','CN'))

            ) AS T1

            GROUP BY T1.AC, T1.MT

        ) AS T2
        GROUP BY T2.AC
    ) AS T3

    LEFT JOIN AcP21 ON AcP21.AC = T3.AC
    ORDER BY AC1

    into
        :id, :spid, :ad, :ac1, :ac2, :acn1, :acn2,
        :m1, :m2, :m3, :m4, :m5, :m6, :m7, :m8, :m9, :m10, :m11, :m12,
        :n1, :n2, :n3, :n4, :n5, :n6, :n7, :n8, :n9, :n10, :n11, :n12,
        :mt, :nt
  do
  begin
    suspend;
  end
end^


ALTER PROCEDURE SP_REP_NPMT_13 (
    SDT DATE,
    EDT DATE,
    PAD VARCHAR(3))
RETURNS (
    ID TYPE OF COLUMN TREPMT.ID,
    SPID TYPE OF COLUMN TREPMT.SPID,
    AD TYPE OF COLUMN TREPMT.AD,
    AC1 TYPE OF COLUMN TREPMT.AC1,
    AC2 TYPE OF COLUMN TREPMT.AC2,
    ACN1 TYPE OF COLUMN TREPMT.ACN1,
    ACN2 TYPE OF COLUMN TREPMT.ACN2,
    M1 TYPE OF COLUMN TREPMT.M1,
    M2 TYPE OF COLUMN TREPMT.M2,
    M3 TYPE OF COLUMN TREPMT.M3,
    M4 TYPE OF COLUMN TREPMT.M4,
    M5 TYPE OF COLUMN TREPMT.M5,
    M6 TYPE OF COLUMN TREPMT.M6,
    M7 TYPE OF COLUMN TREPMT.M7,
    M8 TYPE OF COLUMN TREPMT.M8,
    M9 TYPE OF COLUMN TREPMT.M9,
    M10 TYPE OF COLUMN TREPMT.M10,
    M11 TYPE OF COLUMN TREPMT.M11,
    M12 TYPE OF COLUMN TREPMT.M12,
    N1 TYPE OF COLUMN TREPMT.N1,
    N2 TYPE OF COLUMN TREPMT.N2,
    N3 TYPE OF COLUMN TREPMT.N3,
    N4 TYPE OF COLUMN TREPMT.N4,
    N5 TYPE OF COLUMN TREPMT.N5,
    N6 TYPE OF COLUMN TREPMT.N6,
    N7 TYPE OF COLUMN TREPMT.N7,
    N8 TYPE OF COLUMN TREPMT.N8,
    N9 TYPE OF COLUMN TREPMT.N9,
    N10 TYPE OF COLUMN TREPMT.N10,
    N11 TYPE OF COLUMN TREPMT.N11,
    N12 TYPE OF COLUMN TREPMT.N12,
    MT TYPE OF COLUMN TREPMT.MT,
    NT TYPE OF COLUMN TREPMT.NT)
AS
begin
-- summ√Ñ‚Äújam naudas apgrozijumu pa m√Ñ‚Äún√Ñ‚Äú√ÖÔ£ºiem
-- s√Ñ¬Åkuma atlikumi (pirms sdt) b√Ö¬´s iek√ÖÔ£º MT, NT
-- uz TRepMT
    FOR SELECT
        gen_id(GEN_TREPMT_ID, 1) as ID,
        current_connection as SPID,
        :pad AS ad,
        T3.AC AS AC1,
        NULL AS AC2,
        AcP21.Name AS ACN1,
        NULL AS ACN2,
        M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12,
        N1,N2,N3,N4,N5,N6,N7,N8,N9,N10,N11,N12,
        MT, NT
    FROM
    (
        SELECT 
            AC,
            SUM(CASE WHEN MT = 0 THEN ADb ELSE 0.00 END) AS MT,
            SUM(CASE WHEN MT = 0 THEN ACr ELSE 0.00 END) AS NT,

            SUM(CASE WHEN MT = 1 THEN ADb ELSE 0.00 END) AS M1,
            SUM(CASE WHEN MT = 2 THEN ADb ELSE 0.00 END) AS M2,
            SUM(CASE WHEN MT = 3 THEN ADb ELSE 0.00 END) AS M3,
            SUM(CASE WHEN MT = 4 THEN ADb ELSE 0.00 END) AS M4,
            SUM(CASE WHEN MT = 5 THEN ADb ELSE 0.00 END) AS M5,
            SUM(CASE WHEN MT = 6 THEN ADb ELSE 0.00 END) AS M6,
            SUM(CASE WHEN MT = 7 THEN ADb ELSE 0.00 END) AS M7,
            SUM(CASE WHEN MT = 8 THEN ADb ELSE 0.00 END) AS M8,
            SUM(CASE WHEN MT = 9 THEN ADb ELSE 0.00 END) AS M9,
            SUM(CASE WHEN MT = 10 THEN ADb ELSE 0.00 END) AS M10,
            SUM(CASE WHEN MT = 11 THEN ADb ELSE 0.00 END) AS M11,
            SUM(CASE WHEN MT = 12 THEN ADb ELSE 0.00 END) AS M12,

            SUM(CASE WHEN MT = 1 THEN ACr ELSE 0.00 END) AS N1,
            SUM(CASE WHEN MT = 2 THEN ACr ELSE 0.00 END) AS N2,
            SUM(CASE WHEN MT = 3 THEN ACr ELSE 0.00 END) AS N3,
            SUM(CASE WHEN MT = 4 THEN ACr ELSE 0.00 END) AS N4,
            SUM(CASE WHEN MT = 5 THEN ACr ELSE 0.00 END) AS N5,
            SUM(CASE WHEN MT = 6 THEN ACr ELSE 0.00 END) AS N6,
            SUM(CASE WHEN MT = 7 THEN ACr ELSE 0.00 END) AS N7,
            SUM(CASE WHEN MT = 8 THEN ACr ELSE 0.00 END) AS N8,
            SUM(CASE WHEN MT = 9 THEN ACr ELSE 0.00 END) AS N9,
            SUM(CASE WHEN MT = 10 THEN ACr ELSE 0.00 END) AS N10,
            SUM(CASE WHEN MT = 11 THEN ACr ELSE 0.00 END) AS N11,
            SUM(CASE WHEN MT = 12 THEN ACr ELSE 0.00 END) AS N12

        FROM
        (
            SELECT AC, MT, SUM(SDb) AS ADb, SUM(SCr) AS ACr
            FROM
            (
                SELECT 
                    OPS.AC11 AS AC,
                    CASE
                        WHEN OPSd.Dete < :sdt THEN 0
                        ELSE EXTRACT(MONTH FROM OPSd.Dete) END AS MT,
                    OPS.Summ AS SDb,
                    0.00 AS SCr

                FROM 
                    OPSd JOIN OPS ON OPSd.id = OPS.DocId
                    INNER JOIN AcP21 ON OPS.AC12 = AcP21.AC

                WHERE 
                    OPSd.Dete <= :edt AND
                    OPS.AC12 IS NOT NULL AND
                    AcP21.id1 IN ('KA','BA','CN')

                UNION ALL

                SELECT 
                    OPS.AC21 AS AC,
                    CASE
                        WHEN OPSd.Dete < :sdt THEN 0
                        ELSE EXTRACT(MONTH FROM OPSd.Dete) END AS MT,
                    0.00 AS SDb,
                    OPS.Summ AS SCr

                FROM 
                    OPSd JOIN OPS ON OPSd.id = OPS.DocId
                    INNER JOIN AcP21 ON OPS.AC22 = AcP21.AC

                WHERE 
                    OPSd.Dete <= :edt AND
                    OPS.AC22 IS NOT NULL AND
                    AcP21.id1 IN ('KA','BA','CN')

                UNION ALL

                    SELECT
                        Bal0.AC11 AS AC,
                        0 AS MT,
                        coalesce(Bal0.SummD, 0.00) AS SDb,
                        coalesce(Bal0.SummC, 0.00) AS SCr
                    FROM 
                        Bal0 JOIN AcP21 ON Bal0.AC11 = AcP21.AC
                    WHERE
                        AcP21.id1 IN ('KA','BA','CN')

            ) AS T1

            GROUP BY T1.AC, T1.MT

        ) AS T2
        GROUP BY T2.AC
    ) AS T3

    LEFT JOIN AcP21 ON AcP21.AC = T3.AC
    ORDER BY AC1


    into
        :id, :spid, :ad, :ac1, :ac2, :acn1, :acn2,
        :m1, :m2, :m3, :m4, :m5, :m6, :m7, :m8, :m9, :m10, :m11, :m12,
        :n1, :n2, :n3, :n4, :n5, :n6, :n7, :n8, :n9, :n10, :n11, :n12,
        :mt, :nt
    do
    begin
     suspend;
    end
end^


ALTER PROCEDURE SP_REP_NPMT_14 (
    SDT DATE,
    EDT DATE)
RETURNS (
    ID TYPE OF COLUMN TREPMT.ID,
    SPID TYPE OF COLUMN TREPMT.SPID,
    AD TYPE OF COLUMN TREPMT.AD,
    AC1 TYPE OF COLUMN TREPMT.AC1,
    AC2 TYPE OF COLUMN TREPMT.AC2,
    ACN1 TYPE OF COLUMN TREPMT.ACN1,
    ACN2 TYPE OF COLUMN TREPMT.ACN2,
    M1 TYPE OF COLUMN TREPMT.M1,
    M2 TYPE OF COLUMN TREPMT.M2,
    M3 TYPE OF COLUMN TREPMT.M3,
    M4 TYPE OF COLUMN TREPMT.M4,
    M5 TYPE OF COLUMN TREPMT.M5,
    M6 TYPE OF COLUMN TREPMT.M6,
    M7 TYPE OF COLUMN TREPMT.M7,
    M8 TYPE OF COLUMN TREPMT.M8,
    M9 TYPE OF COLUMN TREPMT.M9,
    M10 TYPE OF COLUMN TREPMT.M10,
    M11 TYPE OF COLUMN TREPMT.M11,
    M12 TYPE OF COLUMN TREPMT.M12,
    N1 TYPE OF COLUMN TREPMT.N1,
    N2 TYPE OF COLUMN TREPMT.N2,
    N3 TYPE OF COLUMN TREPMT.N3,
    N4 TYPE OF COLUMN TREPMT.N4,
    N5 TYPE OF COLUMN TREPMT.N5,
    N6 TYPE OF COLUMN TREPMT.N6,
    N7 TYPE OF COLUMN TREPMT.N7,
    N8 TYPE OF COLUMN TREPMT.N8,
    N9 TYPE OF COLUMN TREPMT.N9,
    N10 TYPE OF COLUMN TREPMT.N10,
    N11 TYPE OF COLUMN TREPMT.N11,
    N12 TYPE OF COLUMN TREPMT.N12,
    MT TYPE OF COLUMN TREPMT.MT,
    NT TYPE OF COLUMN TREPMT.NT)
AS
begin
    DELETE 
    FROM TRepMT
    WHERE TRepMT.spid = current_connection;
    
    INSERT INTO TRepMT(
        id, spid,  ad,
        ac1,  ac2, acn1, acn2,
        m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12,
        n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12,
        mt, nt)
    SELECT
        id, spid,  ad,
        ac1,  ac2, acn1, acn2,
        m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12,
        n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12,
        mt, nt
    FROM sp_rep_npmt_13(:sdt, :edt, 'A');

    INSERT INTO TRepMT(
        id, spid,  ad,
        ac1,  ac2, acn1, acn2,
        m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12,
        n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12,
        mt, nt)
    SELECT
        id, spid,  ad,
        ac1,  ac2, acn1, acn2,
        m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12,
        n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12,
        mt, nt
    FROM sp_rep_npmt_12(:sdt, :edt, 'B');
    
    INSERT INTO TRepMT(
        id, spid,  ad,
        ac1,  ac2, acn1, acn2,
        m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12,
        n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12,
        mt, nt)
    SELECT
        id, spid,  ad,
        ac1,  ac2, acn1, acn2,
        m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12,
        n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12,
        mt, nt
    FROM sp_rep_npmt_11(:sdt, :edt, 'C');

    INSERT INTO TRepMT(
        id, spid,  ad,
        ac1,  ac2, acn1, acn2,
        m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12,
        n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12,
        mt, nt)
    SELECT
        id, spid,  ad,
        ac1,  ac2, acn1, acn2,
        m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12,
        n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12,
        mt, nt
    FROM sp_rep_npmt_13(:sdt, :edt, 'D');

    FOR SELECT *
    FROM TRepMT
    WHERE TRepMT.spid = current_connection

    into
        :id, :spid, :ad, :ac1, :ac2, :acn1, :acn2,
        :m1, :m2, :m3, :m4, :m5, :m6, :m7, :m8, :m9, :m10, :m11, :m12,
        :n1, :n2, :n3, :n4, :n5, :n6, :n7, :n8, :n9, :n10, :n11, :n12,
        :mt, :nt
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_REP_NPMT_21 (
    SDT DATE,
    EDT DATE,
    PAD VARCHAR(3))
RETURNS (
    ID TYPE OF COLUMN TREPMT.ID,
    SPID TYPE OF COLUMN TREPMT.SPID,
    AD TYPE OF COLUMN TREPMT.AD,
    AC1 TYPE OF COLUMN TREPMT.AC1,
    AC2 TYPE OF COLUMN TREPMT.AC2,
    ACN1 TYPE OF COLUMN TREPMT.ACN1,
    ACN2 TYPE OF COLUMN TREPMT.ACN2,
    M1 TYPE OF COLUMN TREPMT.M1,
    M2 TYPE OF COLUMN TREPMT.M2,
    M3 TYPE OF COLUMN TREPMT.M3,
    M4 TYPE OF COLUMN TREPMT.M4,
    M5 TYPE OF COLUMN TREPMT.M5,
    M6 TYPE OF COLUMN TREPMT.M6,
    M7 TYPE OF COLUMN TREPMT.M7,
    M8 TYPE OF COLUMN TREPMT.M8,
    M9 TYPE OF COLUMN TREPMT.M9,
    M10 TYPE OF COLUMN TREPMT.M10,
    M11 TYPE OF COLUMN TREPMT.M11,
    M12 TYPE OF COLUMN TREPMT.M12,
    N1 TYPE OF COLUMN TREPMT.N1,
    N2 TYPE OF COLUMN TREPMT.N2,
    N3 TYPE OF COLUMN TREPMT.N3,
    N4 TYPE OF COLUMN TREPMT.N4,
    N5 TYPE OF COLUMN TREPMT.N5,
    N6 TYPE OF COLUMN TREPMT.N6,
    N7 TYPE OF COLUMN TREPMT.N7,
    N8 TYPE OF COLUMN TREPMT.N8,
    N9 TYPE OF COLUMN TREPMT.N9,
    N10 TYPE OF COLUMN TREPMT.N10,
    N11 TYPE OF COLUMN TREPMT.N11,
    N12 TYPE OF COLUMN TREPMT.N12,
    MT TYPE OF COLUMN TREPMT.MT,
    NT TYPE OF COLUMN TREPMT.NT)
AS
begin
-- summ√Ñ‚Äújam debeta AC12 un AC14 (izdevumus)
-- uz TRepMT
    FOR SELECT
        gen_id(GEN_TREPMT_ID, 1) as ID,
        current_connection as SPID,
        :pad AS ad,
        T3.AC AS AC1,
        T3.AC2 AS AC2,
        AcP21.Name AS ACN1,
        AcP24.Name AS ACN2,
        M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12,
        0.0 AS N1, 0.0 AS N2, 0.0 AS N3, 0.0 AS N4, 0.0 AS N5, 0.0 AS N6,
        0.0 AS N7, 0.0 AS N8, 0.0 AS N9, 0.0 AS N10, 0.0 AS N11, 0.0 AS N12,
        0.0 AS MT, 0.0 AS NT
        
    FROM
    (
        SELECT 
            AC, AC2,
            SUM(CASE WHEN MT = 1 THEN ADb ELSE 0.00 END) AS M1,
            SUM(CASE WHEN MT = 2 THEN ADb ELSE 0.00 END) AS M2,
            SUM(CASE WHEN MT = 3 THEN ADb ELSE 0.00 END) AS M3,
            SUM(CASE WHEN MT = 4 THEN ADb ELSE 0.00 END) AS M4,
            SUM(CASE WHEN MT = 5 THEN ADb ELSE 0.00 END) AS M5,
            SUM(CASE WHEN MT = 6 THEN ADb ELSE 0.00 END) AS M6,
            SUM(CASE WHEN MT = 7 THEN ADb ELSE 0.00 END) AS M7,
            SUM(CASE WHEN MT = 8 THEN ADb ELSE 0.00 END) AS M8,
            SUM(CASE WHEN MT = 9 THEN ADb ELSE 0.00 END) AS M9,
            SUM(CASE WHEN MT = 10 THEN ADb ELSE 0.00 END) AS M10,
            SUM(CASE WHEN MT = 11 THEN ADb ELSE 0.00 END) AS M11,
            SUM(CASE WHEN MT = 12 THEN ADb ELSE 0.00 END) AS M12

        FROM
        (
            SELECT AC, AC2, MT, SUM(SDb) AS ADb, SUM(SCr) AS ACr
            FROM
            (
                SELECT 
                    OPS.AC12 AS AC,
                    OPS.AC14 AS AC2,
                    EXTRACT(MONTH FROM OPSd.Dete) AS MT,
                    OPS.Summ AS SDb,
                    0.00 AS SCr

                FROM 
                    OPSd JOIN OPS ON OPSd.id = OPS.DocId
                    LEFT JOIN AcP21 ON OPS.AC12 = AcP21.AC
                WHERE 
                    OPSd.Dete BETWEEN :sdt AND :edt AND
                    OPS.AC12 IS NOT NULL AND
                    (AcP21.id1 IS NULL OR AcP21.id1 NOT IN ('KA','BA','CN'))

            ) AS T1

            GROUP BY T1.AC, T1.AC2, T1.MT

        ) AS T2
        GROUP BY T2.AC, T2.AC2
    ) AS T3

    LEFT JOIN AcP21 ON AcP21.AC = T3.AC
    LEFT JOIN AcP24 ON AcP24.idx = T3.AC2

    ORDER BY AC1

    into
        :id, :spid, :ad, :ac1, :ac2, :acn1, :acn2,
        :m1, :m2, :m3, :m4, :m5, :m6, :m7, :m8, :m9, :m10, :m11, :m12,
        :n1, :n2, :n3, :n4, :n5, :n6, :n7, :n8, :n9, :n10, :n11, :n12,
        :mt, :nt
  do
  begin
    suspend;
  end
end^


ALTER PROCEDURE SP_REP_NPMT_22 (
    SDT DATE,
    EDT DATE,
    PAD VARCHAR(3))
RETURNS (
    ID TYPE OF COLUMN TREPMT.ID,
    SPID TYPE OF COLUMN TREPMT.SPID,
    AD TYPE OF COLUMN TREPMT.AD,
    AC1 TYPE OF COLUMN TREPMT.AC1,
    AC2 TYPE OF COLUMN TREPMT.AC2,
    ACN1 TYPE OF COLUMN TREPMT.ACN1,
    ACN2 TYPE OF COLUMN TREPMT.ACN2,
    M1 TYPE OF COLUMN TREPMT.M1,
    M2 TYPE OF COLUMN TREPMT.M2,
    M3 TYPE OF COLUMN TREPMT.M3,
    M4 TYPE OF COLUMN TREPMT.M4,
    M5 TYPE OF COLUMN TREPMT.M5,
    M6 TYPE OF COLUMN TREPMT.M6,
    M7 TYPE OF COLUMN TREPMT.M7,
    M8 TYPE OF COLUMN TREPMT.M8,
    M9 TYPE OF COLUMN TREPMT.M9,
    M10 TYPE OF COLUMN TREPMT.M10,
    M11 TYPE OF COLUMN TREPMT.M11,
    M12 TYPE OF COLUMN TREPMT.M12,
    N1 TYPE OF COLUMN TREPMT.N1,
    N2 TYPE OF COLUMN TREPMT.N2,
    N3 TYPE OF COLUMN TREPMT.N3,
    N4 TYPE OF COLUMN TREPMT.N4,
    N5 TYPE OF COLUMN TREPMT.N5,
    N6 TYPE OF COLUMN TREPMT.N6,
    N7 TYPE OF COLUMN TREPMT.N7,
    N8 TYPE OF COLUMN TREPMT.N8,
    N9 TYPE OF COLUMN TREPMT.N9,
    N10 TYPE OF COLUMN TREPMT.N10,
    N11 TYPE OF COLUMN TREPMT.N11,
    N12 TYPE OF COLUMN TREPMT.N12,
    MT TYPE OF COLUMN TREPMT.MT,
    NT TYPE OF COLUMN TREPMT.NT)
AS
begin
-- summ√Ñ‚Äújam debeta AC22 (ie√Ö‚Ä†√Ñ‚Äúmumi)
-- uz TRepMT
    FOR SELECT
        gen_id(GEN_TREPMT_ID, 1) as ID,
        current_connection as SPID,
        :pad AS ad,
        T3.AC AS AC1,
        T3.AC2 AS AC2,
        AcP21.Name AS ACN1,
        AcP24.Name AS ACN2,
        M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12,
        0.0 AS N1, 0.0 AS N2, 0.0 AS N3, 0.0 AS N4, 0.0 AS N5, 0.0 AS N6,
        0.0 AS N7, 0.0 AS N8, 0.0 AS N9, 0.0 AS N10, 0.0 AS N11, 0.0 AS N12,
        0.0 AS MT, 0.0 AS NT
        
    FROM
    (
        SELECT 
            AC, AC2,
            SUM(CASE WHEN MT = 1 THEN ACr ELSE 0.00 END) AS M1,
            SUM(CASE WHEN MT = 2 THEN ACr ELSE 0.00 END) AS M2,
            SUM(CASE WHEN MT = 3 THEN ACr ELSE 0.00 END) AS M3,
            SUM(CASE WHEN MT = 4 THEN ACr ELSE 0.00 END) AS M4,
            SUM(CASE WHEN MT = 5 THEN ACr ELSE 0.00 END) AS M5,
            SUM(CASE WHEN MT = 6 THEN ACr ELSE 0.00 END) AS M6,
            SUM(CASE WHEN MT = 7 THEN ACr ELSE 0.00 END) AS M7,
            SUM(CASE WHEN MT = 8 THEN ACr ELSE 0.00 END) AS M8,
            SUM(CASE WHEN MT = 9 THEN ACr ELSE 0.00 END) AS M9,
            SUM(CASE WHEN MT = 10 THEN ACr ELSE 0.00 END) AS M10,
            SUM(CASE WHEN MT = 11 THEN ACr ELSE 0.00 END) AS M11,
            SUM(CASE WHEN MT = 12 THEN ACr ELSE 0.00 END) AS M12

        FROM
        (
            SELECT AC, AC2, MT, SUM(SDb) AS ADb, SUM(SCr) AS ACr
            FROM
            (
                SELECT 
                    OPS.AC22 AS AC,
                    OPS.AC24 AS AC2,
                    EXTRACT(MONTH FROM OPSd.Dete) AS MT,
                    0.00 AS SDb,
                    OPS.Summ AS SCr

                FROM 
                    OPSd JOIN OPS ON OPSd.id = OPS.DocId
                    LEFT JOIN AcP21 ON OPS.AC22 = AcP21.AC
                WHERE 
                    OPSd.Dete BETWEEN :sdt AND :edt AND
                    OPS.AC22 IS NOT NULL AND
                    (AcP21.id1 IS NULL OR AcP21.id1 NOT IN ('KA','BA','CN'))

            ) AS T1

            GROUP BY T1.AC, T1.AC2, T1.MT

        ) AS T2
        GROUP BY T2.AC, T2.AC2
    ) AS T3

    LEFT JOIN AcP21 ON AcP21.AC = T3.AC
    LEFT JOIN AcP24    ON AcP24.idx = T3.AC2

    ORDER BY AC1, AC2

    into
        :id, :spid, :ad, :ac1, :ac2, :acn1, :acn2,
        :m1, :m2, :m3, :m4, :m5, :m6, :m7, :m8, :m9, :m10, :m11, :m12,
        :n1, :n2, :n3, :n4, :n5, :n6, :n7, :n8, :n9, :n10, :n11, :n12,
        :mt, :nt
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_REP_NPMT_24 (
    SDT DATE,
    EDT DATE)
RETURNS (
    ID TYPE OF COLUMN TREPMT.ID,
    SPID TYPE OF COLUMN TREPMT.SPID,
    AD TYPE OF COLUMN TREPMT.AD,
    AC1 TYPE OF COLUMN TREPMT.AC1,
    AC2 TYPE OF COLUMN TREPMT.AC2,
    ACN1 TYPE OF COLUMN TREPMT.ACN1,
    ACN2 TYPE OF COLUMN TREPMT.ACN2,
    M1 TYPE OF COLUMN TREPMT.M1,
    M2 TYPE OF COLUMN TREPMT.M2,
    M3 TYPE OF COLUMN TREPMT.M3,
    M4 TYPE OF COLUMN TREPMT.M4,
    M5 TYPE OF COLUMN TREPMT.M5,
    M6 TYPE OF COLUMN TREPMT.M6,
    M7 TYPE OF COLUMN TREPMT.M7,
    M8 TYPE OF COLUMN TREPMT.M8,
    M9 TYPE OF COLUMN TREPMT.M9,
    M10 TYPE OF COLUMN TREPMT.M10,
    M11 TYPE OF COLUMN TREPMT.M11,
    M12 TYPE OF COLUMN TREPMT.M12,
    N1 TYPE OF COLUMN TREPMT.N1,
    N2 TYPE OF COLUMN TREPMT.N2,
    N3 TYPE OF COLUMN TREPMT.N3,
    N4 TYPE OF COLUMN TREPMT.N4,
    N5 TYPE OF COLUMN TREPMT.N5,
    N6 TYPE OF COLUMN TREPMT.N6,
    N7 TYPE OF COLUMN TREPMT.N7,
    N8 TYPE OF COLUMN TREPMT.N8,
    N9 TYPE OF COLUMN TREPMT.N9,
    N10 TYPE OF COLUMN TREPMT.N10,
    N11 TYPE OF COLUMN TREPMT.N11,
    N12 TYPE OF COLUMN TREPMT.N12,
    MT TYPE OF COLUMN TREPMT.MT,
    NT TYPE OF COLUMN TREPMT.NT)
AS
begin
    DELETE 
    FROM TRepMT
    WHERE TRepMT.spid = current_connection;

    INSERT INTO TRepMT(
        id, spid,  ad,
        ac1,  ac2, acn1, acn2,
        m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12,
        n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12,
        mt, nt)
    SELECT
        id, spid,  ad,
        ac1,  ac2, acn1, acn2,
        m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12,
        n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12,
        mt, nt
    FROM sp_rep_npmt_13(:sdt, :edt, 'A');

    INSERT INTO TRepMT(
        id, spid,  ad,
        ac1,  ac2, acn1, acn2,
        m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12,
        n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12,
        mt, nt)
    SELECT
        id, spid,  ad,
        ac1,  ac2, acn1, acn2,
        m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12,
        n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12,
        mt, nt
    FROM sp_rep_npmt_22(:sdt, :edt, 'B');

    INSERT INTO TRepMT(
        id, spid,  ad,
        ac1,  ac2, acn1, acn2,
        m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12,
        n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12,
        mt, nt)
    SELECT
        id, spid,  ad,
        ac1,  ac2, acn1, acn2,
        m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12,
        n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12,
        mt, nt
    FROM sp_rep_npmt_21(:sdt, :edt, 'C');

    INSERT INTO TRepMT(
        id, spid,  ad,
        ac1,  ac2, acn1, acn2,
        m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12,
        n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12,
        mt, nt)
    SELECT
        id, spid,  ad,
        ac1,  ac2, acn1, acn2,
        m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12,
        n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12,
        mt, nt
    FROM sp_rep_npmt_13(:sdt, :edt, 'D');

    FOR SELECT *
    FROM TRepMT
    WHERE TRepMT.spid = current_connection

    into
        :id, :spid, :ad, :ac1, :ac2, :acn1, :acn2,
        :m1, :m2, :m3, :m4, :m5, :m6, :m7, :m8, :m9, :m10, :m11, :m12,
        :n1, :n2, :n3, :n4, :n5, :n6, :n7, :n8, :n9, :n10, :n11, :n12,
        :mt, :nt
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_REP_NPMT_31 (
    SDT DATE,
    EDT DATE)
RETURNS (
    ID TYPE OF COLUMN TREPMT.ID,
    SPID TYPE OF COLUMN TREPMT.SPID,
    AD TYPE OF COLUMN TREPMT.AD,
    AC1 TYPE OF COLUMN TREPMT.AC1,
    AC2 TYPE OF COLUMN TREPMT.AC2,
    ACN1 TYPE OF COLUMN TREPMT.ACN1,
    ACN2 TYPE OF COLUMN TREPMT.ACN2,
    M1 TYPE OF COLUMN TREPMT.M1,
    M2 TYPE OF COLUMN TREPMT.M2,
    M3 TYPE OF COLUMN TREPMT.M3,
    M4 TYPE OF COLUMN TREPMT.M4,
    M5 TYPE OF COLUMN TREPMT.M5,
    M6 TYPE OF COLUMN TREPMT.M6,
    M7 TYPE OF COLUMN TREPMT.M7,
    M8 TYPE OF COLUMN TREPMT.M8,
    M9 TYPE OF COLUMN TREPMT.M9,
    M10 TYPE OF COLUMN TREPMT.M10,
    M11 TYPE OF COLUMN TREPMT.M11,
    M12 TYPE OF COLUMN TREPMT.M12,
    N1 TYPE OF COLUMN TREPMT.N1,
    N2 TYPE OF COLUMN TREPMT.N2,
    N3 TYPE OF COLUMN TREPMT.N3,
    N4 TYPE OF COLUMN TREPMT.N4,
    N5 TYPE OF COLUMN TREPMT.N5,
    N6 TYPE OF COLUMN TREPMT.N6,
    N7 TYPE OF COLUMN TREPMT.N7,
    N8 TYPE OF COLUMN TREPMT.N8,
    N9 TYPE OF COLUMN TREPMT.N9,
    N10 TYPE OF COLUMN TREPMT.N10,
    N11 TYPE OF COLUMN TREPMT.N11,
    N12 TYPE OF COLUMN TREPMT.N12,
    MT TYPE OF COLUMN TREPMT.MT,
    NT TYPE OF COLUMN TREPMT.NT)
AS
begin
-- summ√Ñ‚Äújam p√Ñ‚Äúc 3. paz√Ñ¬´mes
-- uz TRepMT
    FOR SELECT
        gen_id(GEN_TREPMT_ID, 1) as ID,
        current_connection as SPID,
        null AS ad,
        T3.AC AS AC1,
        NULL AS AC2,
        Acp23.Name AS ACN1,
        NULL AS ACN2,
        M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12,
        N1,N2,N3,N4,N5,N6,N7,N8,N9,N10,N11,N12,
        0.0 AS MT, 0.0 AS NT

    FROM
    (
        SELECT 
            AC,
            SUM(CASE WHEN MT = 0 THEN ADb ELSE 0.00 END) AS MT,
            SUM(CASE WHEN MT = 0 THEN ACr ELSE 0.00 END) AS NT,

            SUM(CASE WHEN MT = 1 THEN ADb ELSE 0.00 END) AS M1,
            SUM(CASE WHEN MT = 2 THEN ADb ELSE 0.00 END) AS M2,
            SUM(CASE WHEN MT = 3 THEN ADb ELSE 0.00 END) AS M3,
            SUM(CASE WHEN MT = 4 THEN ADb ELSE 0.00 END) AS M4,
            SUM(CASE WHEN MT = 5 THEN ADb ELSE 0.00 END) AS M5,
            SUM(CASE WHEN MT = 6 THEN ADb ELSE 0.00 END) AS M6,
            SUM(CASE WHEN MT = 7 THEN ADb ELSE 0.00 END) AS M7,
            SUM(CASE WHEN MT = 8 THEN ADb ELSE 0.00 END) AS M8,
            SUM(CASE WHEN MT = 9 THEN ADb ELSE 0.00 END) AS M9,
            SUM(CASE WHEN MT = 10 THEN ADb ELSE 0.00 END) AS M10,
            SUM(CASE WHEN MT = 11 THEN ADb ELSE 0.00 END) AS M11,
            SUM(CASE WHEN MT = 12 THEN ADb ELSE 0.00 END) AS M12,

            SUM(CASE WHEN MT = 1 THEN ACr ELSE 0.00 END) AS N1,
            SUM(CASE WHEN MT = 2 THEN ACr ELSE 0.00 END) AS N2,
            SUM(CASE WHEN MT = 3 THEN ACr ELSE 0.00 END) AS N3,
            SUM(CASE WHEN MT = 4 THEN ACr ELSE 0.00 END) AS N4,
            SUM(CASE WHEN MT = 5 THEN ACr ELSE 0.00 END) AS N5,
            SUM(CASE WHEN MT = 6 THEN ACr ELSE 0.00 END) AS N6,
            SUM(CASE WHEN MT = 7 THEN ACr ELSE 0.00 END) AS N7,
            SUM(CASE WHEN MT = 8 THEN ACr ELSE 0.00 END) AS N8,
            SUM(CASE WHEN MT = 9 THEN ACr ELSE 0.00 END) AS N9,
            SUM(CASE WHEN MT = 10 THEN ACr ELSE 0.00 END) AS N10,
            SUM(CASE WHEN MT = 11 THEN ACr ELSE 0.00 END) AS N11,
            SUM(CASE WHEN MT = 12 THEN ACr ELSE 0.00 END) AS N12

        FROM
        (
            SELECT AC, MT, SUM(SDb) AS ADb, SUM(SCr) AS ACr
            FROM
            (
                SELECT 
                    OPS.AC13 AS AC,
                    EXTRACT(MONTH FROM OPSd.Dete) AS MT,
                    OPS.Summ AS SDb,
                    0.00 AS SCr
                FROM 
                    OPSd INNER JOIN OPS ON OPSd.id = OPS.DocId
                    INNER JOIN Acp23 AS AP3deb ON OPS.AC13 = AP3deb.idx
                WHERE 
                    OPSd.Dete BETWEEN :sdt AND :edt AND 
                    AP3deb.id2 IN (2,3)

                UNION ALL

                SELECT 
                    OPS.AC23 AS AC,
                    EXTRACT(MONTH FROM OPSd.Dete) AS MT,
                    0.00 AS SDb,
                    OPS.Summ AS SCr

                FROM 
                    OPSd INNER JOIN OPS ON OPSd.id = OPS.DocId
                    INNER JOIN Acp23 AS AP3cre ON OPS.AC23 = AP3cre.idx
                WHERE 
                    OPSd.Dete BETWEEN :sdt AND :edt AND 
                    AP3cre.id2 IN (2,3)

            ) AS T1

            GROUP BY T1.AC, T1.MT

        ) AS T2
        GROUP BY T2.AC
    ) AS T3

    LEFT JOIN Acp23    ON Acp23.idx = T3.AC

    ORDER BY AC1


    into
        :id, :spid, :ad, :ac1, :ac2, :acn1, :acn2,
        :m1, :m2, :m3, :m4, :m5, :m6, :m7, :m8, :m9, :m10, :m11, :m12,
        :n1, :n2, :n3, :n4, :n5, :n6, :n7, :n8, :n9, :n10, :n11, :n12,
        :mt, :nt
  do
  begin
    suspend;
  end
end^


ALTER PROCEDURE SP_REP_NPMT_41 (
    SDT DATE,
    EDT DATE,
    PAD VARCHAR(3))
RETURNS (
    ID TYPE OF COLUMN TREPMT.ID,
    SPID TYPE OF COLUMN TREPMT.SPID,
    AD TYPE OF COLUMN TREPMT.AD,
    AC1 TYPE OF COLUMN TREPMT.AC1,
    AC2 TYPE OF COLUMN TREPMT.AC2,
    ACN1 TYPE OF COLUMN TREPMT.ACN1,
    ACN2 TYPE OF COLUMN TREPMT.ACN2,
    M1 TYPE OF COLUMN TREPMT.M1,
    M2 TYPE OF COLUMN TREPMT.M2,
    M3 TYPE OF COLUMN TREPMT.M3,
    M4 TYPE OF COLUMN TREPMT.M4,
    M5 TYPE OF COLUMN TREPMT.M5,
    M6 TYPE OF COLUMN TREPMT.M6,
    M7 TYPE OF COLUMN TREPMT.M7,
    M8 TYPE OF COLUMN TREPMT.M8,
    M9 TYPE OF COLUMN TREPMT.M9,
    M10 TYPE OF COLUMN TREPMT.M10,
    M11 TYPE OF COLUMN TREPMT.M11,
    M12 TYPE OF COLUMN TREPMT.M12,
    N1 TYPE OF COLUMN TREPMT.N1,
    N2 TYPE OF COLUMN TREPMT.N2,
    N3 TYPE OF COLUMN TREPMT.N3,
    N4 TYPE OF COLUMN TREPMT.N4,
    N5 TYPE OF COLUMN TREPMT.N5,
    N6 TYPE OF COLUMN TREPMT.N6,
    N7 TYPE OF COLUMN TREPMT.N7,
    N8 TYPE OF COLUMN TREPMT.N8,
    N9 TYPE OF COLUMN TREPMT.N9,
    N10 TYPE OF COLUMN TREPMT.N10,
    N11 TYPE OF COLUMN TREPMT.N11,
    N12 TYPE OF COLUMN TREPMT.N12,
    MT TYPE OF COLUMN TREPMT.MT,
    NT TYPE OF COLUMN TREPMT.NT)
AS
begin
-- summ√Ñ‚Äújam debeta AC13 (izdevumus)
-- uz TRepMT
    FOR SELECT
        gen_id(GEN_TREPMT_ID, 1) as ID,
        current_connection as SPID,
        :pad AS ad,
        T3.AC AS AC1,
        NULL AS AC2,
        Acp23.Name AS ACN1,
        NULL AS ACN2,
        M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12,
        0.0 AS N1, 0.0 AS N2, 0.0 AS N3, 0.0 AS N4, 0.0 AS N5, 0.0 AS N6,
        0.0 AS N7, 0.0 AS N8, 0.0 AS N9, 0.0 AS N10, 0.0 AS N11, 0.0 AS N12,
        0.0 AS MT, 0.0 AS NT
        
    FROM
    (
        SELECT 
            AC,
            SUM(CASE WHEN MT = 1 THEN ADb ELSE 0.00 END) AS M1,
            SUM(CASE WHEN MT = 2 THEN ADb ELSE 0.00 END) AS M2,
            SUM(CASE WHEN MT = 3 THEN ADb ELSE 0.00 END) AS M3,
            SUM(CASE WHEN MT = 4 THEN ADb ELSE 0.00 END) AS M4,
            SUM(CASE WHEN MT = 5 THEN ADb ELSE 0.00 END) AS M5,
            SUM(CASE WHEN MT = 6 THEN ADb ELSE 0.00 END) AS M6,
            SUM(CASE WHEN MT = 7 THEN ADb ELSE 0.00 END) AS M7,
            SUM(CASE WHEN MT = 8 THEN ADb ELSE 0.00 END) AS M8,
            SUM(CASE WHEN MT = 9 THEN ADb ELSE 0.00 END) AS M9,
            SUM(CASE WHEN MT = 10 THEN ADb ELSE 0.00 END) AS M10,
            SUM(CASE WHEN MT = 11 THEN ADb ELSE 0.00 END) AS M11,
            SUM(CASE WHEN MT = 12 THEN ADb ELSE 0.00 END) AS M12

        FROM
        (
            SELECT AC, MT, SUM(SDb) AS ADb, SUM(SCr) AS ACr
            FROM
            (
                SELECT 
                    OPS.AC13 AS AC,
                    EXTRACT(MONTH FROM OPSd.Dete) AS MT,
                    OPS.Summ AS SDb,
                    0.00 AS SCr
                FROM
                    OPSd JOIN OPS ON OPSd.id = OPS.DocId
                WHERE
                    OPSd.Dete BETWEEN :sdt AND :edt AND
                    OPS.AC13 IS NOT NULL AND
                    OPS.AC13 NOT IN ('KA','BA','CN')

            ) AS T1

            GROUP BY T1.AC, T1.MT

        ) AS T2
        GROUP BY T2.AC
    ) AS T3

    INNER JOIN Acp23 ON Acp23.idx = T3.AC

    ORDER BY AC1

    into
        :id, :spid, :ad, :ac1, :ac2, :acn1, :acn2,
        :m1, :m2, :m3, :m4, :m5, :m6, :m7, :m8, :m9, :m10, :m11, :m12,
        :n1, :n2, :n3, :n4, :n5, :n6, :n7, :n8, :n9, :n10, :n11, :n12,
        :mt, :nt
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_REP_NPMT_42 (
    SDT DATE,
    EDT DATE,
    PAD VARCHAR(3))
RETURNS (
    ID TYPE OF COLUMN TREPMT.ID,
    SPID TYPE OF COLUMN TREPMT.SPID,
    AD TYPE OF COLUMN TREPMT.AD,
    AC1 TYPE OF COLUMN TREPMT.AC1,
    AC2 TYPE OF COLUMN TREPMT.AC2,
    ACN1 TYPE OF COLUMN TREPMT.ACN1,
    ACN2 TYPE OF COLUMN TREPMT.ACN2,
    M1 TYPE OF COLUMN TREPMT.M1,
    M2 TYPE OF COLUMN TREPMT.M2,
    M3 TYPE OF COLUMN TREPMT.M3,
    M4 TYPE OF COLUMN TREPMT.M4,
    M5 TYPE OF COLUMN TREPMT.M5,
    M6 TYPE OF COLUMN TREPMT.M6,
    M7 TYPE OF COLUMN TREPMT.M7,
    M8 TYPE OF COLUMN TREPMT.M8,
    M9 TYPE OF COLUMN TREPMT.M9,
    M10 TYPE OF COLUMN TREPMT.M10,
    M11 TYPE OF COLUMN TREPMT.M11,
    M12 TYPE OF COLUMN TREPMT.M12,
    N1 TYPE OF COLUMN TREPMT.N1,
    N2 TYPE OF COLUMN TREPMT.N2,
    N3 TYPE OF COLUMN TREPMT.N3,
    N4 TYPE OF COLUMN TREPMT.N4,
    N5 TYPE OF COLUMN TREPMT.N5,
    N6 TYPE OF COLUMN TREPMT.N6,
    N7 TYPE OF COLUMN TREPMT.N7,
    N8 TYPE OF COLUMN TREPMT.N8,
    N9 TYPE OF COLUMN TREPMT.N9,
    N10 TYPE OF COLUMN TREPMT.N10,
    N11 TYPE OF COLUMN TREPMT.N11,
    N12 TYPE OF COLUMN TREPMT.N12,
    MT TYPE OF COLUMN TREPMT.MT,
    NT TYPE OF COLUMN TREPMT.NT)
AS
begin
-- summ√Ñ‚Äújam debeta AC23 (ie√Ö‚Ä†√Ñ‚Äúmumi)
-- uz TRepMT
    FOR SELECT
        gen_id(GEN_TREPMT_ID, 1) as ID,
        current_connection as SPID,
        :pad AS ad,
        T3.AC AS AC1,
        NULL AS AC2,
        Acp23.Name AS ACN1,
        NULL AS ACN2,
        M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12,
        0.0 AS N1, 0.0 AS N2, 0.0 AS N3, 0.0 AS N4, 0.0 AS N5, 0.0 AS N6,
        0.0 AS N7, 0.0 AS N8, 0.0 AS N9, 0.0 AS N10, 0.0 AS N11, 0.0 AS N12,
        0.0 AS MT, 0.0 AS NT
        
    FROM
    (
        SELECT 
            AC,
            SUM(CASE WHEN MT = 1 THEN ACr ELSE 0.00 END) AS M1,
            SUM(CASE WHEN MT = 2 THEN ACr ELSE 0.00 END) AS M2,
            SUM(CASE WHEN MT = 3 THEN ACr ELSE 0.00 END) AS M3,
            SUM(CASE WHEN MT = 4 THEN ACr ELSE 0.00 END) AS M4,
            SUM(CASE WHEN MT = 5 THEN ACr ELSE 0.00 END) AS M5,
            SUM(CASE WHEN MT = 6 THEN ACr ELSE 0.00 END) AS M6,
            SUM(CASE WHEN MT = 7 THEN ACr ELSE 0.00 END) AS M7,
            SUM(CASE WHEN MT = 8 THEN ACr ELSE 0.00 END) AS M8,
            SUM(CASE WHEN MT = 9 THEN ACr ELSE 0.00 END) AS M9,
            SUM(CASE WHEN MT = 10 THEN ACr ELSE 0.00 END) AS M10,
            SUM(CASE WHEN MT = 11 THEN ACr ELSE 0.00 END) AS M11,
            SUM(CASE WHEN MT = 12 THEN ACr ELSE 0.00 END) AS M12

        FROM
        (
            SELECT AC, MT, SUM(SDb) AS ADb, SUM(SCr) AS ACr
            FROM
            (
                SELECT 
                    OPS.AC23 AS AC,
                    EXTRACT(MONTH FROM OPSd.Dete) AS MT,
                    0.00 AS SDb,
                    OPS.Summ AS SCr

                FROM 
                    OPSd JOIN OPS ON OPSd.id = OPS.DocId
                WHERE
                    OPSd.Dete BETWEEN :sdt AND :edt AND
                    OPS.AC23 IS NOT NULL AND
                    OPS.AC23 NOT IN ('KA','BA','CN')

            ) AS T1

            GROUP BY T1.AC, T1.MT

        ) AS T2
        GROUP BY T2.AC
    ) AS T3

    LEFT JOIN Acp23 ON Acp23.idx = T3.AC

    ORDER BY AC1

    into
        :id, :spid, :ad, :ac1, :ac2, :acn1, :acn2,
        :m1, :m2, :m3, :m4, :m5, :m6, :m7, :m8, :m9, :m10, :m11, :m12,
        :n1, :n2, :n3, :n4, :n5, :n6, :n7, :n8, :n9, :n10, :n11, :n12,
        :mt, :nt
  do
  begin
    suspend;
  end
end^


ALTER PROCEDURE SP_REP_NPMT_43 (
    SDT DATE,
    EDT DATE,
    PAD VARCHAR(3))
RETURNS (
    ID TYPE OF COLUMN TREPMT.ID,
    SPID TYPE OF COLUMN TREPMT.SPID,
    AD TYPE OF COLUMN TREPMT.AD,
    AC1 TYPE OF COLUMN TREPMT.AC1,
    AC2 TYPE OF COLUMN TREPMT.AC2,
    ACN1 TYPE OF COLUMN TREPMT.ACN1,
    ACN2 TYPE OF COLUMN TREPMT.ACN2,
    M1 TYPE OF COLUMN TREPMT.M1,
    M2 TYPE OF COLUMN TREPMT.M2,
    M3 TYPE OF COLUMN TREPMT.M3,
    M4 TYPE OF COLUMN TREPMT.M4,
    M5 TYPE OF COLUMN TREPMT.M5,
    M6 TYPE OF COLUMN TREPMT.M6,
    M7 TYPE OF COLUMN TREPMT.M7,
    M8 TYPE OF COLUMN TREPMT.M8,
    M9 TYPE OF COLUMN TREPMT.M9,
    M10 TYPE OF COLUMN TREPMT.M10,
    M11 TYPE OF COLUMN TREPMT.M11,
    M12 TYPE OF COLUMN TREPMT.M12,
    N1 TYPE OF COLUMN TREPMT.N1,
    N2 TYPE OF COLUMN TREPMT.N2,
    N3 TYPE OF COLUMN TREPMT.N3,
    N4 TYPE OF COLUMN TREPMT.N4,
    N5 TYPE OF COLUMN TREPMT.N5,
    N6 TYPE OF COLUMN TREPMT.N6,
    N7 TYPE OF COLUMN TREPMT.N7,
    N8 TYPE OF COLUMN TREPMT.N8,
    N9 TYPE OF COLUMN TREPMT.N9,
    N10 TYPE OF COLUMN TREPMT.N10,
    N11 TYPE OF COLUMN TREPMT.N11,
    N12 TYPE OF COLUMN TREPMT.N12,
    MT TYPE OF COLUMN TREPMT.MT,
    NT TYPE OF COLUMN TREPMT.NT)
AS
begin
-- summ√Ñ‚Äújam naudas apgrozijumu pa m√Ñ‚Äún√Ñ‚Äú√ÖÔ£ºiem p√Ñ‚Äúc 3. paz√Ñ¬´mes
-- s√Ñ¬Åkuma atlikumi (pirms sdt) b√Ö¬´s iek√ÖÔ£º MT, NT
    FOR SELECT
        gen_id(GEN_TREPMT_ID, 1) as ID,
        current_connection as SPID,
        :pad AS ad,
        T3.AC AS AC1,
        NULL AS AC2,
        Acp23.Name AS ACN1,
        NULL AS ACN2,
        M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12,
        N1,N2,N3,N4,N5,N6,N7,N8,N9,N10,N11,N12,
        MT, NT
    FROM
    (
        SELECT 
            AC,
            SUM(CASE WHEN MT = 0 THEN ADb ELSE 0.00 END) AS MT,
            SUM(CASE WHEN MT = 0 THEN ACr ELSE 0.00 END) AS NT,

            SUM(CASE WHEN MT = 1 THEN ADb ELSE 0.00 END) AS M1,
            SUM(CASE WHEN MT = 2 THEN ADb ELSE 0.00 END) AS M2,
            SUM(CASE WHEN MT = 3 THEN ADb ELSE 0.00 END) AS M3,
            SUM(CASE WHEN MT = 4 THEN ADb ELSE 0.00 END) AS M4,
            SUM(CASE WHEN MT = 5 THEN ADb ELSE 0.00 END) AS M5,
            SUM(CASE WHEN MT = 6 THEN ADb ELSE 0.00 END) AS M6,
            SUM(CASE WHEN MT = 7 THEN ADb ELSE 0.00 END) AS M7,
            SUM(CASE WHEN MT = 8 THEN ADb ELSE 0.00 END) AS M8,
            SUM(CASE WHEN MT = 9 THEN ADb ELSE 0.00 END) AS M9,
            SUM(CASE WHEN MT = 10 THEN ADb ELSE 0.00 END) AS M10,
            SUM(CASE WHEN MT = 11 THEN ADb ELSE 0.00 END) AS M11,
            SUM(CASE WHEN MT = 12 THEN ADb ELSE 0.00 END) AS M12,

            SUM(CASE WHEN MT = 1 THEN ACr ELSE 0.00 END) AS N1,
            SUM(CASE WHEN MT = 2 THEN ACr ELSE 0.00 END) AS N2,
            SUM(CASE WHEN MT = 3 THEN ACr ELSE 0.00 END) AS N3,
            SUM(CASE WHEN MT = 4 THEN ACr ELSE 0.00 END) AS N4,
            SUM(CASE WHEN MT = 5 THEN ACr ELSE 0.00 END) AS N5,
            SUM(CASE WHEN MT = 6 THEN ACr ELSE 0.00 END) AS N6,
            SUM(CASE WHEN MT = 7 THEN ACr ELSE 0.00 END) AS N7,
            SUM(CASE WHEN MT = 8 THEN ACr ELSE 0.00 END) AS N8,
            SUM(CASE WHEN MT = 9 THEN ACr ELSE 0.00 END) AS N9,
            SUM(CASE WHEN MT = 10 THEN ACr ELSE 0.00 END) AS N10,
            SUM(CASE WHEN MT = 11 THEN ACr ELSE 0.00 END) AS N11,
            SUM(CASE WHEN MT = 12 THEN ACr ELSE 0.00 END) AS N12

        FROM
        (
            SELECT AC, MT, SUM(SDb) AS ADb, SUM(SCr) AS ACr
            FROM
            (
                SELECT 
                    OPS.AC13 AS AC,
                    CASE
                        WHEN OPSd.Dete < :sdt THEN 0
                        ELSE EXTRACT(MONTH FROM OPSd.Dete) END AS MT,
                    OPS.Summ AS SDb,
                    0.00 AS SCr

                FROM 
                    OPSd JOIN OPS ON OPSd.id = OPS.DocId
                    INNER JOIN Acp23 ON OPS.AC13 = Acp23.idx

                WHERE 
                    OPSd.Dete <= :edt AND
                    OPS.AC13 IN ('KA','BA','CN')

                UNION ALL

                SELECT 
                    OPS.AC23 AS AC,
                    CASE
                        WHEN OPSd.Dete < :sdt THEN 0
                        ELSE EXTRACT(MONTH FROM OPSd.Dete) END AS MT,
                    0.00 AS SDb,
                    OPS.Summ AS SCr

                FROM 
                    OPSd JOIN OPS ON OPSd.id = OPS.DocId
                    INNER JOIN Acp23 ON OPS.AC23 = Acp23.idx

                WHERE 
                    OPSd.Dete <= :edt AND
                    OPS.AC23 IN ('KA','BA','CN')

                UNION ALL

                    SELECT
                        AcP21.id1 AS AC,
                        0 AS MT,
                        coalesce(Bal0.SummD, 0.00) AS SDb,
                        coalesce(Bal0.SummC, 0.00) AS SCr
                    FROM 
                        Bal0 JOIN AcP21 ON Bal0.AC11 = AcP21.AC
                    WHERE
                        AcP21.id1 IN ('KA','BA','CN')

            ) AS T1

            GROUP BY T1.AC, T1.MT

        ) AS T2

        GROUP BY T2.AC
    ) AS T3

    INNER JOIN Acp23 ON Acp23.idx = T3.AC

    ORDER BY AC1


    into
        :id, :spid, :ad, :ac1, :ac2, :acn1, :acn2,
        :m1, :m2, :m3, :m4, :m5, :m6, :m7, :m8, :m9, :m10, :m11, :m12,
        :n1, :n2, :n3, :n4, :n5, :n6, :n7, :n8, :n9, :n10, :n11, :n12,
        :mt, :nt
    do
    begin
     suspend;
    end
end^


ALTER PROCEDURE SP_REP_NPMT_44 (
    SDT DATE,
    EDT DATE)
RETURNS (
    ID TYPE OF COLUMN TREPMT.ID,
    SPID TYPE OF COLUMN TREPMT.SPID,
    AD TYPE OF COLUMN TREPMT.AD,
    AC1 TYPE OF COLUMN TREPMT.AC1,
    AC2 TYPE OF COLUMN TREPMT.AC2,
    ACN1 TYPE OF COLUMN TREPMT.ACN1,
    ACN2 TYPE OF COLUMN TREPMT.ACN2,
    M1 TYPE OF COLUMN TREPMT.M1,
    M2 TYPE OF COLUMN TREPMT.M2,
    M3 TYPE OF COLUMN TREPMT.M3,
    M4 TYPE OF COLUMN TREPMT.M4,
    M5 TYPE OF COLUMN TREPMT.M5,
    M6 TYPE OF COLUMN TREPMT.M6,
    M7 TYPE OF COLUMN TREPMT.M7,
    M8 TYPE OF COLUMN TREPMT.M8,
    M9 TYPE OF COLUMN TREPMT.M9,
    M10 TYPE OF COLUMN TREPMT.M10,
    M11 TYPE OF COLUMN TREPMT.M11,
    M12 TYPE OF COLUMN TREPMT.M12,
    N1 TYPE OF COLUMN TREPMT.N1,
    N2 TYPE OF COLUMN TREPMT.N2,
    N3 TYPE OF COLUMN TREPMT.N3,
    N4 TYPE OF COLUMN TREPMT.N4,
    N5 TYPE OF COLUMN TREPMT.N5,
    N6 TYPE OF COLUMN TREPMT.N6,
    N7 TYPE OF COLUMN TREPMT.N7,
    N8 TYPE OF COLUMN TREPMT.N8,
    N9 TYPE OF COLUMN TREPMT.N9,
    N10 TYPE OF COLUMN TREPMT.N10,
    N11 TYPE OF COLUMN TREPMT.N11,
    N12 TYPE OF COLUMN TREPMT.N12,
    MT TYPE OF COLUMN TREPMT.MT,
    NT TYPE OF COLUMN TREPMT.NT)
AS
begin
    DELETE 
    FROM TRepMT
    WHERE TRepMT.spid = current_connection;
    
    INSERT INTO TRepMT(
        id, spid,  ad,
        ac1,  ac2, acn1, acn2,
        m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12,
        n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12,
        mt, nt)
    SELECT
        id, spid,  ad,
        ac1,  ac2, acn1, acn2,
        m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12,
        n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12,
        mt, nt
    FROM sp_rep_npmt_43(:sdt, :edt, 'A');

    INSERT INTO TRepMT(
        id, spid,  ad,
        ac1,  ac2, acn1, acn2,
        m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12,
        n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12,
        mt, nt)
    SELECT
        id, spid,  ad,
        ac1,  ac2, acn1, acn2,
        m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12,
        n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12,
        mt, nt
    FROM sp_rep_npmt_42(:sdt, :edt, 'B');
    
    INSERT INTO TRepMT(
        id, spid,  ad,
        ac1,  ac2, acn1, acn2,
        m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12,
        n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12,
        mt, nt)
    SELECT
        id, spid,  ad,
        ac1,  ac2, acn1, acn2,
        m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12,
        n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12,
        mt, nt
    FROM sp_rep_npmt_41(:sdt, :edt, 'C');

    INSERT INTO TRepMT(
        id, spid,  ad,
        ac1,  ac2, acn1, acn2,
        m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12,
        n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12,
        mt, nt)
    SELECT
        id, spid,  ad,
        ac1,  ac2, acn1, acn2,
        m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12,
        n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12,
        mt, nt
    FROM sp_rep_npmt_43(:sdt, :edt, 'D');

    FOR SELECT *
    FROM TRepMT
    WHERE TRepMT.spid = current_connection

    into
        :id, :spid, :ad, :ac1, :ac2, :acn1, :acn2,
        :m1, :m2, :m3, :m4, :m5, :m6, :m7, :m8, :m9, :m10, :m11, :m12,
        :n1, :n2, :n3, :n4, :n5, :n6, :n7, :n8, :n9, :n10, :n11, :n12,
        :mt, :nt
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_REP_PERS_11 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15))
RETURNS (
    ID TYPE OF COLUMN ROPS2A.ID,
    SPID TYPE OF COLUMN ROPS2A.SPID,
    AC TYPE OF COLUMN ROPS2A.AC,
    RAC TYPE OF COLUMN ROPS2A.RAC,
    NAME TYPE OF COLUMN ROPS2A.NAME,
    B0 TYPE OF COLUMN ROPS2A.B0,
    SDB TYPE OF COLUMN ROPS2A.SDB,
    SCR TYPE OF COLUMN ROPS2A.SCR,
    TDB TYPE OF COLUMN ROPS2A.TDB,
    TCR TYPE OF COLUMN ROPS2A.TCR,
    CLID TYPE OF COLUMN ROPS2A.CLID,
    NAME1 TYPE OF COLUMN ROPS2A.NAME1,
    REGNR TYPE OF COLUMN ROPS2A.REGNR,
    RNAME TYPE OF COLUMN ROPS2A.RNAME)
AS
begin
-- apgrozijums p√Ñ‚Äúc 1.paz. un clid
    FOR SELECT
        gen_id(GEN_ROPS2A_ID, 1) as ID,
        current_connection as SPID,
        T2.AC AS AC,
        null as RAC,
        AcP21.Name AS Name,
        T2.ADb - T2.ACr as b0,
        T2.ADb AS SDb,
        T2.ACr AS SCr,
        T2.BDb AS TDb,
        T2.BCr AS TCr,
        T2.ClId AS Clid,
        Persons.Name AS Name1,
        Persons.regnr as regnr,
        null as rname
    FROM
    (
        SELECT AC, ClId, SUM(SDb) AS ADb, SUM(SCr) AS ACr, SUM(TDb) AS BDb, SUM(TCr) AS BCr
        FROM
        (
            SELECT 
                OPS.AC11 AS AC,
                OPSd.ClId AS ClId,
                CASE
                    WHEN OPSd.Dete < :sdt THEN OPS.Summ
                    ELSE 0.00
                END AS SDb,
                0.00 AS SCr,
                CASE
                    WHEN OPSd.Dete >= :sdt THEN OPS.Summ
                    ELSE 0.00
                END AS TDb,
                0.00 AS TCr

            FROM 
                OPSd JOIN OPS ON OPSd.id = OPS.DocId
                INNER JOIN AcP21 ON OPS.AC11 = AcP21.AC
            WHERE 
                OPSd.Dete <= :edt AND 
                OPS.AC11 LIKE :pac AND
                AcP21.id2 IN ('DB','KR') AND
                (:pclid IS NULL OR OPSd.ClId = :pclid)

            UNION ALL

            SELECT 
                OPS.AC21 AS AC,
                OPSd.ClId AS ClId,
                0.00 AS SDb,
                CASE
                    WHEN OPSd.Dete < :sdt THEN OPS.Summ
                    ELSE 0.00
                END AS SCr,
                0.00 AS TDb,
                CASE
                    WHEN OPSd.Dete >= :sdt THEN OPS.Summ
                    ELSE 0.00
                END AS TCr

            FROM 
                OPSd JOIN OPS ON OPSd.id = OPS.DocId
                INNER JOIN AcP21 ON OPS.AC21 = AcP21.AC
            WHERE 
                OPSd.Dete <= :edt AND 
                OPS.AC21 LIKE :pac AND
                AcP21.id2 IN ('DB','KR') AND
                (:pclid IS NULL OR OPSd.ClId = :pclid)

            UNION ALL

            SELECT 
                Bal0.AC11 AS AC,
                Bal0.ClId AS ClId,
                Bal0.SummD AS SDb,
                Bal0.SummC AS SCr,
                0.00 AS TDb,
                0.00 AS TCr
            FROM 
                Bal0 INNER JOIN AcP21 ON Bal0.AC11 = AcP21.AC
            WHERE 
                Bal0.AC11 LIKE :pac AND
                AcP21.id2 IN ('DB','KR') AND
                (:pclid IS NULL OR Bal0.ClId = :pclid)

        ) AS T1

        GROUP BY T1.AC, T1.Clid
    ) AS T2    

    INNER JOIN AcP21 ON AcP21.AC = T2.AC
    INNER JOIN Persons ON Persons.ClId = T2.Clid
    
    WHERE (ADb - ACr) <> 0.00 OR BDb <> 0.00 OR BCr <> 0.00
    ORDER BY AC, Clid

    into
        :id, :spid, :ac, :rac, :name,
        :b0,
        :sdb, :scr, :tdb, :tcr,
        :clid, :name1, :regnr, :rname
    do
    begin
        suspend;
    end

end^


ALTER PROCEDURE SP_REP_PERS_12 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15))
RETURNS (
    ID TYPE OF COLUMN ROPS2A.ID,
    SPID TYPE OF COLUMN ROPS2A.SPID,
    AC TYPE OF COLUMN ROPS2A.AC,
    RAC TYPE OF COLUMN ROPS2A.RAC,
    NAME TYPE OF COLUMN ROPS2A.NAME,
    B0 TYPE OF COLUMN ROPS2A.B0,
    SDB TYPE OF COLUMN ROPS2A.SDB,
    SCR TYPE OF COLUMN ROPS2A.SCR,
    TDB TYPE OF COLUMN ROPS2A.TDB,
    TCR TYPE OF COLUMN ROPS2A.TCR,
    CLID TYPE OF COLUMN ROPS2A.CLID,
    NAME1 TYPE OF COLUMN ROPS2A.NAME1,
    REGNR TYPE OF COLUMN ROPS2A.REGNR,
    RNAME TYPE OF COLUMN ROPS2A.RNAME)
AS
begin
-- apgrozijums p√Ñ‚Äúc clid
    FOR SELECT
        gen_id(GEN_ROPS2A_ID, 1) as ID,
        current_connection as SPID,
        null AS AC,
        null as RAC,
        null AS Name,
        T2.ADb - T2.ACr as b0,
        T2.ADb AS SDb,
        T2.ACr AS SCr,
        T2.BDb AS TDb,
        T2.BCr AS TCr,
        T2.ClId AS Clid,
        Persons.Name AS Name1,
        Persons.regnr as regnr,
        null as rname
    FROM
    (
        SELECT ClId, SUM(SDb) AS ADb, SUM(SCr) AS ACr, SUM(TDb) AS BDb, SUM(TCr) AS BCr
        FROM
        (
            SELECT 
                OPSd.ClId AS ClId,
                CASE
                    WHEN OPSd.Dete < :sdt THEN OPS.Summ
                    ELSE 0.00
                END AS SDb,
                0.00 AS SCr,
                CASE
                    WHEN OPSd.Dete >= :sdt THEN OPS.Summ
                    ELSE 0.00
                END AS TDb,
                0.00 AS TCr

            FROM 
                OPSd JOIN OPS ON OPSd.id = OPS.DocId
                INNER JOIN AcP21 ON OPS.AC11 = AcP21.AC
            WHERE 
                OPSd.Dete <= :edt AND 
                OPS.AC11 LIKE :pac AND
                AcP21.id2 IN ('DB','KR') AND
                (:pclid IS NULL OR OPSd.ClId = :pclid)

            UNION ALL

            SELECT 
                OPSd.ClId AS ClId,
                0.00 AS SDb,
                CASE
                    WHEN OPSd.Dete < :sdt THEN OPS.Summ
                    ELSE 0.00
                END AS SCr,
                0.00 AS TDb,
                CASE
                    WHEN OPSd.Dete >= :sdt THEN OPS.Summ
                    ELSE 0.00
                END AS TCr

            FROM 
                OPSd JOIN OPS ON OPSd.id = OPS.DocId
                INNER JOIN AcP21 ON OPS.AC21 = AcP21.AC
            WHERE 
                OPSd.Dete <= :edt AND 
                OPS.AC21 LIKE :pac AND
                AcP21.id2 IN ('DB','KR') AND
                (:pclid IS NULL OR OPSd.ClId = :pclid)

            UNION ALL

            SELECT 
                Bal0.ClId AS ClId,
                Bal0.SummD AS SDb,
                Bal0.SummC AS SCr,
                0.00 AS TDb,
                0.00 AS TCr
            FROM 
                Bal0 INNER JOIN AcP21 ON Bal0.AC11 = AcP21.AC
            WHERE 
                Bal0.AC11 LIKE :pac AND
                AcP21.id2 IN ('DB','KR') AND
                (:pclid IS NULL OR Bal0.ClId = :pclid)

        ) AS T1

        GROUP BY T1.Clid
    ) AS T2    

    INNER JOIN Persons ON Persons.ClId = T2.Clid
    
    WHERE (ADb - ACr) <> 0.00 OR BDb <> 0.00 OR BCr <> 0.00
    ORDER BY Clid

    into
        :id, :spid, :ac, :rac, :name,
        :b0,
        :sdb, :scr, :tdb, :tcr,
        :clid, :name1, :regnr, :rname
    do
    begin
        suspend;
    end

end^


ALTER PROCEDURE SP_REP_PERS_13 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15))
RETURNS (
    ID TYPE OF COLUMN TREPA1.ID,
    SPID TYPE OF COLUMN TREPA1.SPID,
    I1 TYPE OF COLUMN TREPA1.I1,
    NM TYPE OF COLUMN TREPA1.NM,
    DT TYPE OF COLUMN TREPA1.DT,
    ST TYPE OF COLUMN TREPA1.ST,
    NR TYPE OF COLUMN TREPA1.NR,
    S1 TYPE OF COLUMN TREPA1.S1,
    S2 TYPE OF COLUMN TREPA1.S2,
    S3 TYPE OF COLUMN TREPA1.S3,
    S4 TYPE OF COLUMN TREPA1.S4)
AS
begin
-- neapmaksƒÅtƒÅs pavadzƒ´mess, kas izrakstƒ´tas pƒìc :sdt,
--        vai kur ir bijusi kustƒ´ba pƒìc :edt
    FOR SELECT
        gen_id(GEN_TREPA1_ID, 1) as ID,
        current_connection as SPID,
        T2.ClId AS i1,
        Persons.Name AS nm,
        T2.dt AS dt,
        T2.DocSt AS st,
        T2.DocNr AS nr,
        T2.BDb AS s1,
        T2.BCr AS s2,
        0.0 AS s3, 
        0.0 AS s4
    FROM
    (
        SELECT ClId, COALESCE(MAX(dtx), MIN(dt)) AS dt, DocSt, DocNr, SUM(TDb) AS BDb, SUM(TCr) AS BCr
        FROM
        (
            SELECT 
                OPSd.ClId AS ClId,
                OPSd.Dete AS dt,
                OPSd.DocSt AS DocSt,
                OPSd.DocNr AS DocNr,
                OPS.Summ AS TDb,
                0.00 AS TCr,
                iif(:pac starting '2', OPSd.Dete, null) as dtx

            FROM 
                OPSd JOIN OPS ON OPSd.id = OPS.DocId
                INNER JOIN AcP21 ON OPS.AC11 = AcP21.AC
            WHERE 
                OPS.AC11 LIKE :pac AND
                AcP21.id2 IN ('DB','KR') AND
                (:pclid IS NULL OR OPSd.ClId = :pclid)

            UNION ALL

            SELECT 
                OPSd.ClId AS ClId,
                OPSd.Dete AS dt,
                OPSd.DocSt AS DocSt,
                OPSd.DocNr AS DocNr,
                0.00 AS TDb,
                OPS.Summ AS TCr,
                iif(:pac starting '5', OPSd.Dete, null) as dtx

            FROM 
                OPSd JOIN OPS ON OPSd.id = OPS.DocId
                INNER JOIN AcP21 ON OPS.AC21 = AcP21.AC
            WHERE 
                OPS.AC21 LIKE :pac AND
                AcP21.id2 IN ('DB','KR') AND
                (:pclid IS NULL OR OPSd.ClId = :pclid)

            UNION ALL

            SELECT 
                DOCS0.ClId AS ClId,
                DOCS0.Dete AS dt,
                DOCS0.DocSt AS DocSt,
                DOCS0.DocNr AS DocNr,
                DOCS0.Summ AS TDb,
                0.00 AS TCr,
                iif(:pac starting '2', DOCS0.Dete, null) as dtx

            FROM 
                DOCS0
                INNER JOIN AcP21 ON DOCS0.AC = AcP21.AC
            WHERE 
                DOCS0.Summ > 0.0 AND
                DOCS0.AC LIKE :pac AND
                AcP21.id2 IN ('DB','KR') AND
                (:pclid IS NULL OR DOCS0.ClId = :pclid)

            UNION ALL

            SELECT 
                DOCS0.ClId AS ClId,
                DOCS0.Dete AS dt,
                DOCS0.DocSt AS DocSt,
                DOCS0.DocNr AS DocNr,
                0.00 AS TDb,
                -DOCS0.Summ AS TcR,
                iif(:pac starting '5', DOCS0.Dete, null) as dtx

            FROM 
                DOCS0
                INNER JOIN AcP21 ON DOCS0.AC = AcP21.AC
            WHERE 
                DOCS0.Summ < 0.0 AND
                DOCS0.AC LIKE :pac AND
                AcP21.id2 IN ('DB','KR') AND
                (:pclid IS NULL OR DOCS0.ClId = :pclid)

        ) AS T1

        GROUP BY T1.ClId, T1.DocSt, T1.DocNr
        HAVING MIN(T1.dt) >= :sdt OR MAX(T1.dt) >= :edt

    ) AS T2    
    
    INNER JOIN Persons ON Persons.ClId = T2.Clid
    
    WHERE BDb <> BCr
    ORDER BY i1, dt, nr

    into
        :id, :spid, :i1, :nm, :dt, :st, :nr,
        :s1, :s2, :s3, :s4
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_REP_PERS_14 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15))
RETURNS (
    ID TYPE OF COLUMN TREPA1.ID,
    SPID TYPE OF COLUMN TREPA1.SPID,
    I1 TYPE OF COLUMN TREPA1.I1,
    NM TYPE OF COLUMN TREPA1.NM,
    DT TYPE OF COLUMN TREPA1.DT,
    ST TYPE OF COLUMN TREPA1.ST,
    NR TYPE OF COLUMN TREPA1.NR,
    S1 TYPE OF COLUMN TREPA1.S1,
    S2 TYPE OF COLUMN TREPA1.S2,
    S3 TYPE OF COLUMN TREPA1.S3,
    S4 TYPE OF COLUMN TREPA1.S4)
AS
begin
-- pavadz√Ñ¬´mes
    FOR SELECT
        gen_id(GEN_TREPA1_ID, 1) as ID,
        current_connection as SPID,
        T2.ClId AS i1,
        Persons.Name AS nm,
        T2.dt AS dt,
        T2.DocSt AS st,
        T2.DocNr AS nr,
        T2.BDb AS s1,
        T2.BCr AS s2,
        0.0 AS s3,
        0.0 AS s4
    FROM
    (
        SELECT ClId, COALESCE(MAX(dtx), MIN(dt)) as dt, DocSt, DocNr, SUM(TDb) AS BDb, SUM(TCr) AS BCr
        FROM
        (
            SELECT 
                OPSd.ClId AS ClId,
                OPSd.Dete AS dt,
                OPSd.DocSt AS DocSt,
                OPSd.DocNr AS DocNr,
                OPS.Summ AS TDb,
                0.00 AS TCr,
                iif(:pac starting '2', OPSd.Dete, null) as dtx

            FROM 
                OPSd JOIN OPS ON OPSd.id = OPS.DocId
                INNER JOIN AcP21 ON OPS.AC11 = AcP21.AC
            WHERE 
                OPSd.Dete BETWEEN :sdt AND :edt AND 
                OPS.AC11 LIKE :pac AND
                AcP21.id2 IN ('DB','KR') AND
                (:pclid IS NULL OR OPSd.ClId = :pclid)

            UNION ALL

            SELECT 
                OPSd.ClId AS ClId,
                OPSd.Dete AS dt,
                OPSd.DocSt AS DocSt,
                OPSd.DocNr AS DocNr,
                0.00 AS TDb,
                OPS.Summ AS TCr,
                iif(:pac starting '5', OPSd.Dete, null) as dtx

            FROM 
                OPSd JOIN OPS ON OPSd.id = OPS.DocId
                INNER JOIN AcP21 ON OPS.AC21 = AcP21.AC
            WHERE 
                OPSd.Dete BETWEEN :sdt AND :edt AND 
                OPS.AC21 LIKE :pac AND
                AcP21.id2 IN ('DB','KR') AND
                (:pclid IS NULL OR OPSd.ClId = :pclid)

        ) AS T1

        GROUP BY T1.ClId, T1.DocSt, T1.DocNr

    ) AS T2    
    
    INNER JOIN Persons ON Persons.ClId = T2.Clid
    
    WHERE BDb <> 0.00 OR BCr <> 0.00
    ORDER BY i1, dt, nr


    into
        :id, :spid, :i1, :nm, :dt, :st, :nr,
        :s1, :s2, :s3, :s4
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_REP_PERS_15 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15))
RETURNS (
    ID TYPE OF COLUMN TREPA1.ID,
    SPID TYPE OF COLUMN TREPA1.SPID,
    I1 TYPE OF COLUMN TREPA1.I1,
    NM TYPE OF COLUMN TREPA1.NM,
    DT TYPE OF COLUMN TREPA1.DT,
    ST TYPE OF COLUMN TREPA1.ST,
    NR TYPE OF COLUMN TREPA1.NR,
    S1 TYPE OF COLUMN TREPA1.S1,
    S2 TYPE OF COLUMN TREPA1.S2,
    S3 TYPE OF COLUMN TREPA1.S3,
    S4 TYPE OF COLUMN TREPA1.S4)
AS
begin
-- pavadz√Ñ¬´mes
    FOR SELECT
        gen_id(GEN_TREPA1_ID, 1) as ID,
        current_connection as SPID,
        T2.ClId AS i1,
        Persons.Name AS nm,
        T2.dt AS dt,
        T2.DocSt AS st,
        T2.DocNr AS nr,
        T2.BDb AS s1,
        T2.BCr AS s2,
        0.0 AS s3, 
        0.0 AS s4
    FROM
    (
        SELECT ClId, dt, DocSt, DocNr, SUM(TDb) AS BDb, SUM(TCr) AS BCr
        FROM
        (
            SELECT 
                OPSd.ClId AS ClId,
                OPSd.Dete AS dt,
                OPSd.DocSt AS DocSt,
                OPSd.DocNr AS DocNr,
                OPS.Summ AS TDb,
                0.00 AS TCr

            FROM 
                OPSd JOIN OPS ON OPSd.id = OPS.DocId
                INNER JOIN AcP21 ON OPS.AC11 = AcP21.AC
            WHERE 
                OPSd.Dete BETWEEN :sdt AND :edt AND 
                OPS.AC11 LIKE :pac AND
                AcP21.id2 IN ('DB','KR') AND
                (:pclid IS NULL OR OPSd.ClId = :pclid)

            UNION ALL

            SELECT 
                OPSd.ClId AS ClId,
                OPSd.Dete AS dt,
                OPSd.DocSt AS DocSt,
                OPSd.DocNr AS DocNr,
                0.00 AS TDb,
                OPS.Summ AS TCr

            FROM 
                OPSd JOIN OPS ON OPSd.id = OPS.DocId
                INNER JOIN AcP21 ON OPS.AC21 = AcP21.AC
            WHERE 
                OPSd.Dete BETWEEN :sdt AND :edt AND 
                OPS.AC21 LIKE :pac AND
                AcP21.id2 IN ('DB','KR') AND
                (:pclid IS NULL OR OPSd.ClId = :pclid)

        ) AS T1

        GROUP BY T1.ClId, T1.dt, T1.DocSt, T1.DocNr

    ) AS T2    
    
    INNER JOIN Persons ON Persons.ClId = T2.Clid
    
    WHERE BDb <> 0.00 OR BCr <> 0.00
    ORDER BY i1, dt, nr

    into
        :id, :spid, :i1, :nm, :dt, :st, :nr,
        :s1, :s2, :s3, :s4
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_REP_PERS_16 (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PCLID VARCHAR(15))
RETURNS (
    ID TYPE OF COLUMN TREPA1.ID,
    SPID TYPE OF COLUMN TREPA1.SPID,
    I1 TYPE OF COLUMN TREPA1.I1,
    NM TYPE OF COLUMN TREPA1.NM,
    DT TYPE OF COLUMN TREPA1.DT,
    ST TYPE OF COLUMN TREPA1.ST,
    NR TYPE OF COLUMN TREPA1.NR,
    S1 TYPE OF COLUMN TREPA1.S1,
    S2 TYPE OF COLUMN TREPA1.S2,
    S3 TYPE OF COLUMN TREPA1.S3,
    S4 TYPE OF COLUMN TREPA1.S4)
AS
begin
-- neapmaksƒÅtƒÅs pavadzƒ´mess no :sdt lƒ´dz :edt

    FOR SELECT
        gen_id(GEN_TREPA1_ID, 1) as ID,
        current_connection as SPID,
        T2.ClId AS i1,
        Persons.Name AS nm,
        T2.dt AS dt,
        T2.DocSt AS st,
        T2.DocNr AS nr,
        T2.BDb AS s1,
        T2.BCr AS s2,
        0.0 AS s3, 
        0.0 AS s4
    FROM
    (
        SELECT ClId, COALESCE(MAX(dtx), MIN(dt)) AS dt, DocSt, DocNr, SUM(TDb) AS BDb, SUM(TCr) AS BCr
        FROM
        (
            SELECT 
                OPSd.ClId AS ClId,
                OPSd.Dete AS dt,
                OPSd.DocSt AS DocSt,
                OPSd.DocNr AS DocNr,
                OPS.Summ AS TDb,
                0.00 AS TCr,
                iif(:pac starting '2', OPSd.Dete, null) as dtx

            FROM 
                OPSd JOIN OPS ON OPSd.id = OPS.DocId
                INNER JOIN AcP21 ON OPS.AC11 = AcP21.AC
            WHERE 
                OPSD.dete BETWEEN :SDT AND :EDT AND
                OPS.AC11 LIKE :pac AND
                AcP21.id2 IN ('DB','KR') AND
                (:pclid IS NULL OR OPSd.ClId = :pclid)

            UNION ALL

            SELECT 
                OPSd.ClId AS ClId,
                OPSd.Dete AS dt,
                OPSd.DocSt AS DocSt,
                OPSd.DocNr AS DocNr,
                0.00 AS TDb,
                OPS.Summ AS TCr,
                iif(:pac starting '5', OPSd.Dete, null) as dtx

            FROM 
                OPSd JOIN OPS ON OPSd.id = OPS.DocId
                INNER JOIN AcP21 ON OPS.AC21 = AcP21.AC
            WHERE 
                OPSD.dete BETWEEN :SDT AND :EDT AND
                OPS.AC21 LIKE :pac AND
                AcP21.id2 IN ('DB','KR') AND
                (:pclid IS NULL OR OPSd.ClId = :pclid)

            UNION ALL

            SELECT 
                DOCS0.ClId AS ClId,
                DOCS0.Dete AS dt,
                DOCS0.DocSt AS DocSt,
                DOCS0.DocNr AS DocNr,
                DOCS0.Summ AS TDb,
                0.00 AS TCr,
                iif(:pac starting '2', DOCS0.Dete, null) as dtx

            FROM 
                DOCS0
                INNER JOIN AcP21 ON DOCS0.AC = AcP21.AC
            WHERE 
                DOCS0.Summ > 0.0 AND
                DOCS0.AC LIKE :pac AND
                AcP21.id2 IN ('DB','KR') AND
                (:pclid IS NULL OR DOCS0.ClId = :pclid)

            UNION ALL

            SELECT 
                DOCS0.ClId AS ClId,
                DOCS0.Dete AS dt,
                DOCS0.DocSt AS DocSt,
                DOCS0.DocNr AS DocNr,
                0.00 AS TDb,
                -DOCS0.Summ AS TcR,
                iif(:pac starting '5', DOCS0.Dete, null) as dtx

            FROM 
                DOCS0
                INNER JOIN AcP21 ON DOCS0.AC = AcP21.AC
            WHERE 
                DOCS0.Summ < 0.0 AND
                DOCS0.AC LIKE :pac AND
                AcP21.id2 IN ('DB','KR') AND
                (:pclid IS NULL OR DOCS0.ClId = :pclid)

        ) AS T1

        GROUP BY T1.ClId, T1.DocSt, T1.DocNr

    ) AS T2    
    
    INNER JOIN Persons ON Persons.ClId = T2.Clid
    
    WHERE BDb <> BCr
    ORDER BY i1, dt, nr

    into
        :id, :spid, :i1, :nm, :dt, :st, :nr,
        :s1, :s2, :s3, :s4
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_REP_PVN_10 (
    SDT DATE,
    EDT DATE)
RETURNS (
    ID TYPE OF COLUMN ROPS2A.ID,
    SPID TYPE OF COLUMN ROPS2A.SPID,
    AC TYPE OF COLUMN ROPS2A.AC,
    RAC TYPE OF COLUMN ROPS2A.RAC,
    NAME TYPE OF COLUMN ROPS2A.NAME,
    B0 TYPE OF COLUMN ROPS2A.B0,
    SDB TYPE OF COLUMN ROPS2A.SDB,
    SCR TYPE OF COLUMN ROPS2A.SCR,
    TDB TYPE OF COLUMN ROPS2A.TDB,
    TCR TYPE OF COLUMN ROPS2A.TCR,
    CLID TYPE OF COLUMN ROPS2A.CLID,
    NAME1 TYPE OF COLUMN ROPS2A.NAME1,
    REGNR TYPE OF COLUMN ROPS2A.REGNR,
    RNAME TYPE OF COLUMN ROPS2A.RNAME)
AS
begin
    FOR SELECT
        gen_id(GEN_ROPS2A_ID, 1) as ID,
        current_connection as SPID,
        T2.AC AS AC,
        null as RAC,
        AcP25.Name AS Name,
        0.0 as b0,
        0.0 AS SDb,
        0.0 AS SCr,
        T2.BDb AS TDb,
        T2.BCr AS TCr,
        null AS Clid,
        null AS Name1,
        null as regnr,
        null as rname
    FROM
    (
        SELECT AC, SUM(TDb) AS BDb, SUM(TCr) AS BCr
        FROM
        (
            SELECT 
                OPS.AC15 AS AC,
                OPS.Summ AS TDb,
                0.00 AS TCr

            FROM OPSd JOIN OPS ON OPSd.id = OPS.DocId
            WHERE OPSd.Dete BETWEEN :sdt AND :edt AND OPS.AC15 IS NOT NULL

            UNION ALL

            SELECT 
                OPS.AC25 AS AC,
                0.00 AS TDb,
                OPS.Summ AS TCr

            FROM OPSd JOIN OPS ON OPSd.id = OPS.DocId
            WHERE OPSd.Dete BETWEEN :sdt AND :edt AND OPS.AC25 IS NOT NULL
        
        ) AS T1
        GROUP BY T1.AC

    ) AS T2    
    LEFT JOIN Acp25 ON Acp25.idx = T2.AC
    
    ORDER BY AC

    into
        :id, :spid, :ac, :rac, :name,
        :b0,
        :sdb, :scr, :tdb, :tcr,
        :clid, :name1, :regnr, :rname
    do
    begin
        suspend;
    end

end^


ALTER PROCEDURE SP_REP_PVN_21 (
    PSD DATE,
    PED DATE,
    RG1 MONEY,
    RG2 MONEY)
RETURNS (
    DID TYPE OF COLUMN TTEMP_PVN1.DID,
    CLID TYPE OF COLUMN TTEMP_PVN1.CLID,
    DOCTYP1 TYPE OF COLUMN TTEMP_PVN1.DOCTYP1,
    DOCTYP2 TYPE OF COLUMN TTEMP_PVN1.DOCTYP2,
    DOCTYPC TYPE OF COLUMN TTEMP_PVN1.DOCTYPC,
    RAC5 TYPE OF COLUMN TTEMP_PVN1.RAC5,
    SUMM TYPE OF COLUMN TTEMP_PVN1.SUMM,
    PVN TYPE OF COLUMN TTEMP_PVN1.PVN,
    SUMMC TYPE OF COLUMN TTEMP_PVN1.SUMMC,
    CUR TYPE OF COLUMN TTEMP_PVN1.CUR)
AS
begin
-- PVN piel 1.1 - izdevumiem
    FOR SELECT
        did,
        clid,
        null AS doctyp1,
        doctyp2,
        doctypc,
        rac5,
        summ,
        pvn,
        0.0 AS summc,
        null AS cur
    FROM
    (
        SELECT 
            T2.did,
            T2.ClId,
            T2.DocTyp2,
            T2.DocTypC,
            T2.RAC5,
            CASE
                WHEN t2.PVND <> 0.00
                THEN t2.SummD
                ELSE -t2.SummC
                END AS Summ,
            CASE
                WHEN t2.PVND <> 0.00
                THEN t2.PVND
                ELSE -t2.PVNC
                END AS PVN
        FROM
        (
            SELECT 
                T1.did,
                MAX(T1.ClId) AS ClId,
                T1.DocTyp2 AS DocTyp2,
                T1.DocTypC AS DocTypC,
                MAX(T1.RAC5) AS RAC5,
                SUM(T1.SummD) AS SummD,
                SUM(T1.PVND) AS PVND,
                SUM(T1.SummC) AS SummC,
                SUM(T1.PVNC) AS PVNC
            FROM
            (
                SELECT 
                    OPSd.id AS did, 
                    OPSd.ClId AS ClId,
                    AcPVN.pz1 AS DocTyp2,
                    AcPVN.pz4 AS DocTypC,
                    OPS.AC15 AS RAC5,
                    0.00 AS SummD,
                    OPS.Summ AS PVND,
                    0.00 AS SummC,
                    0.00 AS PVNC
                FROM
                    OPSd INNER JOIN OPS ON OPSd.id = OPS.DocId
                    INNER JOIN AcPVN ON OPS.AC15 = AcPVN.id
                WHERE
                    (OPSd.Dete BETWEEN :psd AND :ped) AND
                    AcPVN.pz3 IN ('4','5')


                UNION ALL


                SELECT 
                    OPSd.id AS did, 
                    OPSd.ClId AS ClId,
                    AcPVN.pz1 AS DocTyp2,
                    AcPVN.pz4 AS DocTypC,
                    OPS.AC15 AS RAC5,
                    OPS.Summ AS SummD,
                    0.00 AS PVND,
                    0.00 AS SummC,
                    0.00 AS PVNC
                FROM
                    OPSd INNER JOIN OPS ON OPSd.id = OPS.DocId
                    LEFT JOIN AcPVN ON OPS.AC15 = AcPVN.id
                WHERE
                    (OPSd.Dete BETWEEN :psd AND :ped) AND
                     AcPVN.pz3 IN ('8')


                UNION ALL


                SELECT
                    T1A.did AS did,
                    MAX(T1A.ClId) AS ClId,
                    MAX(T1A.DocTyp2) AS DocTyp2,
                    MAX(T1A.DocTypC) AS DocTypC,
                    MAX(T1A.RAC5) AS RAC5,
                    SUM(T1B.Summ) AS SummD,
                    0.00 AS PVND,
                    0.00 AS SummC,
                    0.00 AS PVNC
                FROM
                    (SELECT
                        OPSd.id AS did, 
                        MAX(OPSd.ClId) AS ClId,
                        MAX(AcPVN.pz1) AS DocTyp2,
                        MAX(AcPVN.pz4) AS DocTypC,
                        MAX(OPS.AC15) AS RAC5
                    FROM
                        OPSd INNER JOIN OPS ON OPSd.id = OPS.DocId
                        INNER JOIN AcPVN ON OPS.AC15 = AcPVN.id
                    WHERE
                        (OPSd.Dete BETWEEN :psd AND :ped) AND
                        AcPVN.pz3 IN ('4')
                    GROUP BY OPSd.id
                    ) AS T1A
                    INNER JOIN OPS AS T1B ON T1A.did = T1B.DocId
                WHERE
                    T1B.AC15 IS NULL
                GROUP BY T1A.did

            
                UNION ALL


                -- ATGRIEZTƒÄ PRECE
                SELECT 
                    OPSd.id AS did, 
                    OPSd.ClId AS ClId,
                    AcPVN.pz1 AS DocTyp2,
                    AcPVN.pz4 AS DocTypC,
                    OPS.AC25 AS RAC5,
                    0.00 AS SummD,
                    0.00 AS PVND,
                    0.00 AS SummC,
                    OPS.Summ AS PVNC
                FROM
                    OPSd INNER JOIN OPS ON OPSd.id = OPS.DocId
                    INNER JOIN AcPVN ON OPS.AC25 = AcPVN.id
                WHERE
                    (OPSd.Dete BETWEEN :psd AND :ped) AND
                    AcPVN.pz3 IN ('4','5')

                UNION ALL

                SELECT 
                    OPSd.id AS did, 
                    OPSd.ClId AS ClId,
                    AcPVN.pz1 AS DocTyp2,
                    AcPVN.pz4 AS DocTypC,
                    OPS.AC25 AS RAC5,
                    0.00 AS SummD,
                    0.00 AS PVND,
                    OPS.Summ AS SummC,
                    0.00 AS PVNC
                FROM
                    OPSd INNER JOIN OPS ON OPSd.id = OPS.DocId
                    LEFT JOIN AcPVN ON OPS.AC25 = AcPVN.id
                WHERE
                    (OPSd.Dete BETWEEN :psd AND :ped) AND
                     AcPVN.pz3 IN ('8')


                UNION ALL


                SELECT
                    T1A.did AS did,
                    MAX(T1A.ClId) AS ClId,
                    MAX(T1A.DocTyp2) AS DocTyp2,
                    MAX(T1A.DocTypC) AS DocTypC,
                    MAX(T1A.RAC5) AS RAC5,
                    0.00 AS SummD,
                    0.00 AS PVND,
                    SUM(T1B.Summ) AS SummC,
                    0.00 AS PVNC
                FROM
                    (SELECT
                        OPSd.id AS did, 
                        MAX(OPSd.ClId) AS ClId,
                        MAX(AcPVN.pz1) AS DocTyp2,
                        MAX(AcPVN.pz4) AS DocTypC,
                        MAX(OPS.AC25) AS RAC5
                    FROM
                        OPSd INNER JOIN OPS ON OPSd.id = OPS.DocId
                        INNER JOIN AcPVN ON OPS.AC25 = AcPVN.id
                    WHERE
                        (OPSd.Dete BETWEEN :psd AND :ped) AND
                        AcPVN.pz3 IN ('4')
                    GROUP BY OPSd.id
                    ) AS T1A
                    INNER JOIN OPS AS T1B ON T1A.did = T1B.DocId
                WHERE
                    T1B.AC25 IS NULL
                GROUP BY T1A.did


            ) AS T1
            GROUP BY T1.did, T1.DocTyp2, T1.DocTypC
        ) AS T2
    ) AS T3
        
    WHERE 
        T3.Summ <> 0.00 AND
        T3.DocTyp2 IS NOT NULL

    into
        :did, :clid, :doctyp1, :doctyp2, :doctypc,
        :rac5, :summ, :pvn, :summc, :cur
    do
    begin
        suspend;
    end

end^


ALTER PROCEDURE SP_REP_PVN_22 (
    PSD DATE,
    PED DATE,
    RG1 MONEY,
    RG2 MONEY)
RETURNS (
    ID TYPE OF COLUMN ROPS1A.ID,
    SPID TYPE OF COLUMN ROPS1A.SPID,
    DID TYPE OF COLUMN ROPS1A.DID,
    DETE TYPE OF COLUMN ROPS1A.DETE,
    NRX TYPE OF COLUMN ROPS1A.NRX,
    DOCTYP TYPE OF COLUMN ROPS1A.DOCTYP,
    DOCTYP1 TYPE OF COLUMN ROPS1A.DOCTYP1,
    DOCTYP2 TYPE OF COLUMN ROPS1A.DOCTYP2,
    DOCST TYPE OF COLUMN ROPS1A.DOCST,
    DOCNR TYPE OF COLUMN ROPS1A.DOCNR,
    CLID TYPE OF COLUMN ROPS1A.CLID,
    CLID2 TYPE OF COLUMN ROPS1A.CLID2,
    NAME TYPE OF COLUMN ROPS1A.NAME,
    NAME2 TYPE OF COLUMN ROPS1A.NAME2,
    REGNR TYPE OF COLUMN ROPS1A.REGNR,
    REGNR2 TYPE OF COLUMN ROPS1A.REGNR2,
    B0 TYPE OF COLUMN ROPS1A.B0,
    DESCR TYPE OF COLUMN ROPS1A.DESCR,
    DESCR2 TYPE OF COLUMN ROPS1A.DESCR2,
    AC1 TYPE OF COLUMN ROPS1A.AC1,
    AC2 TYPE OF COLUMN ROPS1A.AC2,
    SAC1 TYPE OF COLUMN ROPS1A.SAC1,
    SAC2 TYPE OF COLUMN ROPS1A.SAC2,
    SUMMC TYPE OF COLUMN ROPS1A.SUMMC,
    CUR TYPE OF COLUMN ROPS1A.CUR,
    SUMM TYPE OF COLUMN ROPS1A.SUMM,
    PVN TYPE OF COLUMN ROPS1A.PVN,
    RAC TYPE OF COLUMN ROPS1A.RAC,
    SDB TYPE OF COLUMN ROPS1A.SDB,
    SCR TYPE OF COLUMN ROPS1A.SCR,
    RAC2 TYPE OF COLUMN ROPS1A.RAC2,
    RAC3 TYPE OF COLUMN ROPS1A.RAC3,
    RAC4 TYPE OF COLUMN ROPS1A.RAC4,
    RAC5 TYPE OF COLUMN ROPS1A.RAC5,
    QV TYPE OF COLUMN ROPS1A.QV,
    ZNR TYPE OF COLUMN ROPS1A.ZNR)
AS
begin
-- PVN piel 1.1 - izdevumiem
    
    DELETE FROM ttemp_pvn1 WHERE Did IS NOT NULL;

    INSERT INTO ttemp_pvn1(
        did, clid, doctyp1, doctyp2, doctypc,
        rac5, summ, pvn, summc, cur)
    SELECT
        did, clid, doctyp1, doctyp2, doctypc,
        rac5, summ, pvn, summc, cur
    FROM SP_REP_PVN_21(:PSD, :PED, :RG1, :RG2);


    UPDATE ttemp_pvn1
    SET ttemp_pvn1.summdoc =
        (
            SELECT SUM(ST2.summ)
            FROM
                OPSD AS DT1
                INNER JOIN OPSD AS DT2 ON
                    (DT1.id = ttemp_pvn1.did AND
                     DT1.DETE = DT2.DETE AND
                     DT1.CLID = DT2.CLID AND
                     DT1.DOCTYP = DT2.DOCTYP AND
                     DT1.DOCNR = DT2.DOCNR)
                INNER JOIN ttemp_pvn1 AS ST2 ON ST2.did = DT2.id
        )
    WHERE EXISTS(
            SELECT ID
            FROM OPSD AS DW1
            WHERE
                DW1.id = ttemp_pvn1.did AND
                DW1.CLID IS NOT NULL AND
                DW1.DOCTYP IS NOT NULL AND
                DW1.DOCNR IS NOT NULL);


    UPDATE ttemp_pvn1
    SET ttemp_pvn1.summdoc = ttemp_pvn1.summ
    WHERE NOT EXISTS(
            SELECT ID
            FROM OPSD AS DW1
            WHERE
                DW1.id = ttemp_pvn1.did AND
                DW1.CLID IS NOT NULL AND
                DW1.DOCTYP IS NOT NULL AND
                DW1.DOCNR IS NOT NULL);



    INSERT INTO ttemp_pvn2(clid)
    SELECT TT1.ClId
    FROM ttemp_pvn1 AS TT1
    WHERE 
        TT1.ClId IS NOT NULL AND
        ABS(TT1.SummDoc) < :rg1 AND
        TT1.DocTypC = 0
    GROUP BY TT1.ClId
    HAVING SUM(ABS(TT1.Summ)) < :rg1;


    FOR SELECT
        gen_id(GEN_ROPS1A_ID, 1) as ID,
        current_connection as SPID,
        T4.did,
        CASE
            WHEN OPSd.DT2 IS NULL
            THEN OPSd.Dete
            ELSE OPSd.DT2
            END AS Dete,
        null AS nrx,
        null AS DocTyp,
        DocTyp.pvnpaz AS DocTyp1,
        T4.DocTyp2 AS DocTyp2,
        OPSd.DocSt,
        OPSd.DocNr,
        OPSd.clid AS clid,
        null AS clid2,
        Persons.Name AS Name,
        null AS Name2,
        Persons.PVNRegNr AS RegNr,
        null AS RegNr2,
        0.0 AS b0,
        null AS descr,
        null AS descr2,
        null AS AC1,
        null AS AC2,
        null AS SAC1,
        null AS SAC2,
        0.0 AS SummC,
        'EUR' AS Cur,
        T4.Summ AS Summ,
        T4.PVN AS PVN,
        null AS RAC,
        0.0 AS SDb,
        0.0 AS SCr,
        null AS RAC2,
        null AS RAC3,
        null AS RAC4,
        null AS RAC5,
        0.0 AS QV,
        OPSd.znr AS ZNR

    FROM
    (
        SELECT
            T3.did,
            T3.ClId,
            T3.DocTyp2,
            SUM(T3.Summ) AS Summ,
            SUM(T3.PVN) AS PVN
        FROM
        (    
            SELECT
                -1 AS did,
                NULL AS ClId,
                'T' AS DocTyp2,
                T2.Summ AS Summ,
                T2.PVN AS PVN

            FROM TTEMP_PVN1 AS T2 LEFT JOIN TTEMP_PVN2 AS T21 ON T2.ClId = T21.ClId
            WHERE 
                ((ABS(T2.SummDoc) < :rg1 AND
                T2.DocTypC = 0 AND
                (T2.ClId IS NOT NULL AND T21.ClId IS NOT NULL)))
                OR
                (T2.ClId IS NULL)

            UNION ALL

            SELECT
                -1 AS did,
                T2.ClId AS ClId,
                'V' AS DocTyp2,
                T2.Summ AS Summ,
                T2.PVN AS PVN

            FROM TTEMP_PVN1 AS T2 LEFT JOIN TTEMP_PVN2 AS T21 ON T2.ClId = T21.ClId
            WHERE 
                ABS(T2.SummDoc) < :rg1 AND
                T2.DocTypC = 0 AND
                (T2.ClId IS NOT NULL AND T21.ClId IS NULL)
            
            UNION ALL

            SELECT
                T2.did AS did,
                T2.ClId AS ClId,
                T2.DocTyp2 AS DocTyp2,
                T2.Summ AS Summ,
                T2.PVN AS PVN

            FROM TTEMP_PVN1 AS T2 LEFT JOIN TTEMP_PVN2 AS T21 ON T2.ClId = T21.ClId
            WHERE 
                T2.ClId IS NOT NULL AND
                (ABS(T2.SummDoc) >= :rg1 OR
                T2.DocTypC = 1)

        ) AS T3
        GROUP BY T3.did, T3.ClId, T3.DocTyp2

    ) AS T4 

        LEFT JOIN OPSd ON T4.did = OPSd.id
        LEFT JOIN DocTyp ON OPSd.DocTyp = DocTyp.id
        LEFT JOIN Persons ON T4.ClId = Persons.ClId

    ORDER BY OPSd.Dete


    into
        :id, :spid, :did, :DETE, :nrx,
        :doctyp, :doctyp1, :doctyp2, :docst, :docnr,
        :clid, :clid2, :name, :name2, :regnr, :regnr2,
        :b0, :descr, :descr2, :ac1, :ac2, :sac1,:sac2,
        :summc, :cur, :summ, :pvn, :rac, :sdb, :scr,
        :rac2, :rac3, :rac4, :rac5, :qv, :znr
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_REP_PVN_31 (
    PSD DATE,
    PED DATE,
    RG1 MONEY,
    RG2 MONEY)
RETURNS (
    DID TYPE OF COLUMN TTEMP_PVN1.DID,
    CLID TYPE OF COLUMN TTEMP_PVN1.CLID,
    DOCTYP1 TYPE OF COLUMN TTEMP_PVN1.DOCTYP1,
    DOCTYP2 TYPE OF COLUMN TTEMP_PVN1.DOCTYP2,
    DOCTYPC TYPE OF COLUMN TTEMP_PVN1.DOCTYPC,
    RAC5 TYPE OF COLUMN TTEMP_PVN1.RAC5,
    SUMM TYPE OF COLUMN TTEMP_PVN1.SUMM,
    PVN TYPE OF COLUMN TTEMP_PVN1.PVN,
    SUMMC TYPE OF COLUMN TTEMP_PVN1.SUMMC,
    CUR TYPE OF COLUMN TTEMP_PVN1.CUR)
AS
begin
-- PVN 1.3. pielikums     (ie≈Üƒìmumi)
    FOR SELECT
        did,
        T2.Clid,
        CASE
            WHEN Summ > :rg1 AND
                (DocTyp.pvnpaz IS NULL OR
                    T2.ClId IS NULL OR
                    Persons.TP3 = 'Nav') THEN 'X'
            ELSE DocTyp.pvnpaz
        END AS DocTyp1,
        DocTyp2, 
        DocTypC, 
        RAC5,
        Summ, 
        PVN,
        0.0 AS summc,
        null AS cur
    FROM
    (
        SELECT 
            T1.did,
            MAX(T1.ClId) AS ClId,
            MAX(T1.DocTyp1) AS DocTyp1,
            MAX(T1.DocTyp2) AS DocTyp2,
            MAX(T1.DocTypC) AS DocTypC,
            MAX(T1.RAC5) AS RAC5,
            SUM(T1.SummC - T1.SummD) AS Summ,
            SUM(T1.PVNC - T1.PVND) AS PVN
        FROM
        (
            SELECT 
                OPSd.id AS did, 
                OPSd.ClId AS ClId,
                OPSd.DocTyp AS DocTyp1,
                AcPVN.pz1 AS DocTyp2,
                AcPVN.pz4 AS DocTypC,
                OPS.AC25 AS RAC5,
                0.00 AS SummD,
                0.00 AS PVND,
                0.00 AS SummC,
                OPS.Summ AS PVNC
            FROM
                OPSd INNER JOIN OPS ON OPSd.id = OPS.DocId
                INNER JOIN AcPVN ON OPS.AC25 = AcPVN.id
            WHERE
                (OPSd.Dete BETWEEN :psd AND :ped) AND
                AcPVN.pz3 IS NOT NULL AND 
                AcPVN.pz3 IN ('2') 

            UNION ALL

            SELECT 
                OPSd.id AS did, 
                OPSd.ClId AS ClId,
                OPSd.DocTyp AS DocTyp1,
                AcPVN.pz1 AS DocTyp2,
                AcPVN.pz4 AS DocTypC,
                OPS.AC25 AS RAC5,
                0.00 AS SummD,
                0.00 AS PVND,
                OPS.Summ AS SummC,
                0.00 AS PVNC
            FROM
                OPSd INNER JOIN OPS ON OPSd.id = OPS.DocId
                LEFT JOIN AcPVN ON OPS.AC25 = AcPVN.id
            WHERE
                OPSd.Dete BETWEEN :psd AND :ped AND
                AcPVN.pz3 IS NOT NULL AND 
                AcPVN.pz3 IN ('1') 

            UNION ALL

            --ATGRIEZTA PRECE
            SELECT 
                OPSd.id AS did, 
                OPSd.ClId AS ClId,
                OPSd.DocTyp AS DocTyp1,
                AcPVN.pz1 AS DocTyp2,
                AcPVN.pz4 AS DocTypC,
                OPS.AC15 AS RAC5,
                0.00 AS SummD,
                OPS.Summ AS PVND,
                0.00 AS SummC,
                0.00 AS PVNC
            FROM
                OPSd INNER JOIN OPS ON OPSd.id = OPS.DocId
                INNER JOIN AcPVN ON OPS.AC15 = AcPVN.id
            WHERE
                (OPSd.Dete BETWEEN :psd AND :ped) AND
                AcPVN.pz3 IS NOT NULL AND 
                AcPVN.pz3 IN ('2') 

            UNION ALL

            SELECT 
                OPSd.id AS did, 
                OPSd.ClId AS ClId,
                OPSd.DocTyp AS DocTyp1,
                AcPVN.pz1 AS DocTyp2,
                AcPVN.pz4 AS DocTypC,
                OPS.AC15 AS RAC5,
                OPS.Summ AS SummD,
                0.00 AS PVND,
                0.00 AS SummC,
                0.00 AS PVNC
            FROM
                OPSd INNER JOIN OPS ON OPSd.id = OPS.DocId
                LEFT JOIN AcPVN ON OPS.AC15 = AcPVN.id
            WHERE
                OPSd.Dete BETWEEN :psd AND :ped AND
                AcPVN.pz3 IS NOT NULL AND 
                AcPVN.pz3 IN ('1') 


        ) AS T1

        GROUP BY T1.did

    ) AS T2
        LEFT JOIN Persons ON T2.ClId = Persons.clid
        LEFT JOIN DocTyp ON T2.DocTyp1 = DocTyp.id

    WHERE 
        T2.Summ <> 0.00 AND
        T2.DocTyp2 IS NOT NULL

    into
        :did, :clid, :doctyp1, :doctyp2, :doctypc,
        :rac5, :summ, :pvn, :summc, :cur
    do
    begin
        suspend;
    end


end^


ALTER PROCEDURE SP_REP_PVN_32 (
    PSD DATE,
    PED DATE,
    RG1 MONEY,
    RG2 MONEY)
RETURNS (
    ID TYPE OF COLUMN ROPS1A.ID,
    SPID TYPE OF COLUMN ROPS1A.SPID,
    DID TYPE OF COLUMN ROPS1A.DID,
    DETE TYPE OF COLUMN ROPS1A.DETE,
    NRX TYPE OF COLUMN ROPS1A.NRX,
    DOCTYP TYPE OF COLUMN ROPS1A.DOCTYP,
    DOCTYP1 TYPE OF COLUMN ROPS1A.DOCTYP1,
    DOCTYP2 TYPE OF COLUMN ROPS1A.DOCTYP2,
    DOCST TYPE OF COLUMN ROPS1A.DOCST,
    DOCNR TYPE OF COLUMN ROPS1A.DOCNR,
    CLID TYPE OF COLUMN ROPS1A.CLID,
    CLID2 TYPE OF COLUMN ROPS1A.CLID2,
    NAME TYPE OF COLUMN ROPS1A.NAME,
    NAME2 TYPE OF COLUMN ROPS1A.NAME2,
    REGNR TYPE OF COLUMN ROPS1A.REGNR,
    REGNR2 TYPE OF COLUMN ROPS1A.REGNR2,
    B0 TYPE OF COLUMN ROPS1A.B0,
    DESCR TYPE OF COLUMN ROPS1A.DESCR,
    DESCR2 TYPE OF COLUMN ROPS1A.DESCR2,
    AC1 TYPE OF COLUMN ROPS1A.AC1,
    AC2 TYPE OF COLUMN ROPS1A.AC2,
    SAC1 TYPE OF COLUMN ROPS1A.SAC1,
    SAC2 TYPE OF COLUMN ROPS1A.SAC2,
    SUMMC TYPE OF COLUMN ROPS1A.SUMMC,
    CUR TYPE OF COLUMN ROPS1A.CUR,
    SUMM TYPE OF COLUMN ROPS1A.SUMM,
    PVN TYPE OF COLUMN ROPS1A.PVN,
    RAC TYPE OF COLUMN ROPS1A.RAC,
    SDB TYPE OF COLUMN ROPS1A.SDB,
    SCR TYPE OF COLUMN ROPS1A.SCR,
    RAC2 TYPE OF COLUMN ROPS1A.RAC2,
    RAC3 TYPE OF COLUMN ROPS1A.RAC3,
    RAC4 TYPE OF COLUMN ROPS1A.RAC4,
    RAC5 TYPE OF COLUMN ROPS1A.RAC5,
    QV TYPE OF COLUMN ROPS1A.QV,
    ZNR TYPE OF COLUMN ROPS1A.ZNR)
AS
begin
-- PVN 3. pielikums     (ie≈Üƒìmumi)

    
    DELETE FROM ttemp_pvn1 WHERE Did IS NOT NULL;

    INSERT INTO ttemp_pvn1(
        did, clid, doctyp1, doctyp2, doctypc,
        rac5, summ, pvn, summc, cur)
    SELECT
        did, clid, doctyp1, doctyp2, doctypc,
        rac5, summ, pvn, summc, cur
    FROM SP_REP_PVN_31(:PSD, :PED, :RG1, :RG2);


    INSERT INTO ttemp_pvn2(clid)
    SELECT TT1.ClId
    FROM ttemp_pvn1 AS TT1
    WHERE 
        TT1.ClId IS NOT NULL AND
        ABS(TT1.Summ) < :rg1 AND
        TT1.DocTypC = 0
    GROUP BY TT1.ClId
    HAVING SUM(ABS(TT1.Summ)) < :rg1;


    FOR SELECT
        gen_id(GEN_ROPS1A_ID, 1) as ID,
        current_connection as SPID,
        T4.did,
        CASE
            WHEN OPSd.DT2 IS NULL
            THEN OPSd.Dete
            ELSE OPSd.DT2
            END AS Dete,
        null AS nrx,
        null AS DocTyp,
        T4.DocTyp1 AS DocTyp1,
        T4.DocTyp2 AS DocTyp2,
        OPSd.DocSt,
        OPSd.DocNr,
        OPSd.clid AS clid,
        null AS clid2,
        Persons.Name AS Name,
        null AS Name2,
        Persons.PVNRegNr AS RegNr,
        null AS RegNr2,
        0.0 AS b0,
        null AS descr,
        null AS descr2,
        null AS AC1,
        null AS AC2,
        null AS SAC1,
        null AS SAC2,
        0.0 AS SummC,
        'EUR' AS Cur,
        T4.Summ AS Summ,
        T4.PVN AS PVN,
        null AS RAC,
        0.0 AS SDb,
        0.0 AS SCr,
        null AS RAC2,
        null AS RAC3,
        null AS RAC4,
        null AS RAC5,
        0.0 AS QV,
        OPSd.znr AS ZNR
    
    FROM
    (
        SELECT
            T3.did,
            T3.ClId,
            T3.DocTyp1,
            T3.DocTyp2,
            SUM(T3.Summ) AS Summ,
            SUM(T3.PVN) AS PVN
        FROM
        (    
            SELECT
                -1 AS did,
                NULL AS ClId,
                'X' AS DocTyp1,
                T2.DocTyp2 AS DocTyp2,
                T2.Summ AS Summ,
                T2.PVN AS PVN

            FROM TTEMP_PVN1 AS T2
            WHERE 
                T2.DocTyp1 = 'X'

            UNION ALL

            SELECT
                -1 AS did,
                NULL AS ClId,
                'T' AS DocTyp1,
                T2.DocTyp2 AS DocTyp2,
                T2.Summ AS Summ,
                T2.PVN AS PVN

            FROM TTEMP_PVN1 AS T2 LEFT JOIN TTEMP_PVN2 AS T21 ON T2.ClId = T21.ClId
            WHERE 
                (
                    ABS(T2.Summ) < :rg1 AND 
                    T2.DocTypC = 0 AND
                    T21.ClId IS NOT NULL AND
                    T2.DocTyp1 <> 'X'
                ) OR (
                    T2.ClId IS NULL AND
                    T2.DocTyp1 <> 'X'
                )

            UNION ALL

            SELECT
                -1 AS did,
                T2.ClId AS ClId,
                'V' AS DocTyp1,
                T2.DocTyp2 AS DocTyp2,
                T2.Summ AS Summ,
                T2.PVN AS PVN

            FROM TTEMP_PVN1 AS T2 LEFT JOIN TTEMP_PVN2 AS T21 ON T2.ClId = T21.ClId
            WHERE 
                ABS(T2.Summ) < :rg1 AND 
                T2.DocTypC = 0 AND
                T2.ClId IS NOT NULL AND
                T21.ClId IS NULL
            
            UNION ALL

            SELECT
                T2.did AS did,
                T2.ClId AS ClId,
                T2.DocTyp1 AS DocTyp1,
                T2.DocTyp2 AS DocTyp2,
                T2.Summ AS Summ,
                T2.PVN AS PVN

            FROM TTEMP_PVN1 AS T2 LEFT JOIN TTEMP_PVN2 AS T21 ON T2.ClId = T21.ClId
            WHERE 
                (
                    ABS(T2.Summ) >= :rg1 OR
                    T2.DocTypC = 1
                ) AND
                    T2.DocTyp1 <> 'X' AND
                    T2.ClId IS NOT NULL

        ) AS T3
        GROUP BY T3.did, T3.ClId, T3.DocTyp1, T3.DocTyp2

    ) AS T4 

        LEFT JOIN OPSd ON T4.did = OPSd.id
        LEFT JOIN Persons ON T4.ClId = Persons.ClId

    ORDER BY OPSd.Dete


    into
        :id, :spid, :did, :DETE, :nrx,
        :doctyp, :doctyp1, :doctyp2, :docst, :docnr,
        :clid, :clid2, :name, :name2, :regnr, :regnr2,
        :b0, :descr, :descr2, :ac1, :ac2, :sac1,:sac2,
        :summc, :cur, :summ, :pvn, :rac, :sdb, :scr,
        :rac2, :rac3, :rac4, :rac5, :qv, :znr
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_REP_PVN_41 (
    PSD DATE,
    PED DATE,
    RG1 MONEY,
    RG2 MONEY)
RETURNS (
    ID TYPE OF COLUMN ROPS1A.ID,
    SPID TYPE OF COLUMN ROPS1A.SPID,
    DID TYPE OF COLUMN ROPS1A.DID,
    DETE TYPE OF COLUMN ROPS1A.DETE,
    NRX TYPE OF COLUMN ROPS1A.NRX,
    DOCTYP TYPE OF COLUMN ROPS1A.DOCTYP,
    DOCTYP1 TYPE OF COLUMN ROPS1A.DOCTYP1,
    DOCTYP2 TYPE OF COLUMN ROPS1A.DOCTYP2,
    DOCST TYPE OF COLUMN ROPS1A.DOCST,
    DOCNR TYPE OF COLUMN ROPS1A.DOCNR,
    CLID TYPE OF COLUMN ROPS1A.CLID,
    CLID2 TYPE OF COLUMN ROPS1A.CLID2,
    NAME TYPE OF COLUMN ROPS1A.NAME,
    NAME2 TYPE OF COLUMN ROPS1A.NAME2,
    REGNR TYPE OF COLUMN ROPS1A.REGNR,
    REGNR2 TYPE OF COLUMN ROPS1A.REGNR2,
    B0 TYPE OF COLUMN ROPS1A.B0,
    DESCR TYPE OF COLUMN ROPS1A.DESCR,
    DESCR2 TYPE OF COLUMN ROPS1A.DESCR2,
    AC1 TYPE OF COLUMN ROPS1A.AC1,
    AC2 TYPE OF COLUMN ROPS1A.AC2,
    SAC1 TYPE OF COLUMN ROPS1A.SAC1,
    SAC2 TYPE OF COLUMN ROPS1A.SAC2,
    SUMMC TYPE OF COLUMN ROPS1A.SUMMC,
    CUR TYPE OF COLUMN ROPS1A.CUR,
    SUMM TYPE OF COLUMN ROPS1A.SUMM,
    PVN TYPE OF COLUMN ROPS1A.PVN,
    RAC TYPE OF COLUMN ROPS1A.RAC,
    SDB TYPE OF COLUMN ROPS1A.SDB,
    SCR TYPE OF COLUMN ROPS1A.SCR,
    RAC2 TYPE OF COLUMN ROPS1A.RAC2,
    RAC3 TYPE OF COLUMN ROPS1A.RAC3,
    RAC4 TYPE OF COLUMN ROPS1A.RAC4,
    RAC5 TYPE OF COLUMN ROPS1A.RAC5,
    QV TYPE OF COLUMN ROPS1A.QV,
    ZNR TYPE OF COLUMN ROPS1A.ZNR)
AS
begin
-- PVN2 uz ES pieg√Ñ¬Åd√Ñ¬Åt√Ñ¬Å prece vai pakalpojumi (ie√Ö‚Ä†√Ñ‚Äúmumi)
    FOR SELECT
        gen_id(GEN_ROPS1A_ID, 1) as ID,
        current_connection as SPID,
        did,
        CASE
            WHEN OPSd.DT2 IS NULL
            THEN OPSd.Dete
            ELSE OPSd.DT2
            END AS Dete,
        null AS nrx,
        null AS DocTyp,
        DocTyp.pvnpaz AS DocTyp1,
        T2.DocTyp2, 
        OPSd.DocSt,
        OPSd.DocNr,
        OPSd.clid AS clid,
        null AS clid2,
        Persons.Name AS Name,
        null AS Name2,
        Persons.PVNRegNr AS RegNr,
        null AS RegNr2,
        0.0 AS b0,
        null AS descr,
        null AS descr2,
        null AS AC1,
        null AS AC2,
        null AS SAC1,
        null AS SAC2,
        0.0 AS SummC,
        'EUR' AS Cur,
        T2.Summ AS Summ,  
        T2.PVN AS PVN,
        null AS RAC,
        0.0 AS SDb,
        0.0 AS SCr,
        null AS RAC2,
        null AS RAC3,
        null AS RAC4,
        null AS RAC5,
        0.0 AS QV,
        OPSd.znr AS ZNR

    FROM
    (
        SELECT 
            T1.did,
            T1.ClId,
            T1.DocTyp1,
            MAX(T1.DocTyp2) AS DocTyp2,
            MAX(T1.RAC5) AS RAC5,
            SUM(T1.Summ) AS Summ,
            SUM(T1.PVN) AS PVN
        FROM
        (
            SELECT 
                OPSd.id AS did, 
                OPSd.ClId AS ClId,
                OPSd.DocTyp AS DocTyp1,
                AcPVN.pz1 AS DocTyp2,
                OPS.AC25 AS RAC5,
                OPS.Summ AS Summ,
                0.00 AS PVN
            FROM
                OPSd INNER JOIN OPS ON OPSd.id = OPS.DocId
                LEFT JOIN AcPVN ON OPS.AC25 = AcPVN.id
            WHERE
                OPSd.Dete BETWEEN :psd AND :ped AND
                AcPVN.pz3 IN ('71', '72') 

        ) AS T1

        GROUP BY T1.did, T1.ClId, T1.DocTyp1

    ) AS T2
        INNER JOIN OPSd ON T2.did = OPSd.id
        LEFT JOIN DocTyp ON T2.DocTyp1 = DocTyp.id
        LEFT JOIN Persons ON T2.ClId = Persons.ClId

    WHERE 
        T2.Summ <> 0.00 AND
        T2.DocTyp2 IS NOT NULL

    ORDER BY OPSd.Dete

    into
        :id, :spid, :did, :DETE, :nrx,
        :doctyp, :doctyp1, :doctyp2, :docst, :docnr,
        :clid, :clid2, :name, :name2, :regnr, :regnr2,
        :b0, :descr, :descr2, :ac1, :ac2, :sac1,:sac2,
        :summc, :cur, :summ, :pvn, :rac, :sdb, :scr,
        :rac2, :rac3, :rac4, :rac5, :qv, :znr
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_REP_PVN_42 (
    PSD DATE,
    PED DATE,
    RG1 MONEY,
    RG2 MONEY)
RETURNS (
    ID TYPE OF COLUMN ROPS1A.ID,
    SPID TYPE OF COLUMN ROPS1A.SPID,
    DID TYPE OF COLUMN ROPS1A.DID,
    DETE TYPE OF COLUMN ROPS1A.DETE,
    NRX TYPE OF COLUMN ROPS1A.NRX,
    DOCTYP TYPE OF COLUMN ROPS1A.DOCTYP,
    DOCTYP1 TYPE OF COLUMN ROPS1A.DOCTYP1,
    DOCTYP2 TYPE OF COLUMN ROPS1A.DOCTYP2,
    DOCST TYPE OF COLUMN ROPS1A.DOCST,
    DOCNR TYPE OF COLUMN ROPS1A.DOCNR,
    CLID TYPE OF COLUMN ROPS1A.CLID,
    CLID2 TYPE OF COLUMN ROPS1A.CLID2,
    NAME TYPE OF COLUMN ROPS1A.NAME,
    NAME2 TYPE OF COLUMN ROPS1A.NAME2,
    REGNR TYPE OF COLUMN ROPS1A.REGNR,
    REGNR2 TYPE OF COLUMN ROPS1A.REGNR2,
    B0 TYPE OF COLUMN ROPS1A.B0,
    DESCR TYPE OF COLUMN ROPS1A.DESCR,
    DESCR2 TYPE OF COLUMN ROPS1A.DESCR2,
    AC1 TYPE OF COLUMN ROPS1A.AC1,
    AC2 TYPE OF COLUMN ROPS1A.AC2,
    SAC1 TYPE OF COLUMN ROPS1A.SAC1,
    SAC2 TYPE OF COLUMN ROPS1A.SAC2,
    SUMMC TYPE OF COLUMN ROPS1A.SUMMC,
    CUR TYPE OF COLUMN ROPS1A.CUR,
    SUMM TYPE OF COLUMN ROPS1A.SUMM,
    PVN TYPE OF COLUMN ROPS1A.PVN,
    RAC TYPE OF COLUMN ROPS1A.RAC,
    SDB TYPE OF COLUMN ROPS1A.SDB,
    SCR TYPE OF COLUMN ROPS1A.SCR,
    RAC2 TYPE OF COLUMN ROPS1A.RAC2,
    RAC3 TYPE OF COLUMN ROPS1A.RAC3,
    RAC4 TYPE OF COLUMN ROPS1A.RAC4,
    RAC5 TYPE OF COLUMN ROPS1A.RAC5,
    QV TYPE OF COLUMN ROPS1A.QV,
    ZNR TYPE OF COLUMN ROPS1A.ZNR)
AS
begin
-- PVN2 uz ES pieg√Ñ¬Åd√Ñ¬Åt√Ñ¬Å prece vai pakalpojumi (ie√Ö‚Ä†√Ñ‚Äúmumi)
    FOR SELECT
        gen_id(GEN_ROPS1A_ID, 1) as ID,
        current_connection as SPID,
        null,
        null AS Dete,
        null AS nrx,
        null AS DocTyp,
        null AS DocTyp1,
        T2.DocTyp2, 
        null AS DocSt,
        null AS DocNr,
        null AS clid,
        null AS clid2,
        Persons.Name AS Name,
        null AS Name2,
        Persons.PVNRegNr AS RegNr,
        null AS RegNr2,
        0.0 AS b0,
        null AS descr,
        null AS descr2,
        null AS AC1,
        null AS AC2,
        null AS SAC1,
        null AS SAC2,
        0.0 AS SummC,
        'EUR' AS Cur,
        T2.Summ AS Summ,
        T2.PVN AS PVN,
        null AS RAC,
        0.0 AS SDb,
        0.0 AS SCr,
        null AS RAC2,
        null AS RAC3,
        null AS RAC4,
        null AS RAC5,
        0.0 AS QV,
        null AS ZNR

    FROM
    (
        SELECT 
            T1.ClId,
            T1.DocTyp2,
            SUM(T1.Summ) AS Summ,
            SUM(T1.PVN) AS PVN
        FROM
        (
            SELECT 
                OPSd.id AS did, 
                OPSd.ClId AS ClId,
                OPSd.DocTyp AS DocTyp1,
                AcPVN.pz1 AS DocTyp2,
                OPS.AC25 AS RAC5,
                OPS.Summ AS Summ,
                0.00 AS PVN
            FROM
                OPSd INNER JOIN OPS ON OPSd.id = OPS.DocId
                LEFT JOIN AcPVN ON OPS.AC25 = AcPVN.id
            WHERE
                OPSd.Dete BETWEEN :psd AND :ped AND
                AcPVN.pz3 IN ('71', '72') 

        ) AS T1

        GROUP BY T1.ClId, T1.DocTyp2

    ) AS T2
        LEFT JOIN Persons ON T2.ClId = Persons.ClId

    WHERE 
        T2.Summ <> 0.00 AND
        T2.DocTyp2 IS NOT NULL


    into
        :id, :spid, :did, :DETE, :nrx,
        :doctyp, :doctyp1, :doctyp2, :docst, :docnr,
        :clid, :clid2, :name, :name2, :regnr, :regnr2,
        :b0, :descr, :descr2, :ac1, :ac2, :sac1,:sac2,
        :summc, :cur, :summ, :pvn, :rac, :sdb, :scr,
        :rac2, :rac3, :rac4, :rac5, :qv, :znr
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_REP_PVN_51 (
    PSD DATE,
    PED DATE,
    RG1 MONEY,
    RG2 MONEY)
RETURNS (
    DID TYPE OF COLUMN TTEMP_PVN1.DID,
    CLID TYPE OF COLUMN TTEMP_PVN1.CLID,
    DOCTYP1 TYPE OF COLUMN TTEMP_PVN1.DOCTYP1,
    DOCTYP2 TYPE OF COLUMN TTEMP_PVN1.DOCTYP2,
    DOCTYPC TYPE OF COLUMN TTEMP_PVN1.DOCTYPC,
    RAC5 TYPE OF COLUMN TTEMP_PVN1.RAC5,
    SUMM TYPE OF COLUMN TTEMP_PVN1.SUMM,
    PVN TYPE OF COLUMN TTEMP_PVN1.PVN,
    SUMMC TYPE OF COLUMN TTEMP_PVN1.SUMMC,
    CUR TYPE OF COLUMN TTEMP_PVN1.CUR)
AS
begin
-- PVN piel 1.2 - no ES sa√Ö‚Ä†emt√Ñ¬Ås preces, pakalpojumi
    FOR SELECT
        did,
        clid,
        null AS doctyp1,
        doctyp2,
        null AS doctypc,
        rac5,
        summ,
        pvn,
        summc,
        curr AS CUR
    FROM
    (
        SELECT 
            T2.did,
            T2.ClId,
            T2.DocTyp2,
            T2.RAC5,
            T2.SummD AS Summ,
            T2.PVND AS PVN,
            T2.SummC,
            T2.Curr
        FROM
        (
            SELECT 
                T1.did,
                MAX(T1.ClId) AS ClId,
                MAX(T1.DocTyp2) AS DocTyp2,
                MAX(T1.RAC5) AS RAC5,
                SUM(T1.SummD) AS SummD,
                SUM(T1.PVND) AS PVND,
                SUM(T1.SummC) AS SummC,
                MAX(T1.Curr) AS Curr
            FROM
            (
                SELECT 
                    OPSd.id AS did, 
                    OPSd.ClId AS ClId,
                    AcPVN.pz1 AS DocTyp2,
                    OPS.AC15 AS RAC5,
                    0.00 AS SummD,
                    -OPS.Summ AS PVND,
                    0.00 AS SummC,
                    '' AS Curr
                FROM
                    OPSd INNER JOIN OPS ON OPSd.id = OPS.DocId
                    INNER JOIN AcPVN ON OPS.AC15 = AcPVN.id
                WHERE
                    (OPSd.Dete BETWEEN :psd AND :ped) AND
                    AcPVN.pz3 IS NOT NULL AND 
                    AcPVN.pz3 IN ('13') 

                UNION ALL

                SELECT 
                    OPSd.id AS did, 
                    OPSd.ClId AS ClId,
                    AcPVN.pz1 AS DocTyp2,
                    OPS.AC15 AS RAC5,
                    -OPS.Summ AS SummD,
                    0.00 AS PVND,
                    -OPS.SummC AS SummC,
                    OPS.Cur AS Curr
                FROM
                    OPSd INNER JOIN OPS ON OPSd.id = OPS.DocId
                    LEFT JOIN AcPVN ON OPS.AC15 = AcPVN.id
                WHERE
                    (OPSd.Dete BETWEEN :psd AND :ped) AND
                    AcPVN.pz3 IS NOT NULL AND 
                    AcPVN.pz3 IN ('12') 

                UNION ALL
            
                -- ATGRIEZT√Ñ‚Ç¨ PRECE 
                SELECT 
                    OPSd.id AS did, 
                    OPSd.ClId AS ClId,
                    AcPVN.pz1 AS DocTyp2,
                    OPS.AC25 AS RAC5,
                    0.00 AS SummD,
                    OPS.Summ AS PVND,
                    0.00 AS SummC,
                    '' AS Curr
                FROM
                    OPSd INNER JOIN OPS ON OPSd.id = OPS.DocId
                    INNER JOIN AcPVN ON OPS.AC25 = AcPVN.id
                WHERE
                    (OPSd.Dete BETWEEN :psd AND :ped) AND
                    AcPVN.pz3 IS NOT NULL AND 
                    AcPVN.pz3 IN ('13') 

                UNION ALL

                SELECT 
                    OPSd.id AS did, 
                    OPSd.ClId AS ClId,
                    AcPVN.pz1 AS DocTyp2,
                    OPS.AC25 AS RAC5,
                    OPS.Summ AS SummD,
                    0.00 AS PVND,
                    OPS.Summ AS SummC,
                    OPS.Cur AS Curr
                FROM
                    OPSd INNER JOIN OPS ON OPSd.id = OPS.DocId
                    LEFT JOIN AcPVN ON OPS.AC25 = AcPVN.id
                WHERE
                    (OPSd.Dete BETWEEN :psd AND :ped) AND
                    AcPVN.pz3 IS NOT NULL AND 
                    AcPVN.pz3 IN ('12') 


            ) AS T1
            GROUP BY T1.did
        ) AS T2
    ) AS T3
        
    WHERE 
        T3.Summ <> 0.00 AND
        T3.DocTyp2 IS NOT NULL

    into
        :did, :clid, :doctyp1, :doctyp2, :doctypc,
        :rac5, :summ, :pvn, :summc, :cur
    do
    begin
        suspend;
    end



end^


ALTER PROCEDURE SP_REP_PVN_52 (
    PSD DATE,
    PED DATE,
    RG1 MONEY,
    RG2 MONEY)
RETURNS (
    ID TYPE OF COLUMN ROPS1A.ID,
    SPID TYPE OF COLUMN ROPS1A.SPID,
    DID TYPE OF COLUMN ROPS1A.DID,
    DETE TYPE OF COLUMN ROPS1A.DETE,
    NRX TYPE OF COLUMN ROPS1A.NRX,
    DOCTYP TYPE OF COLUMN ROPS1A.DOCTYP,
    DOCTYP1 TYPE OF COLUMN ROPS1A.DOCTYP1,
    DOCTYP2 TYPE OF COLUMN ROPS1A.DOCTYP2,
    DOCST TYPE OF COLUMN ROPS1A.DOCST,
    DOCNR TYPE OF COLUMN ROPS1A.DOCNR,
    CLID TYPE OF COLUMN ROPS1A.CLID,
    CLID2 TYPE OF COLUMN ROPS1A.CLID2,
    NAME TYPE OF COLUMN ROPS1A.NAME,
    NAME2 TYPE OF COLUMN ROPS1A.NAME2,
    REGNR TYPE OF COLUMN ROPS1A.REGNR,
    REGNR2 TYPE OF COLUMN ROPS1A.REGNR2,
    B0 TYPE OF COLUMN ROPS1A.B0,
    DESCR TYPE OF COLUMN ROPS1A.DESCR,
    DESCR2 TYPE OF COLUMN ROPS1A.DESCR2,
    AC1 TYPE OF COLUMN ROPS1A.AC1,
    AC2 TYPE OF COLUMN ROPS1A.AC2,
    SAC1 TYPE OF COLUMN ROPS1A.SAC1,
    SAC2 TYPE OF COLUMN ROPS1A.SAC2,
    SUMMC TYPE OF COLUMN ROPS1A.SUMMC,
    CUR TYPE OF COLUMN ROPS1A.CUR,
    SUMM TYPE OF COLUMN ROPS1A.SUMM,
    PVN TYPE OF COLUMN ROPS1A.PVN,
    RAC TYPE OF COLUMN ROPS1A.RAC,
    SDB TYPE OF COLUMN ROPS1A.SDB,
    SCR TYPE OF COLUMN ROPS1A.SCR,
    RAC2 TYPE OF COLUMN ROPS1A.RAC2,
    RAC3 TYPE OF COLUMN ROPS1A.RAC3,
    RAC4 TYPE OF COLUMN ROPS1A.RAC4,
    RAC5 TYPE OF COLUMN ROPS1A.RAC5,
    QV TYPE OF COLUMN ROPS1A.QV,
    ZNR TYPE OF COLUMN ROPS1A.ZNR)
AS
begin
-- PVN piel 1.2 - no ES sa√Ö‚Ä†emt√Ñ¬Ås preces, pakalpojumi
    
    DELETE FROM ttemp_pvn1 WHERE Did IS NOT NULL;

    INSERT INTO ttemp_pvn1(
        did, clid, doctyp1, doctyp2, doctypc,
        rac5, summ, pvn, summc, cur)
    SELECT
        did, clid, doctyp1, doctyp2, doctypc,
        rac5, summ, pvn, summc, cur
    FROM SP_REP_PVN_51(:PSD, :PED, :RG1, :RG2);

    FOR SELECT
        gen_id(GEN_ROPS1A_ID, 1) as ID,
        current_connection as SPID,
        T4.did,
        CASE
            WHEN OPSd.DT2 IS NULL
            THEN OPSd.Dete
            ELSE OPSd.DT2
            END AS Dete,
        null AS nrx,
        null AS DocTyp,
        DocTyp.pvnpaz AS DocTyp1,
        T4.DocTyp2 AS DocTyp2,
        OPSd.DocSt,
        OPSd.DocNr,
        OPSd.clid AS clid,
        null AS clid2,
        Persons.Name AS Name,
        null AS Name2,
        Persons.PVNRegNr AS RegNr,
        null AS RegNr2,
        0.0 AS b0,
        null AS descr,
        null AS descr2,
        null AS AC1,
        null AS AC2,
        null AS SAC1,
        null AS SAC2,
        T4.SummC AS SummC,
        T4.Curr AS Cur,
        T4.Summ AS Summ,
        T4.PVN AS PVN,
        null AS RAC,
        0.0 AS SDb,
        0.0 AS SCr,
        null AS RAC2,
        null AS RAC3,
        null AS RAC4,
        null AS RAC5,
        0.0 AS QV,
        OPSd.znr AS ZNR

    FROM
    (
        SELECT
            T2.did AS did,
            T2.ClId AS ClId,
            T2.DocTyp2 AS DocTyp2,
            T2.Summ AS Summ,
            T2.PVN AS PVN,
            T2.SummC AS SummC,
            T2.Cur AS Curr

        FROM ttemp_pvn1 AS T2

    ) AS T4 

        LEFT JOIN OPSd ON T4.did = OPSd.id
        LEFT JOIN DocTyp ON OPSd.DocTyp = DocTyp.id
        LEFT JOIN Persons ON T4.ClId = Persons.ClId

    ORDER BY OPSd.Dete


    into
        :id, :spid, :did, :DETE, :nrx,
        :doctyp, :doctyp1, :doctyp2, :docst, :docnr,
        :clid, :clid2, :name, :name2, :regnr, :regnr2,
        :b0, :descr, :descr2, :ac1, :ac2, :sac1,:sac2,
        :summc, :cur, :summ, :pvn, :rac, :sdb, :scr,
        :rac2, :rac3, :rac4, :rac5, :qv, :znr
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_REP_PVN_CHECK_01 (
    PSD DATE,
    PED DATE,
    RG1 MONEY,
    LIKME MONEY)
RETURNS (
    ID TYPE OF COLUMN ROPS1A.ID,
    SPID TYPE OF COLUMN ROPS1A.SPID,
    DID TYPE OF COLUMN ROPS1A.DID,
    DETE TYPE OF COLUMN ROPS1A.DETE,
    NRX TYPE OF COLUMN ROPS1A.NRX,
    DOCTYP TYPE OF COLUMN ROPS1A.DOCTYP,
    DOCTYP1 TYPE OF COLUMN ROPS1A.DOCTYP1,
    DOCTYP2 TYPE OF COLUMN ROPS1A.DOCTYP2,
    DOCST TYPE OF COLUMN ROPS1A.DOCST,
    DOCNR TYPE OF COLUMN ROPS1A.DOCNR,
    CLID TYPE OF COLUMN ROPS1A.CLID,
    CLID2 TYPE OF COLUMN ROPS1A.CLID2,
    NAME TYPE OF COLUMN ROPS1A.NAME,
    NAME2 TYPE OF COLUMN ROPS1A.NAME2,
    REGNR TYPE OF COLUMN ROPS1A.REGNR,
    REGNR2 TYPE OF COLUMN ROPS1A.REGNR2,
    B0 TYPE OF COLUMN ROPS1A.B0,
    DESCR TYPE OF COLUMN ROPS1A.DESCR,
    DESCR2 TYPE OF COLUMN ROPS1A.DESCR2,
    AC1 TYPE OF COLUMN ROPS1A.AC1,
    AC2 TYPE OF COLUMN ROPS1A.AC2,
    SAC1 TYPE OF COLUMN ROPS1A.SAC1,
    SAC2 TYPE OF COLUMN ROPS1A.SAC2,
    SUMMC TYPE OF COLUMN ROPS1A.SUMMC,
    CUR TYPE OF COLUMN ROPS1A.CUR,
    SUMM TYPE OF COLUMN ROPS1A.SUMM,
    PVN TYPE OF COLUMN ROPS1A.PVN,
    RAC TYPE OF COLUMN ROPS1A.RAC,
    SDB TYPE OF COLUMN ROPS1A.SDB,
    SCR TYPE OF COLUMN ROPS1A.SCR,
    RAC2 TYPE OF COLUMN ROPS1A.RAC2,
    RAC3 TYPE OF COLUMN ROPS1A.RAC3,
    RAC4 TYPE OF COLUMN ROPS1A.RAC4,
    RAC5 TYPE OF COLUMN ROPS1A.RAC5,
    QV TYPE OF COLUMN ROPS1A.QV,
    ZNR TYPE OF COLUMN ROPS1A.ZNR)
AS
begin
-- PVN summu kontrole izdevumiem
    
    FOR SELECT
        gen_id(GEN_ROPS1A_ID, 1) as ID,
        current_connection as SPID,
        T4.did,
        OPSd.Dete AS Dete,
        null AS nrx,
        null AS DocTyp,
        DocTyp.pvnpaz AS DocTyp1,
        T4.DocTyp2 AS DocTyp2,
        OPSd.DocSt,
        OPSd.DocNr,
        OPSd.clid AS clid,
        null AS clid2,
        Persons.Name AS Name,
        null AS Name2,
        Persons.PVNRegNr AS RegNr,
        null AS RegNr2,
        0.0 AS b0,
        null AS descr,
        null AS descr2,
        null AS AC1,
        null AS AC2,
        null AS SAC1,
        null AS SAC2,
        0.0 AS SummC,
        'EUR' AS Cur,
        T4.Summ AS Summ,
        T4.PVN AS PVN,
        null AS RAC,
        0.0 AS SDb,
        0.0 AS SCr,
        null AS RAC2,
        null AS RAC3,
        null AS RAC4,
        null AS RAC5,
        0.0 AS QV,
        OPSd.znr AS ZNR

    FROM
    (
        SELECT
            did, clid, doctyp1, doctyp2, doctypc,
            rac5, summ, pvn, summc, cur
        FROM SP_REP_PVN_21(:PSD, :PED, 0.0, 0.0)
        WHERE ABS(ABS(summ * :LIKME) - ABS(pvn)) >= :RG1

    ) AS T4 

        LEFT JOIN OPSd ON T4.did = OPSd.id
        LEFT JOIN DocTyp ON OPSd.DocTyp = DocTyp.id
        LEFT JOIN Persons ON T4.ClId = Persons.ClId

    ORDER BY OPSd.Dete


    into
        :id, :spid, :did, :DETE, :nrx,
        :doctyp, :doctyp1, :doctyp2, :docst, :docnr,
        :clid, :clid2, :name, :name2, :regnr, :regnr2,
        :b0, :descr, :descr2, :ac1, :ac2, :sac1,:sac2,
        :summc, :cur, :summ, :pvn, :rac, :sdb, :scr,
        :rac2, :rac3, :rac4, :rac5, :qv, :znr
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_REP_PVN_CHECK_02 (
    PSD DATE,
    PED DATE,
    RG1 MONEY,
    LIKME MONEY)
RETURNS (
    ID TYPE OF COLUMN ROPS1A.ID,
    SPID TYPE OF COLUMN ROPS1A.SPID,
    DID TYPE OF COLUMN ROPS1A.DID,
    DETE TYPE OF COLUMN ROPS1A.DETE,
    NRX TYPE OF COLUMN ROPS1A.NRX,
    DOCTYP TYPE OF COLUMN ROPS1A.DOCTYP,
    DOCTYP1 TYPE OF COLUMN ROPS1A.DOCTYP1,
    DOCTYP2 TYPE OF COLUMN ROPS1A.DOCTYP2,
    DOCST TYPE OF COLUMN ROPS1A.DOCST,
    DOCNR TYPE OF COLUMN ROPS1A.DOCNR,
    CLID TYPE OF COLUMN ROPS1A.CLID,
    CLID2 TYPE OF COLUMN ROPS1A.CLID2,
    NAME TYPE OF COLUMN ROPS1A.NAME,
    NAME2 TYPE OF COLUMN ROPS1A.NAME2,
    REGNR TYPE OF COLUMN ROPS1A.REGNR,
    REGNR2 TYPE OF COLUMN ROPS1A.REGNR2,
    B0 TYPE OF COLUMN ROPS1A.B0,
    DESCR TYPE OF COLUMN ROPS1A.DESCR,
    DESCR2 TYPE OF COLUMN ROPS1A.DESCR2,
    AC1 TYPE OF COLUMN ROPS1A.AC1,
    AC2 TYPE OF COLUMN ROPS1A.AC2,
    SAC1 TYPE OF COLUMN ROPS1A.SAC1,
    SAC2 TYPE OF COLUMN ROPS1A.SAC2,
    SUMMC TYPE OF COLUMN ROPS1A.SUMMC,
    CUR TYPE OF COLUMN ROPS1A.CUR,
    SUMM TYPE OF COLUMN ROPS1A.SUMM,
    PVN TYPE OF COLUMN ROPS1A.PVN,
    RAC TYPE OF COLUMN ROPS1A.RAC,
    SDB TYPE OF COLUMN ROPS1A.SDB,
    SCR TYPE OF COLUMN ROPS1A.SCR,
    RAC2 TYPE OF COLUMN ROPS1A.RAC2,
    RAC3 TYPE OF COLUMN ROPS1A.RAC3,
    RAC4 TYPE OF COLUMN ROPS1A.RAC4,
    RAC5 TYPE OF COLUMN ROPS1A.RAC5,
    QV TYPE OF COLUMN ROPS1A.QV,
    ZNR TYPE OF COLUMN ROPS1A.ZNR)
AS
begin
-- PVN summu kontrole ienemumiem
    
    FOR SELECT
        gen_id(GEN_ROPS1A_ID, 1) as ID,
        current_connection as SPID,
        T4.did,
        OPSd.Dete AS Dete,
        null AS nrx,
        null AS DocTyp,
        DocTyp.pvnpaz AS DocTyp1,
        T4.DocTyp2 AS DocTyp2,
        OPSd.DocSt,
        OPSd.DocNr,
        OPSd.clid AS clid,
        null AS clid2,
        Persons.Name AS Name,
        null AS Name2,
        Persons.PVNRegNr AS RegNr,
        null AS RegNr2,
        0.0 AS b0,
        null AS descr,
        null AS descr2,
        null AS AC1,
        null AS AC2,
        null AS SAC1,
        null AS SAC2,
        0.0 AS SummC,
        'EUR' AS Cur,
        T4.Summ AS Summ,
        T4.PVN AS PVN,
        null AS RAC,
        0.0 AS SDb,
        0.0 AS SCr,
        null AS RAC2,
        null AS RAC3,
        null AS RAC4,
        null AS RAC5,
        0.0 AS QV,
        OPSd.znr AS ZNR

    FROM
    (
        SELECT
            did, clid, doctyp1, doctyp2, doctypc,
            rac5, summ, pvn, summc, cur
        FROM SP_REP_PVN_31(:PSD, :PED, 0.0, 0.0)
        WHERE ABS(ABS(summ * :LIKME) - ABS(pvn)) >= :RG1

    ) AS T4 

        LEFT JOIN OPSd ON T4.did = OPSd.id
        LEFT JOIN DocTyp ON OPSd.DocTyp = DocTyp.id
        LEFT JOIN Persons ON T4.ClId = Persons.ClId

    ORDER BY OPSd.Dete


    into
        :id, :spid, :did, :DETE, :nrx,
        :doctyp, :doctyp1, :doctyp2, :docst, :docnr,
        :clid, :clid2, :name, :name2, :regnr, :regnr2,
        :b0, :descr, :descr2, :ac1, :ac2, :sac1,:sac2,
        :summc, :cur, :summ, :pvn, :rac, :sdb, :scr,
        :rac2, :rac3, :rac4, :rac5, :qv, :znr
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_REP_PVNZ_01 (
    SDT DATE,
    EDT DATE)
RETURNS (
    ID TYPE OF COLUMN TREPPVNZ1.ID,
    SPID TYPE OF COLUMN TREPPVNZ1.SPID,
    DID TYPE OF COLUMN TREPPVNZ1.DID,
    RID TYPE OF COLUMN TREPPVNZ1.RID,
    DETE TYPE OF COLUMN TREPPVNZ1.DETE,
    NRX TYPE OF COLUMN TREPPVNZ1.NRX,
    DOCTYP TYPE OF COLUMN TREPPVNZ1.DOCTYP,
    DOCST TYPE OF COLUMN TREPPVNZ1.DOCST,
    DOCNR TYPE OF COLUMN TREPPVNZ1.DOCNR,
    DOCSTR TYPE OF COLUMN TREPPVNZ1.DOCSTR,
    CLID TYPE OF COLUMN TREPPVNZ1.CLID,
    NAME TYPE OF COLUMN TREPPVNZ1.NAME,
    REGNR TYPE OF COLUMN TREPPVNZ1.REGNR,
    DESCR TYPE OF COLUMN TREPPVNZ1.DESCR,
    AA TYPE OF COLUMN TREPPVNZ1.AA,
    A8 TYPE OF COLUMN TREPPVNZ1.A8,
    A9 TYPE OF COLUMN TREPPVNZ1.A9,
    A10 TYPE OF COLUMN TREPPVNZ1.A10,
    A11 TYPE OF COLUMN TREPPVNZ1.A11,
    A12 TYPE OF COLUMN TREPPVNZ1.A12,
    A13 TYPE OF COLUMN TREPPVNZ1.A13,
    A14 TYPE OF COLUMN TREPPVNZ1.A14,
    A15 TYPE OF COLUMN TREPPVNZ1.A15,
    A16 TYPE OF COLUMN TREPPVNZ1.A16,
    A17 TYPE OF COLUMN TREPPVNZ1.A17,
    A18 TYPE OF COLUMN TREPPVNZ1.A18,
    A19 TYPE OF COLUMN TREPPVNZ1.A19,
    A20 TYPE OF COLUMN TREPPVNZ1.A20,
    A21 TYPE OF COLUMN TREPPVNZ1.A21,
    A22 TYPE OF COLUMN TREPPVNZ1.A22,
    A23 TYPE OF COLUMN TREPPVNZ1.A23,
    A24 TYPE OF COLUMN TREPPVNZ1.A24,
    A25 TYPE OF COLUMN TREPPVNZ1.A25,
    A26 TYPE OF COLUMN TREPPVNZ1.A26,
    A27 TYPE OF COLUMN TREPPVNZ1.A27,
    A28 TYPE OF COLUMN TREPPVNZ1.A28,
    A29 TYPE OF COLUMN TREPPVNZ1.A29,
    A30 TYPE OF COLUMN TREPPVNZ1.A30,
    A31 TYPE OF COLUMN TREPPVNZ1.A31)
AS
declare variable a23a type of column TREPPVNZ1.A23;
    declare variable xrid integer;
    declare variable xdt2 date;

begin
  xrid = 1;

  for select
        gen_id(GEN_TREPDARZ1_ID, 1) AS id,
        current_connection AS spid,
        TD1.ID AS did,
        0 AS rid,
        MAX(TD1.Dete) AS Dete,
        MAX(TD1.ZNR) AS NrX,
        MAX(DocTyp.id1) AS DocTyp,
        MAX(TD1.DocSt) AS DocSt,
        MAX(TD1.DocNr) AS DocNr,
        NULL AS docstr,
        MAX(TD1.clid) AS clid,
        MAX(Persons.name) AS Name,
        MAX(Persons.pvnregnr) AS RegNr,
        MAX(TD1.descr) AS Descr,
        0 AS aa,

        SUM(
            CASE WHEN TP11.PZ2 = 8 THEN -TO1.Summ ELSE 0.00 END +
            CASE WHEN TP12.PZ2 = 8 THEN TO1.Summ ELSE 0.00 END
            ) AS A8,
        SUM(
            CASE WHEN TP11.PZ2 = 9 THEN -TO1.Summ ELSE 0.00 END +
            CASE WHEN TP12.PZ2 = 9 THEN TO1.Summ ELSE 0.00 END
            ) AS A9,
        SUM(
            CASE WHEN (TP11.PZ2 >= 100) AND (TP11.PZ2 < 110) THEN -TO1.Summ ELSE 0.00 END +
            CASE WHEN (TP12.PZ2 >= 100) AND (TP12.PZ2 < 110) THEN TO1.Summ ELSE 0.00 END
            ) AS A10,

        MAX(
            CASE WHEN (TP11.PZ2 >= 100) AND (TP11.PZ2 < 110)
            THEN TP11.PZ1
            ELSE
                CASE WHEN (TP12.PZ2 >= 100) AND (TP12.PZ2 < 110) THEN TP12.PZ1 ELSE NULL END
            END
            ) AS A11,

        SUM(
            CASE WHEN TP11.PZ2 = 12 THEN -TO1.Summ ELSE 0.00 END +
            CASE WHEN TP12.PZ2 = 12 THEN TO1.Summ ELSE 0.00 END
            ) AS A12,

        SUM(
            CASE WHEN TP11.PZ2 = 13 THEN -TO1.Summ ELSE 0.00 END +
            CASE WHEN TP12.PZ2 = 13 THEN TO1.Summ ELSE 0.00 END
            ) AS A13,

        SUM(
            CASE WHEN TP11.PZ2 = 14 THEN -TO1.Summ ELSE 0.00 END +
            CASE WHEN TP12.PZ2 = 14 THEN TO1.Summ ELSE 0.00 END
            ) AS A14,

        SUM(
            CASE WHEN TP11.PZ2 = 15 THEN -TO1.Summ ELSE 0.00 END +
            CASE WHEN TP12.PZ2 = 15 THEN TO1.Summ ELSE 0.00 END
            ) AS A15,
        SUM(
            CASE WHEN TP11.PZ2 = 16 THEN -TO1.Summ ELSE 0.00 END +
            CASE WHEN TP12.PZ2 = 16 THEN TO1.Summ ELSE 0.00 END +

            CASE WHEN TP11.PZ2 = 201 THEN TO1.Summ ELSE 0.00 END +
            CASE WHEN TP12.PZ2 = 201 THEN -TO1.Summ ELSE 0.00 END
            ) AS A16,
        SUM(
            CASE WHEN TP11.PZ2 = 17 THEN -TO1.Summ ELSE 0.00 END +
            CASE WHEN TP12.PZ2 = 17 THEN TO1.Summ ELSE 0.00 END
            ) AS A17,
        SUM(
            CASE WHEN TP11.PZ2 = 18 THEN -TO1.Summ ELSE 0.00 END +
            CASE WHEN TP12.PZ2 = 18 THEN TO1.Summ ELSE 0.00 END
            ) AS A18,
        SUM(
            CASE WHEN TP11.PZ2 = 19 THEN -TO1.Summ ELSE 0.00 END +
            CASE WHEN TP12.PZ2 = 19 THEN TO1.Summ ELSE 0.00 END
            ) AS A19,
        SUM(
            CASE WHEN TP11.PZ2 = 20 THEN -TO1.Summ ELSE 0.00 END +
            CASE WHEN TP12.PZ2 = 20 THEN TO1.Summ ELSE 0.00 END
            ) AS A20,
    
        0 AS a21,

        SUM(
            CASE WHEN TP11.PZ2 = 22 THEN TO1.Summ ELSE 0.00 END +
            CASE WHEN TP12.PZ2 = 22 THEN -TO1.Summ ELSE 0.00 END
            ) AS A22,
        SUM(
            CASE WHEN TP11.PZ2 = 23 THEN TO1.Summ ELSE 0.00 END +
            CASE WHEN TP12.PZ2 = 23 THEN -TO1.Summ ELSE 0.00 END
            ) AS A23,


        SUM(
            CASE WHEN TO1.AC15 IS NULL AND TO1.AC25 IS NULL THEN TO1.Summ ELSE 0.00 END
            ) AS A23a,

        SUM(
            CASE WHEN TP11.PZ2 = 24 THEN TO1.Summ ELSE 0.00 END +
            CASE WHEN TP12.PZ2 = 24 THEN -TO1.Summ ELSE 0.00 END
            ) AS A24,
        SUM(
            CASE WHEN TP11.PZ2 = 25 THEN TO1.Summ ELSE 0.00 END +
            CASE WHEN TP12.PZ2 = 25 THEN -TO1.Summ ELSE 0.00 END
            ) AS A25,
        SUM(
            CASE WHEN TP11.PZ2 = 26 THEN TO1.Summ ELSE 0.00 END +
            CASE WHEN TP12.PZ2 = 26 THEN -TO1.Summ ELSE 0.00 END
            ) AS A26,
        SUM(
            CASE WHEN TP11.PZ2 = 27 THEN TO1.Summ ELSE 0.00 END +
            CASE WHEN TP12.PZ2 = 27 THEN -TO1.Summ ELSE 0.00 END +

            CASE WHEN TP11.PZ2 = 201 THEN TO1.Summ ELSE 0.00 END +
            CASE WHEN TP12.PZ2 = 201 THEN -TO1.Summ ELSE 0.00 END

            ) AS A27,
        SUM(
            CASE WHEN TP11.PZ2 = 28 THEN TO1.Summ ELSE 0.00 END +
            CASE WHEN TP12.PZ2 = 28 THEN -TO1.Summ ELSE 0.00 END
            ) AS A28,
        SUM(
            CASE WHEN TP11.PZ2 = 29 THEN TO1.Summ ELSE 0.00 END +
            CASE WHEN TP12.PZ2 = 29 THEN -TO1.Summ ELSE 0.00 END
            ) AS A29,
        SUM(
            CASE WHEN TP11.PZ2 = 30 THEN TO1.Summ ELSE 0.00 END +
            CASE WHEN TP12.PZ2 = 30 THEN -TO1.Summ ELSE 0.00 END
            ) AS A30,

        0 AS a31,

        MAX(TD1.DT2) AS DT2

    FROM
        OPSd AS TD1
        JOIN OPS AS TO1 ON TD1.id = TO1.DocId
        LEFT JOIN persons ON TD1.clid = Persons.clid
        LEFT JOIN doctyp ON TD1.doctyp = doctyp.id
        LEFT JOIN ACPvN AS TP11 ON TO1.AC15 = TP11.ID
        LEFT JOIN ACPvN AS TP12 ON TO1.AC25 = TP12.ID
    WHERE
        TD1.Dete BETWEEN :sdt AND :edt AND
        EXISTS
        (
            SELECT TO2.ID
            FROM
                OPS AS TO2
                LEFT JOIN ACPvN AS TP21 ON TO2.AC15 = TP21.ID
                LEFT JOIN ACPvN AS TP22 ON TO2.AC25 = TP22.ID
            WHERE
                (TO2.docid = TD1.ID) AND
                (
                    (TP21.ID IS NOT NULL) AND (TP21.PZ2 <> 0) OR
                    (TP22.ID IS NOT NULL) AND (TP22.PZ2 <> 0)
                )
        )

    GROUP BY DID
    ORDER BY Dete, did

    into :id,
        :spid,
        :did,
        :rid,
        :dete,
        :nrx,
        :doctyp,
        :docst,
        :docnr,
        :docstr,
        :clid,
        :name,
        :regnr,
        :descr,
        :aa,
        :a8,
        :a9,
        :a10,
        :a11,
        :a12,
        :a13,
        :a14,
        :a15,
        :a16,
        :a17,
        :a18,
        :a19,
        :a20,
        :a21,
        :a22,
        :a23,
        :a23a,
        :a24,
        :a25,
        :a26,
        :a27,
        :a28,
        :a29,
        :a30,
        :a31,
        :xdt2
  do
  begin
    rid = xrid;
    xrid = xrid + 1;

    docstr = DocTyp;

    if (docst is not null)
    then
        if (docstr is null)
        then docstr = docst;
        else docstr = docstr || ' ' || docst;

    if (docnr is not null)
    then
        if (docstr is null)
        then docstr = docnr;
        else docstr = docstr || ' ' ||  docnr;

    if (xdt2 is not null)
    then
        if (docstr is null)
        then docstr = xdt2;
        else docstr = docstr || ', ' ||  xdt2;


    if (a27 > 0.0) then
    begin
        a23 = a23 + a23a;
    end
    else
    begin
        a23 = a23 - a23a;
    end

    a21 = a8 + a9 + a10 + a12 + a13 + a14 +
            a15 + a16 + a17 + a18 + a19 + a20;

    a31 = a22 + a23 + a24 + a25 + a26 + a27 +
            a28 + a29 + a30;

    suspend;
  end
end^


ALTER PROCEDURE SP_REP_SKAIDRA_01 (
    SDT DATE,
    EDT DATE,
    PSUMM NUMERIC(14,5),
    PPERTYP VARCHAR(5))
RETURNS (
    ID TYPE OF COLUMN ROPS1A.ID,
    SPID TYPE OF COLUMN ROPS1A.SPID,
    DID TYPE OF COLUMN ROPS1A.DID,
    DETE TYPE OF COLUMN ROPS1A.DETE,
    NRX TYPE OF COLUMN ROPS1A.NRX,
    DOCTYP TYPE OF COLUMN ROPS1A.DOCTYP,
    DOCTYP1 TYPE OF COLUMN ROPS1A.DOCTYP1,
    DOCTYP2 TYPE OF COLUMN ROPS1A.DOCTYP2,
    DOCST TYPE OF COLUMN ROPS1A.DOCST,
    DOCNR TYPE OF COLUMN ROPS1A.DOCNR,
    CLID TYPE OF COLUMN ROPS1A.CLID,
    CLID2 TYPE OF COLUMN ROPS1A.CLID2,
    NAME TYPE OF COLUMN ROPS1A.NAME,
    NAME2 TYPE OF COLUMN ROPS1A.NAME2,
    REGNR TYPE OF COLUMN ROPS1A.REGNR,
    REGNR2 TYPE OF COLUMN ROPS1A.REGNR2,
    B0 TYPE OF COLUMN ROPS1A.B0,
    DESCR TYPE OF COLUMN ROPS1A.DESCR,
    DESCR2 TYPE OF COLUMN ROPS1A.DESCR2,
    AC1 TYPE OF COLUMN ROPS1A.AC1,
    AC2 TYPE OF COLUMN ROPS1A.AC2,
    SAC1 TYPE OF COLUMN ROPS1A.SAC1,
    SAC2 TYPE OF COLUMN ROPS1A.SAC2,
    SUMMC TYPE OF COLUMN ROPS1A.SUMMC,
    CUR TYPE OF COLUMN ROPS1A.CUR,
    SUMM TYPE OF COLUMN ROPS1A.SUMM,
    PVN TYPE OF COLUMN ROPS1A.PVN,
    RAC TYPE OF COLUMN ROPS1A.RAC,
    SDB TYPE OF COLUMN ROPS1A.SDB,
    SCR TYPE OF COLUMN ROPS1A.SCR,
    RAC2 TYPE OF COLUMN ROPS1A.RAC2,
    RAC3 TYPE OF COLUMN ROPS1A.RAC3,
    RAC4 TYPE OF COLUMN ROPS1A.RAC4,
    RAC5 TYPE OF COLUMN ROPS1A.RAC5,
    QV TYPE OF COLUMN ROPS1A.QV,
    ZNR TYPE OF COLUMN ROPS1A.ZNR)
AS
begin
    FOR SELECT
        gen_id(GEN_ROPS1A_ID, 1) as ID,
        current_connection as SPID,
        0 as did,
        null AS Dete,
        null AS nrx,
        null AS DocTyp,
        null AS DocTyp1,
        null AS DocTyp2,
        null AS DocSt,
        null AS DocNr,
        T2.clid AS clid,
        null AS clid2,
        Persons.Name AS Name,
        null AS Name2,
        Persons.RegNr AS RegNr,
        null AS RegNr2,
        0.0 AS b0,
        null AS descr,
        null AS descr2,
        null AS AC1,
        null AS AC2,
        null AS SAC1,
        null AS SAC2,
        0.0 AS SummC,
        'EUR' AS Cur,
        0.0 AS Summ,
        0.0 AS PVN,
        null AS RAC,
        T2.ADb AS SDb,
        T2.ACr AS SCr,
        null AS RAC2,
        null AS RAC3,
        null AS RAC4,
        null AS RAC5,
        0.0 AS QV,
        0.0 AS ZNR

    FROM
    (
        SELECT ClId, SUM(SDb) AS ADb, SUM(SCr) AS ACr
        FROM
        (
            SELECT 
                OPSd.ClId AS ClId,
                OPS.Summ AS SDb,
                0.00 AS SCr

            FROM 
                OPSd INNER JOIN OPS ON OPSd.id = OPS.DocId
                INNER JOIN Persons ON OPSd.ClId = Persons.ClId
                INNER JOIN AcP21 ON OPS.AC11 = AcP21.AC
            WHERE 
                OPSd.Dete BETWEEN :sdt AND :edt AND
                Persons.TP2 = :ppertyp AND
                AcP21.id1 IN ('KA','CN')

            UNION ALL

            SELECT 
                OPSd.ClId AS ClId,
                0.00 AS SDb,
                OPS.Summ AS SCr

            FROM 
                OPSd INNER JOIN OPS ON OPSd.id = OPS.DocId
                INNER JOIN Persons ON OPSd.ClId = Persons.ClId
                INNER JOIN AcP21 ON OPS.AC21 = AcP21.AC
            WHERE 
                OPSd.Dete BETWEEN :sdt AND :edt AND
                Persons.TP2 = :ppertyp AND
                AcP21.id1 IN ('KA','CN')

        ) AS T1
        GROUP BY ClId

    ) AS T2    
    LEFT JOIN Persons ON T2.ClId = Persons.ClId

    WHERE 
        (ABS(T2.ADb) + ABS(T2.ACr)) >= :psumm
    ORDER BY ClId

    into
        :id, :spid, :did, :DETE, :nrx,
        :doctyp, :doctyp1, :doctyp2, :docst, :docnr,
        :clid, :clid2, :name, :name2, :regnr, :regnr2,
        :b0, :descr, :descr2, :ac1, :ac2, :sac1,:sac2,
        :summc, :cur, :summ, :pvn, :rac, :sdb, :scr,
        :rac2, :rac3, :rac4, :rac5, :qv, :znr
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_REP_SKAIDRA_02 (
    SDT DATE,
    EDT DATE,
    PSUMM NUMERIC(14,5),
    PPERTYP VARCHAR(5))
RETURNS (
    ID TYPE OF COLUMN ROPS1A.ID,
    SPID TYPE OF COLUMN ROPS1A.SPID,
    DID TYPE OF COLUMN ROPS1A.DID,
    DETE TYPE OF COLUMN ROPS1A.DETE,
    NRX TYPE OF COLUMN ROPS1A.NRX,
    DOCTYP TYPE OF COLUMN ROPS1A.DOCTYP,
    DOCTYP1 TYPE OF COLUMN ROPS1A.DOCTYP1,
    DOCTYP2 TYPE OF COLUMN ROPS1A.DOCTYP2,
    DOCST TYPE OF COLUMN ROPS1A.DOCST,
    DOCNR TYPE OF COLUMN ROPS1A.DOCNR,
    CLID TYPE OF COLUMN ROPS1A.CLID,
    CLID2 TYPE OF COLUMN ROPS1A.CLID2,
    NAME TYPE OF COLUMN ROPS1A.NAME,
    NAME2 TYPE OF COLUMN ROPS1A.NAME2,
    REGNR TYPE OF COLUMN ROPS1A.REGNR,
    REGNR2 TYPE OF COLUMN ROPS1A.REGNR2,
    B0 TYPE OF COLUMN ROPS1A.B0,
    DESCR TYPE OF COLUMN ROPS1A.DESCR,
    DESCR2 TYPE OF COLUMN ROPS1A.DESCR2,
    AC1 TYPE OF COLUMN ROPS1A.AC1,
    AC2 TYPE OF COLUMN ROPS1A.AC2,
    SAC1 TYPE OF COLUMN ROPS1A.SAC1,
    SAC2 TYPE OF COLUMN ROPS1A.SAC2,
    SUMMC TYPE OF COLUMN ROPS1A.SUMMC,
    CUR TYPE OF COLUMN ROPS1A.CUR,
    SUMM TYPE OF COLUMN ROPS1A.SUMM,
    PVN TYPE OF COLUMN ROPS1A.PVN,
    RAC TYPE OF COLUMN ROPS1A.RAC,
    SDB TYPE OF COLUMN ROPS1A.SDB,
    SCR TYPE OF COLUMN ROPS1A.SCR,
    RAC2 TYPE OF COLUMN ROPS1A.RAC2,
    RAC3 TYPE OF COLUMN ROPS1A.RAC3,
    RAC4 TYPE OF COLUMN ROPS1A.RAC4,
    RAC5 TYPE OF COLUMN ROPS1A.RAC5,
    QV TYPE OF COLUMN ROPS1A.QV,
    ZNR TYPE OF COLUMN ROPS1A.ZNR)
AS
begin
--Skaidras naudas darijumi FP
    FOR SELECT
        gen_id(GEN_ROPS1A_ID, 1) as ID,
        current_connection as SPID,
        0 as did,
        null AS Dete,
        null AS nrx,
        null AS DocTyp,
        null AS DocTyp1,
        null AS DocTyp2,
        null AS DocSt,
        null AS DocNr,
        T2.clid AS clid,
        null AS clid2,
        Persons.Name AS Name,
        null AS Name2,
        Persons.RegNr AS RegNr,
        null AS RegNr2,
        0.0 AS b0,
        null AS descr,
        null AS descr2,
        null AS AC1,
        null AS AC2,
        null AS SAC1,
        null AS SAC2,
        0.0 AS SummC,
        'EUR' AS Cur,
        0.0 AS Summ,
        0.0 AS PVN,
        null AS RAC,
        T2.ADb AS SDb,
        T2.ACr AS SCr,
        null AS RAC2,
        null AS RAC3,
        null AS RAC4,
        null AS RAC5,
        0.0 AS QV,
        0.0 AS ZNR
    FROM
    (
        SELECT ClId, SUM(ADb) AS ADb, SUM(ACr) AS ACr
        FROM
        (
            SELECT did, ClId, SUM(SDb) AS ADb, SUM(SCr) AS ACr
            FROM
            (
                SELECT 
                    OPSd.id AS did,
                    OPSd.ClId AS ClId,
                    OPS.Summ AS SDb,
                    0.00 AS SCr

                FROM 
                    OPSd INNER JOIN OPS ON OPSd.id = OPS.DocId
                    INNER JOIN Persons ON OPSd.ClId = Persons.ClId
                    INNER JOIN AcP21 ON OPS.AC11 = AcP21.AC
                WHERE 
                    OPSd.Dete BETWEEN :sdt AND :edt AND
                    Persons.TP2 = :ppertyp AND
                    AcP21.id1 IN ('KA','CN')

                UNION ALL

                SELECT 
                    OPSd.id AS did,
                    OPSd.ClId AS ClId,
                    0.00 AS SDb,
                    OPS.Summ AS SCr

                FROM 
                    OPSd INNER JOIN OPS ON OPSd.id = OPS.DocId
                    INNER JOIN Persons ON OPSd.ClId = Persons.ClId
                    INNER JOIN AcP21 ON OPS.AC21 = AcP21.AC
                WHERE 
                    OPSd.Dete BETWEEN :sdt AND :edt AND
                    Persons.TP2 = :ppertyp AND
                    AcP21.id1 IN ('KA','CN')

            ) AS T1
            GROUP BY did, ClId
        ) AS T12

        WHERE (ABS(T12.ACr) + ABS(T12.ADb)) >= :psumm
        GROUP BY ClId

    ) AS T2    
    LEFT JOIN Persons ON T2.ClId = Persons.ClId

    ORDER BY ClId
    

    into
        :id, :spid, :did, :DETE, :nrx,
        :doctyp, :doctyp1, :doctyp2, :docst, :docnr,
        :clid, :clid2, :name, :name2, :regnr, :regnr2,
        :b0, :descr, :descr2, :ac1, :ac2, :sac1,:sac2,
        :summc, :cur, :summ, :pvn, :rac, :sdb, :scr,
        :rac2, :rac3, :rac4, :rac5, :qv, :znr
    do
    begin
        suspend;
    end
end^


ALTER PROCEDURE SP_RESET_YEAR_GEN
AS
declare variable I INT;
declare variable s varchar(100);
begin
    i = 0;
    WHILE(i<33) do
    begin
        s = cast(i as varchar(3));
        if (i < 10) then s = '0' || s;
        s = 'ALTER SEQUENCE YEAR' || s ||  ' RESTART WITH 0;';
        if ((i <> 4) and (i <> 5)) then
        EXECUTE STATEMENT s;
        i = i + 1;
    end
end^


ALTER PROCEDURE SP_SET_KIEONR (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PNR INTEGER)
AS
declare variable ID INT;
    declare variable Nr2 INT;
begin
    Nr2 = pnr;
    FOR SELECT
        id
    FROM OPSd
    WHERE
        EXISTS
        (
            SELECT NULL
            FROM OPS
            WHERE 
                OPSd.id = OPS.DocId AND
                OPS.AC11 = :pac
        ) AND
        OPSd.Dete BETWEEN :sdt AND :edt

    ORDER BY Dete, id

    INTO :ID
    DO
    BEGIN

        UPDATE OPSd
        SET NrX = :Nr2
        WHERE OPSd.id = :ID;

        nr2 = nr2 + 1;
    END
end^


ALTER PROCEDURE SP_SET_KIZONR (
    SDT DATE,
    EDT DATE,
    PAC VARCHAR(8),
    PNR INTEGER)
AS
declare variable ID INT;
    declare variable Nr2 INT;
begin
    Nr2 = pnr;
    FOR SELECT
        id
    FROM OPSd
    WHERE
        EXISTS
        (
            SELECT NULL
            FROM OPS
            WHERE 
                OPSd.id = OPS.DocId AND
                OPS.AC21 = :pac
        ) AND
        OPSd.Dete BETWEEN :sdt AND :edt

    ORDER BY Dete, id

    INTO :ID
    DO
    BEGIN

        UPDATE OPSd
        SET NrX = :Nr2
        WHERE OPSd.id = :ID;

        nr2 = nr2 + 1;
    END
end^


ALTER PROCEDURE SP_SET_USERNAME (
    USERNAME VARCHAR(15))
AS
begin
    rdb$set_context('USER_SESSION', 'UserName', :username);
end^


ALTER PROCEDURE SP_VWOPS_FILTER_AND (
    PDATE1 DATE,
    PDATE2 DATE,
    PTEXT VARCHAR(50),
    PCLID VARCHAR(15),
    PAC11 VARCHAR(8),
    PAC12 VARCHAR(8),
    PAC13 VARCHAR(5),
    PAC14 VARCHAR(8),
    PAC15 VARCHAR(5),
    PAC21 VARCHAR(8),
    PAC22 VARCHAR(8),
    PAC23 VARCHAR(5),
    PAC24 VARCHAR(8),
    PAC25 VARCHAR(5),
    PDOCGR VARCHAR(10))
RETURNS (
    ID TYPE OF COLUMN OPS.ID,
    DOCID TYPE OF COLUMN OPS.DOCID,
    DETE TYPE OF COLUMN OPSD.DETE,
    NRX TYPE OF COLUMN OPSD.NRX,
    ZNR TYPE OF COLUMN OPSD.ZNR,
    DOCTYP TYPE OF COLUMN OPSD.DOCTYP,
    DOCST TYPE OF COLUMN OPSD.DOCST,
    DOCNR TYPE OF COLUMN OPSD.DOCNR,
    DOCTYP2 TYPE OF COLUMN DOCTYP.ID1,
    CLID TYPE OF COLUMN OPSD.CLID,
    NAME TYPE OF COLUMN PERSONS.NAME,
    REGNR TYPE OF COLUMN PERSONS.REGNR,
    PVNREGNR TYPE OF COLUMN PERSONS.PVNREGNR,
    CLID2 TYPE OF COLUMN OPSD.CLID2,
    NAME2 TYPE OF COLUMN PERSONS.NAME,
    REGNR2 TYPE OF COLUMN PERSONS.REGNR,
    DESCR TYPE OF COLUMN OPSD.DESCR,
    AC11 TYPE OF COLUMN OPS.AC11,
    AC12 TYPE OF COLUMN OPS.AC12,
    AC13 TYPE OF COLUMN OPS.AC13,
    AC14 TYPE OF COLUMN OPS.AC14,
    AC15 TYPE OF COLUMN OPS.AC15,
    AC21 TYPE OF COLUMN OPS.AC21,
    AC22 TYPE OF COLUMN OPS.AC22,
    AC23 TYPE OF COLUMN OPS.AC23,
    AC24 TYPE OF COLUMN OPS.AC24,
    AC25 TYPE OF COLUMN OPS.AC25,
    SUMMC TYPE OF COLUMN OPS.SUMMC,
    CUR TYPE OF COLUMN OPS.CUR,
    SUMM TYPE OF COLUMN OPS.SUMM,
    QV TYPE OF COLUMN OPS.QV,
    DESCR2 TYPE OF COLUMN OPS.DESCR)
AS
begin

    for select
        ops.id,
        ops.docid,
        opsd.DETE,
        opsd.nrx,
        opsd.znr,
        opsd.doctyp,
        opsd.docst,
        opsd.docnr,
        DOCTYP.id1 as DOCTYP2,
        opsd.clid,
        persons.name,
        persons.regnr,
        persons.pvnregnr,
        opsd.clid2,
        Persons2.name as NAME2,
        Persons2.regnr AS regnr2,
        opsd.descr,

        ops.ac11,
        ops.ac12,
        ops.ac13,
        ops.ac14,
        ops.ac15,
        ops.ac21,
        ops.ac22,
        ops.ac23,
        ops.ac24,
        ops.ac25,
        ops.summc,
        ops.cur,
        ops.summ,
        ops.qv,
        ops.descr AS descr2

    FROM
        OPSd JOIN OPS ON OPSd.id = OPS.DocId
        LEFT JOIN DocTyp ON OPSd.DocTyp = DocTyp.id
        LEFT JOIN Persons ON OPSd.ClId = Persons.ClId
        LEFT JOIN Persons AS Persons2 ON OPSd.ClId2 = Persons2.ClId

    WHERE
        (:pdate1 IS NULL OR opsd.DETE >= :pdate1) AND
        (:pdate2 IS NULL OR opsd.DETE <= :pdate2) AND
        (:pclid IS NULL OR opsd.ClId = :pclid OR ClId2 = :pclid) AND
        (:ptext IS NULL OR OPSd.Descr LIKE :ptext) AND
        (
            :PDOCGR IS NULL OR EXISTS(
                SELECT DTA.ID
                FROM doctypb AS DTB inner join doctypa AS DTA on DTB.ida = DTA.id
                WHERE DTB.ID = OPSD.doctyp AND DTA.ID = :PDOCGR
            )
        )
        AND
        (
            (:pac11 IS NULL OR OPS.AC11 LIKE :pac11) AND
            (:pac12 IS NULL OR OPS.AC12 LIKE :pac12) AND
            (:pac13 IS NULL OR OPS.AC13 LIKE :pac13) AND
            (:pac14 IS NULL OR OPS.AC14 LIKE :pac14) AND
            (:pac15 IS NULL OR OPS.AC15 LIKE :pac15)
        )
        AND
        (
            (:pac21 IS NULL OR OPS.AC21 LIKE :pac21) AND
            (:pac22 IS NULL OR OPS.AC22 LIKE :pac22) AND
            (:pac23 IS NULL OR OPS.AC23 LIKE :pac23) AND
            (:pac24 IS NULL OR OPS.AC24 LIKE :pac24) AND
            (:pac25 IS NULL OR OPS.AC25 LIKE :pac25)
        )
        ORDER BY DETE, opsd.id, ops.id
        into
            :ID, :docid, :DETE, :nrx, :znr,
            :doctyp, :docst, :docnr, :doctyp2,
            :clid, :name, :regnr, :pvnregnr, 
            :clid2, :name2, :regnr2,
            :descr,
            :ac11, :ac12, :ac13, :ac14, :ac15,
            :ac21, :ac22, :ac23, :ac24, :ac25,
            :summc, :cur, :summ, :qv, :descr2
        do
        begin
            suspend;
        end
end^


ALTER PROCEDURE SP_VWOPS_FILTER_OR (
    PDATE1 DATE,
    PDATE2 DATE,
    PTEXT VARCHAR(50),
    PCLID VARCHAR(15),
    PAC11 VARCHAR(8),
    PAC12 VARCHAR(8),
    PAC13 VARCHAR(5),
    PAC14 VARCHAR(8),
    PAC15 VARCHAR(5),
    PAC21 VARCHAR(8),
    PAC22 VARCHAR(8),
    PAC23 VARCHAR(5),
    PAC24 VARCHAR(8),
    PAC25 VARCHAR(5),
    PDOCGR VARCHAR(10))
RETURNS (
    ID TYPE OF COLUMN OPS.ID,
    DOCID TYPE OF COLUMN OPS.DOCID,
    DETE TYPE OF COLUMN OPSD.DETE,
    NRX TYPE OF COLUMN OPSD.NRX,
    ZNR TYPE OF COLUMN OPSD.ZNR,
    DOCTYP TYPE OF COLUMN OPSD.DOCTYP,
    DOCST TYPE OF COLUMN OPSD.DOCST,
    DOCNR TYPE OF COLUMN OPSD.DOCNR,
    DOCTYP2 TYPE OF COLUMN DOCTYP.ID1,
    CLID TYPE OF COLUMN OPSD.CLID,
    NAME TYPE OF COLUMN PERSONS.NAME,
    REGNR TYPE OF COLUMN PERSONS.REGNR,
    PVNREGNR TYPE OF COLUMN PERSONS.PVNREGNR,
    CLID2 TYPE OF COLUMN OPSD.CLID2,
    NAME2 TYPE OF COLUMN PERSONS.NAME,
    REGNR2 TYPE OF COLUMN PERSONS.REGNR,
    DESCR TYPE OF COLUMN OPSD.DESCR,
    AC11 TYPE OF COLUMN OPS.AC11,
    AC12 TYPE OF COLUMN OPS.AC12,
    AC13 TYPE OF COLUMN OPS.AC13,
    AC14 TYPE OF COLUMN OPS.AC14,
    AC15 TYPE OF COLUMN OPS.AC15,
    AC21 TYPE OF COLUMN OPS.AC21,
    AC22 TYPE OF COLUMN OPS.AC22,
    AC23 TYPE OF COLUMN OPS.AC23,
    AC24 TYPE OF COLUMN OPS.AC24,
    AC25 TYPE OF COLUMN OPS.AC25,
    SUMMC TYPE OF COLUMN OPS.SUMMC,
    CUR TYPE OF COLUMN OPS.CUR,
    SUMM TYPE OF COLUMN OPS.SUMM,
    QV TYPE OF COLUMN OPS.QV,
    DESCR2 TYPE OF COLUMN OPS.DESCR)
AS
begin

    for select
        ops.id,
        ops.docid,
        opsd.DETE,
        opsd.nrx,
        opsd.znr,
        opsd.doctyp,
        opsd.docst,
        opsd.docnr,
        DOCTYP.id1 as DOCTYP2,
        opsd.clid,
        persons.name,
        persons.regnr,
        persons.pvnregnr,
        opsd.clid2,
        Persons2.name as NAME2,
        Persons2.regnr AS regnr2,
        opsd.descr,

        ops.ac11,
        ops.ac12,
        ops.ac13,
        ops.ac14,
        ops.ac15,
        ops.ac21,
        ops.ac22,
        ops.ac23,
        ops.ac24,
        ops.ac25,
        ops.summc,
        ops.cur,
        ops.summ,
        ops.qv,
        ops.descr AS descr2

    FROM
        OPSd JOIN OPS ON OPSd.id = OPS.DocId
        LEFT JOIN DocTyp ON OPSd.DocTyp = DocTyp.id
        LEFT JOIN Persons ON OPSd.ClId = Persons.ClId
        LEFT JOIN Persons AS Persons2 ON OPSd.ClId2 = Persons2.ClId

    WHERE
        (:pdate1 IS NULL OR opsd.DETE >= :pdate1) AND
        (:pdate2 IS NULL OR opsd.DETE <= :pdate2) AND
        (:pclid IS NULL OR opsd.ClId = :pclid OR ClId2 = :pclid) AND
        (:ptext IS NULL OR OPSd.Descr LIKE :ptext) AND
        (
            :PDOCGR IS NULL OR EXISTS(
                SELECT DTA.ID
                FROM doctypb AS DTB inner join doctypa AS DTA on DTB.ida = DTA.id
                WHERE DTB.ID = OPSD.doctyp AND DTA.ID = :PDOCGR
            )
        ) AND
        (
            (
                (:pac11 IS NULL OR OPS.AC11 LIKE :pac11) AND
                (:pac12 IS NULL OR OPS.AC12 LIKE :pac12) AND
                (:pac13 IS NULL OR OPS.AC13 LIKE :pac13) AND
                (:pac14 IS NULL OR OPS.AC14 LIKE :pac14) AND
                (:pac15 IS NULL OR OPS.AC15 LIKE :pac15)
            )
            OR
            (
                (:pac21 IS NULL OR OPS.AC21 LIKE :pac21) AND
                (:pac22 IS NULL OR OPS.AC22 LIKE :pac22) AND
                (:pac23 IS NULL OR OPS.AC23 LIKE :pac23) AND
                (:pac24 IS NULL OR OPS.AC24 LIKE :pac24) AND
                (:pac25 IS NULL OR OPS.AC25 LIKE :pac25)
            )
        )
        ORDER BY DETE, opsd.id, ops.id
        into
            :ID, :docid, :DETE, :nrx, :znr,
            :doctyp, :docst, :docnr, :doctyp2,
            :clid, :name, :regnr, :pvnregnr,
            :clid2, :name2, :regnr2,
            :descr,
            :ac11, :ac12, :ac13, :ac14, :ac15,
            :ac21, :ac22, :ac23, :ac24, :ac25,
            :summc, :cur, :summ, :qv, :descr2
        do
        begin
            suspend;
        end
end^



SET TERM ; ^



/******************************************************************************/
/***                              Descriptions                              ***/
/******************************************************************************/

