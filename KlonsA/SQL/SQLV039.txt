SET TERM ^ ;

ALTER PROCEDURE SP_PAY_MATCHLISTS_02A(
  PIDAM INTEGER,
  PPAY /* DOM_MONEY */ NUMERIC(15,2),
  PDATE DATE)
RETURNS (
  IDP INTEGER,
  IDAM INTEGER,
  DT1 DATE,
  DT2 DATE,
  PAY0 /* DOM_MONEY */ NUMERIC(15,2),
  PAY1 /* DOM_MONEY */ NUMERIC(15,2),
  PAY2 /* DOM_MONEY */ NUMERIC(15,2),
  R1 FLOAT,
  R2 FLOAT,
  IIN /* DOM_MONEY */ NUMERIC(15,2),
  PAY_TAXED_1 /* DOM_MONEY */ NUMERIC(15,2),
  PAY_NOSAI_1 /* DOM_MONEY */ NUMERIC(15,2),
  PAY_NOTTAXED_1 /* DOM_MONEY */ NUMERIC(15,2),
  UNTAXED_MINIMUM_1 /* DOM_MONEY */ NUMERIC(15,2),
  IINEX_DEPENDANTS_1 /* DOM_MONEY */ NUMERIC(15,2),
  IINEX2_1 /* DOM_MONEY */ NUMERIC(15,2),
  IINEX2_TP_1 SMALLINT,
  DNSI_1 /* DOM_MONEY */ NUMERIC(15,2),
  PFNT_1 /* DOM_MONEY */ NUMERIC(15,2),
  LINT_1 /* DOM_MONEY */ NUMERIC(15,2),
  HINT_1 /* DOM_MONEY */ NUMERIC(15,2),
  IINEX_EXP_1 /* DOM_MONEY */ NUMERIC(15,2),
  IIN_1 /* DOM_MONEY */ NUMERIC(15,2),
  PAY_TAXED_2 /* DOM_MONEY */ NUMERIC(15,2),
  PAY_NOSAI_2 /* DOM_MONEY */ NUMERIC(15,2),
  PAY_NOTTAXED_2 /* DOM_MONEY */ NUMERIC(15,2),
  UNTAXED_MINIMUM_2 /* DOM_MONEY */ NUMERIC(15,2),
  IINEX_DEPENDANTS_2 /* DOM_MONEY */ NUMERIC(15,2),
  IINEX2_2 /* DOM_MONEY */ NUMERIC(15,2),
  IINEX2_TP_2 SMALLINT,
  DNSI_2 /* DOM_MONEY */ NUMERIC(15,2),
  PFNT_2 /* DOM_MONEY */ NUMERIC(15,2),
  LINT_2 /* DOM_MONEY */ NUMERIC(15,2),
  HINT_2 /* DOM_MONEY */ NUMERIC(15,2),
  IINEX_EXP_2 /* DOM_MONEY */ NUMERIC(15,2),
  IIN_2 /* DOM_MONEY */ NUMERIC(15,2))
AS
BEGIN
  SUSPEND;
END
^

ALTER PROCEDURE SP_PAY_MATCHLISTS_03(
  PIDS INTEGER,
  PDATE DATE,
  PDATET DATE)
RETURNS (
  IDP INTEGER,
  IDAM INTEGER,
  DT1 DATE,
  DT2 DATE,
  IDSHR1 INTEGER,
  IDSHR2 INTEGER,
  PAY0 /* DOM_MONEY */ NUMERIC(15,2),
  PAY1 /* DOM_MONEY */ NUMERIC(15,2),
  PAY2 /* DOM_MONEY */ NUMERIC(15,2),
  R1 FLOAT,
  R2 FLOAT,
  IIN /* DOM_MONEY */ NUMERIC(15,2))
AS
BEGIN
  SUSPEND;
END
^

ALTER PROCEDURE SP_PAY_MATCHLISTS_04(
  PDATE DATE,
  PDATET DATE)
RETURNS (
  IDP INTEGER,
  IDAM INTEGER,
  DT1 DATE,
  DT2 DATE,
  IDSHR1 INTEGER,
  IDSHR2 INTEGER,
  PAY0 /* DOM_MONEY */ NUMERIC(15,2),
  PAY1 /* DOM_MONEY */ NUMERIC(15,2),
  PAY2 /* DOM_MONEY */ NUMERIC(15,2),
  R1 FLOAT,
  R2 FLOAT,
  IIN /* DOM_MONEY */ NUMERIC(15,2))
AS
BEGIN
  SUSPEND;
END
^

ALTER PROCEDURE SP_PAY_MATCHLISTS_12(
  PIDAM INTEGER,
  PPAY /* DOM_MONEY */ NUMERIC(15,2),
  PDATE DATE)
RETURNS (
  IDP INTEGER,
  IDAM INTEGER,
  DT1 DATE,
  DT2 DATE,
  IDSHR1 INTEGER,
  IDSHR2 INTEGER,
  PAY0 /* DOM_MONEY */ NUMERIC(15,2),
  PAY1 /* DOM_MONEY */ NUMERIC(15,2),
  PAY2 /* DOM_MONEY */ NUMERIC(15,2),
  R1 FLOAT,
  R2 FLOAT,
  IIN /* DOM_MONEY */ NUMERIC(15,2),
  VA_SHEET_DT1 DATE,
  VA_SHEET_DT2 DATE,
  VA_IIN_RATE /* DOM_MONEY */ NUMERIC(15,2),
  VA_IIN_RATE2 /* DOM_MONEY */ NUMERIC(15,2),
  VA_SI_RATE /* DOM_MONEY */ NUMERIC(15,2),
  VA1_PAY_TAXED /* DOM_MONEY */ NUMERIC(15,2),
  VA1_PAY_NOSAI /* DOM_MONEY */ NUMERIC(15,2),
  VA1_PAY_NOTTAXED /* DOM_MONEY */ NUMERIC(15,2),
  VA1_NOTPAID_TAXED /* DOM_MONEY */ NUMERIC(15,2),
  VA1_NOTPAID_NOSAI /* DOM_MONEY */ NUMERIC(15,2),
  VA1_NOTPAID_NOTTAXED /* DOM_MONEY */ NUMERIC(15,2),
  VA1_DNSI /* DOM_MONEY */ NUMERIC(15,2),
  VA1_UNTAXED_MINIMUM /* DOM_MONEY */ NUMERIC(15,2),
  VA1_IINEX_DEPENDANTS /* DOM_MONEY */ NUMERIC(15,2),
  VA1_IINEX2 /* DOM_MONEY */ NUMERIC(15,2),
  VA1_IINEX2_TP SMALLINT,
  VA1_PF_T /* DOM_MONEY */ NUMERIC(15,2),
  VA1_LI_T /* DOM_MONEY */ NUMERIC(15,2),
  VA1_HI_T /* DOM_MONEY */ NUMERIC(15,2),
  VA1_PF_NT /* DOM_MONEY */ NUMERIC(15,2),
  VA1_LI_NT /* DOM_MONEY */ NUMERIC(15,2),
  VA1_HI_NT /* DOM_MONEY */ NUMERIC(15,2),
  VA1_IINEX_EXP /* DOM_MONEY */ NUMERIC(15,2),
  VA1_IIN /* DOM_MONEY */ NUMERIC(15,2),
  VA1_PAY /* DOM_MONEY */ NUMERIC(15,2),
  VA2_PAY_TAXED /* DOM_MONEY */ NUMERIC(15,2),
  VA2_PAY_NOSAI /* DOM_MONEY */ NUMERIC(15,2),
  VA2_PAY_NOTTAXED /* DOM_MONEY */ NUMERIC(15,2),
  VA2_DNSI /* DOM_MONEY */ NUMERIC(15,2),
  VA2_UNTAXED_MINIMUM /* DOM_MONEY */ NUMERIC(15,2),
  VA2_IINEX_DEPENDANTS /* DOM_MONEY */ NUMERIC(15,2),
  VA2_IINEX2 /* DOM_MONEY */ NUMERIC(15,2),
  VA2_PF_NT /* DOM_MONEY */ NUMERIC(15,2),
  VA2_LI_NT /* DOM_MONEY */ NUMERIC(15,2),
  VA2_HI_NT /* DOM_MONEY */ NUMERIC(15,2),
  VA2_IINEX_EXP /* DOM_MONEY */ NUMERIC(15,2),
  VA2_IIN /* DOM_MONEY */ NUMERIC(15,2),
  VA2_PAY /* DOM_MONEY */ NUMERIC(15,2),
  VB_SHEET_DT1 DATE,
  VB_SHEET_DT2 DATE,
  VB_IIN_RATE /* DOM_MONEY */ NUMERIC(15,2),
  VB_IIN_RATE2 /* DOM_MONEY */ NUMERIC(15,2),
  VB_SI_RATE /* DOM_MONEY */ NUMERIC(15,2),
  VB1_PAY_TAXED /* DOM_MONEY */ NUMERIC(15,2),
  VB1_PAY_NOSAI /* DOM_MONEY */ NUMERIC(15,2),
  VB1_PAY_NOTTAXED /* DOM_MONEY */ NUMERIC(15,2),
  VB1_NOTPAID_TAXED /* DOM_MONEY */ NUMERIC(15,2),
  VB1_NOTPAID_NOSAI /* DOM_MONEY */ NUMERIC(15,2),
  VB1_NOTPAID_NOTTAXED /* DOM_MONEY */ NUMERIC(15,2),
  VB1_DNSI /* DOM_MONEY */ NUMERIC(15,2),
  VB1_UNTAXED_MINIMUM /* DOM_MONEY */ NUMERIC(15,2),
  VB1_IINEX_DEPENDANTS /* DOM_MONEY */ NUMERIC(15,2),
  VB1_IINEX2 /* DOM_MONEY */ NUMERIC(15,2),
  VB1_IINEX2_TP SMALLINT,
  VB1_PF_T /* DOM_MONEY */ NUMERIC(15,2),
  VB1_LI_T /* DOM_MONEY */ NUMERIC(15,2),
  VB1_HI_T /* DOM_MONEY */ NUMERIC(15,2),
  VB1_PF_NT /* DOM_MONEY */ NUMERIC(15,2),
  VB1_LI_NT /* DOM_MONEY */ NUMERIC(15,2),
  VB1_HI_NT /* DOM_MONEY */ NUMERIC(15,2),
  VB1_IINEX_EXP /* DOM_MONEY */ NUMERIC(15,2),
  VB1_IIN /* DOM_MONEY */ NUMERIC(15,2),
  VB1_PAY /* DOM_MONEY */ NUMERIC(15,2),
  VB2_PAY_TAXED /* DOM_MONEY */ NUMERIC(15,2),
  VB2_PAY_NOSAI /* DOM_MONEY */ NUMERIC(15,2),
  VB2_PAY_NOTTAXED /* DOM_MONEY */ NUMERIC(15,2),
  VB2_DNSI /* DOM_MONEY */ NUMERIC(15,2),
  VB2_UNTAXED_MINIMUM /* DOM_MONEY */ NUMERIC(15,2),
  VB2_IINEX_DEPENDANTS /* DOM_MONEY */ NUMERIC(15,2),
  VB2_IINEX2 /* DOM_MONEY */ NUMERIC(15,2),
  VB2_PF_NT /* DOM_MONEY */ NUMERIC(15,2),
  VB2_LI_NT /* DOM_MONEY */ NUMERIC(15,2),
  VB2_HI_NT /* DOM_MONEY */ NUMERIC(15,2),
  VB2_IINEX_EXP /* DOM_MONEY */ NUMERIC(15,2),
  VB2_IIN /* DOM_MONEY */ NUMERIC(15,2),
  VB2_PAY /* DOM_MONEY */ NUMERIC(15,2))
AS
BEGIN
  SUSPEND;
END
^

ALTER PROCEDURE SP_PAY_MATCHLISTS_13(
  PIDS INTEGER,
  PDATE DATE)
RETURNS (
  IDP INTEGER,
  IDAM INTEGER,
  DT1 DATE,
  DT2 DATE,
  IDSHR1 INTEGER,
  IDSHR2 INTEGER,
  PAY0 /* DOM_MONEY */ NUMERIC(15,2),
  PAY1 /* DOM_MONEY */ NUMERIC(15,2),
  PAY2 /* DOM_MONEY */ NUMERIC(15,2),
  R1 FLOAT,
  R2 FLOAT,
  IIN /* DOM_MONEY */ NUMERIC(15,2),
  VA_SHEET_DT1 DATE,
  VA_SHEET_DT2 DATE,
  VA_IIN_RATE /* DOM_MONEY */ NUMERIC(15,2),
  VA_IIN_RATE2 /* DOM_MONEY */ NUMERIC(15,2),
  VA_SI_RATE /* DOM_MONEY */ NUMERIC(15,2),
  VA1_PAY_TAXED /* DOM_MONEY */ NUMERIC(15,2),
  VA1_PAY_NOSAI /* DOM_MONEY */ NUMERIC(15,2),
  VA1_PAY_NOTTAXED /* DOM_MONEY */ NUMERIC(15,2),
  VA1_NOTPAID_TAXED /* DOM_MONEY */ NUMERIC(15,2),
  VA1_NOTPAID_NOSAI /* DOM_MONEY */ NUMERIC(15,2),
  VA1_NOTPAID_NOTTAXED /* DOM_MONEY */ NUMERIC(15,2),
  VA1_DNSI /* DOM_MONEY */ NUMERIC(15,2),
  VA1_UNTAXED_MINIMUM /* DOM_MONEY */ NUMERIC(15,2),
  VA1_IINEX_DEPENDANTS /* DOM_MONEY */ NUMERIC(15,2),
  VA1_IINEX2 /* DOM_MONEY */ NUMERIC(15,2),
  VA1_IINEX2_TP SMALLINT,
  VA1_PF_T /* DOM_MONEY */ NUMERIC(15,2),
  VA1_LI_T /* DOM_MONEY */ NUMERIC(15,2),
  VA1_HI_T /* DOM_MONEY */ NUMERIC(15,2),
  VA1_PF_NT /* DOM_MONEY */ NUMERIC(15,2),
  VA1_LI_NT /* DOM_MONEY */ NUMERIC(15,2),
  VA1_HI_NT /* DOM_MONEY */ NUMERIC(15,2),
  VA1_IINEX_EXP /* DOM_MONEY */ NUMERIC(15,2),
  VA1_IIN /* DOM_MONEY */ NUMERIC(15,2),
  VA1_PAY /* DOM_MONEY */ NUMERIC(15,2),
  VA2_PAY_TAXED /* DOM_MONEY */ NUMERIC(15,2),
  VA2_PAY_NOSAI /* DOM_MONEY */ NUMERIC(15,2),
  VA2_PAY_NOTTAXED /* DOM_MONEY */ NUMERIC(15,2),
  VA2_DNSI /* DOM_MONEY */ NUMERIC(15,2),
  VA2_UNTAXED_MINIMUM /* DOM_MONEY */ NUMERIC(15,2),
  VA2_IINEX_DEPENDANTS /* DOM_MONEY */ NUMERIC(15,2),
  VA2_IINEX2 /* DOM_MONEY */ NUMERIC(15,2),
  VA2_PF_NT /* DOM_MONEY */ NUMERIC(15,2),
  VA2_LI_NT /* DOM_MONEY */ NUMERIC(15,2),
  VA2_HI_NT /* DOM_MONEY */ NUMERIC(15,2),
  VA2_IINEX_EXP /* DOM_MONEY */ NUMERIC(15,2),
  VA2_IIN /* DOM_MONEY */ NUMERIC(15,2),
  VA2_PAY /* DOM_MONEY */ NUMERIC(15,2),
  VB_SHEET_DT1 DATE,
  VB_SHEET_DT2 DATE,
  VB_IIN_RATE /* DOM_MONEY */ NUMERIC(15,2),
  VB_IIN_RATE2 /* DOM_MONEY */ NUMERIC(15,2),
  VB_SI_RATE /* DOM_MONEY */ NUMERIC(15,2),
  VB1_PAY_TAXED /* DOM_MONEY */ NUMERIC(15,2),
  VB1_PAY_NOSAI /* DOM_MONEY */ NUMERIC(15,2),
  VB1_PAY_NOTTAXED /* DOM_MONEY */ NUMERIC(15,2),
  VB1_NOTPAID_TAXED /* DOM_MONEY */ NUMERIC(15,2),
  VB1_NOTPAID_NOSAI /* DOM_MONEY */ NUMERIC(15,2),
  VB1_NOTPAID_NOTTAXED /* DOM_MONEY */ NUMERIC(15,2),
  VB1_DNSI /* DOM_MONEY */ NUMERIC(15,2),
  VB1_UNTAXED_MINIMUM /* DOM_MONEY */ NUMERIC(15,2),
  VB1_IINEX_DEPENDANTS /* DOM_MONEY */ NUMERIC(15,2),
  VB1_IINEX2 /* DOM_MONEY */ NUMERIC(15,2),
  VB1_IINEX2_TP SMALLINT,
  VB1_PF_T /* DOM_MONEY */ NUMERIC(15,2),
  VB1_LI_T /* DOM_MONEY */ NUMERIC(15,2),
  VB1_HI_T /* DOM_MONEY */ NUMERIC(15,2),
  VB1_PF_NT /* DOM_MONEY */ NUMERIC(15,2),
  VB1_LI_NT /* DOM_MONEY */ NUMERIC(15,2),
  VB1_HI_NT /* DOM_MONEY */ NUMERIC(15,2),
  VB1_IINEX_EXP /* DOM_MONEY */ NUMERIC(15,2),
  VB1_IIN /* DOM_MONEY */ NUMERIC(15,2),
  VB1_PAY /* DOM_MONEY */ NUMERIC(15,2),
  VB2_PAY_TAXED /* DOM_MONEY */ NUMERIC(15,2),
  VB2_PAY_NOSAI /* DOM_MONEY */ NUMERIC(15,2),
  VB2_PAY_NOTTAXED /* DOM_MONEY */ NUMERIC(15,2),
  VB2_DNSI /* DOM_MONEY */ NUMERIC(15,2),
  VB2_UNTAXED_MINIMUM /* DOM_MONEY */ NUMERIC(15,2),
  VB2_IINEX_DEPENDANTS /* DOM_MONEY */ NUMERIC(15,2),
  VB2_IINEX2 /* DOM_MONEY */ NUMERIC(15,2),
  VB2_PF_NT /* DOM_MONEY */ NUMERIC(15,2),
  VB2_LI_NT /* DOM_MONEY */ NUMERIC(15,2),
  VB2_HI_NT /* DOM_MONEY */ NUMERIC(15,2),
  VB2_IINEX_EXP /* DOM_MONEY */ NUMERIC(15,2),
  VB2_IIN /* DOM_MONEY */ NUMERIC(15,2),
  VB2_PAY /* DOM_MONEY */ NUMERIC(15,2))
AS
BEGIN
  SUSPEND;
END
^

ALTER PROCEDURE SP_PAY_MATCHLISTS_14(
  PDATE DATE)
RETURNS (
  IDP INTEGER,
  IDAM INTEGER,
  DT1 DATE,
  DT2 DATE,
  IDSHR1 INTEGER,
  IDSHR2 INTEGER,
  PAY0 /* DOM_MONEY */ NUMERIC(15,2),
  PAY1 /* DOM_MONEY */ NUMERIC(15,2),
  PAY2 /* DOM_MONEY */ NUMERIC(15,2),
  R1 FLOAT,
  R2 FLOAT,
  IIN /* DOM_MONEY */ NUMERIC(15,2),
  VA_SHEET_DT1 DATE,
  VA_SHEET_DT2 DATE,
  VA_IIN_RATE /* DOM_MONEY */ NUMERIC(15,2),
  VA_IIN_RATE2 /* DOM_MONEY */ NUMERIC(15,2),
  VA_SI_RATE /* DOM_MONEY */ NUMERIC(15,2),
  VA1_PAY_TAXED /* DOM_MONEY */ NUMERIC(15,2),
  VA1_PAY_NOSAI /* DOM_MONEY */ NUMERIC(15,2),
  VA1_PAY_NOTTAXED /* DOM_MONEY */ NUMERIC(15,2),
  VA1_NOTPAID_TAXED /* DOM_MONEY */ NUMERIC(15,2),
  VA1_NOTPAID_NOSAI /* DOM_MONEY */ NUMERIC(15,2),
  VA1_NOTPAID_NOTTAXED /* DOM_MONEY */ NUMERIC(15,2),
  VA1_DNSI /* DOM_MONEY */ NUMERIC(15,2),
  VA1_UNTAXED_MINIMUM /* DOM_MONEY */ NUMERIC(15,2),
  VA1_IINEX_DEPENDANTS /* DOM_MONEY */ NUMERIC(15,2),
  VA1_IINEX2 /* DOM_MONEY */ NUMERIC(15,2),
  VA1_IINEX2_TP SMALLINT,
  VA1_PF_T /* DOM_MONEY */ NUMERIC(15,2),
  VA1_LI_T /* DOM_MONEY */ NUMERIC(15,2),
  VA1_HI_T /* DOM_MONEY */ NUMERIC(15,2),
  VA1_PF_NT /* DOM_MONEY */ NUMERIC(15,2),
  VA1_LI_NT /* DOM_MONEY */ NUMERIC(15,2),
  VA1_HI_NT /* DOM_MONEY */ NUMERIC(15,2),
  VA1_IINEX_EXP /* DOM_MONEY */ NUMERIC(15,2),
  VA1_IIN /* DOM_MONEY */ NUMERIC(15,2),
  VA1_PAY /* DOM_MONEY */ NUMERIC(15,2),
  VA2_PAY_TAXED /* DOM_MONEY */ NUMERIC(15,2),
  VA2_PAY_NOSAI /* DOM_MONEY */ NUMERIC(15,2),
  VA2_PAY_NOTTAXED /* DOM_MONEY */ NUMERIC(15,2),
  VA2_DNSI /* DOM_MONEY */ NUMERIC(15,2),
  VA2_UNTAXED_MINIMUM /* DOM_MONEY */ NUMERIC(15,2),
  VA2_IINEX_DEPENDANTS /* DOM_MONEY */ NUMERIC(15,2),
  VA2_IINEX2 /* DOM_MONEY */ NUMERIC(15,2),
  VA2_PF_NT /* DOM_MONEY */ NUMERIC(15,2),
  VA2_LI_NT /* DOM_MONEY */ NUMERIC(15,2),
  VA2_HI_NT /* DOM_MONEY */ NUMERIC(15,2),
  VA2_IINEX_EXP /* DOM_MONEY */ NUMERIC(15,2),
  VA2_IIN /* DOM_MONEY */ NUMERIC(15,2),
  VA2_PAY /* DOM_MONEY */ NUMERIC(15,2),
  VB_SHEET_DT1 DATE,
  VB_SHEET_DT2 DATE,
  VB_IIN_RATE /* DOM_MONEY */ NUMERIC(15,2),
  VB_IIN_RATE2 /* DOM_MONEY */ NUMERIC(15,2),
  VB_SI_RATE /* DOM_MONEY */ NUMERIC(15,2),
  VB1_PAY_TAXED /* DOM_MONEY */ NUMERIC(15,2),
  VB1_PAY_NOSAI /* DOM_MONEY */ NUMERIC(15,2),
  VB1_PAY_NOTTAXED /* DOM_MONEY */ NUMERIC(15,2),
  VB1_NOTPAID_TAXED /* DOM_MONEY */ NUMERIC(15,2),
  VB1_NOTPAID_NOSAI /* DOM_MONEY */ NUMERIC(15,2),
  VB1_NOTPAID_NOTTAXED /* DOM_MONEY */ NUMERIC(15,2),
  VB1_DNSI /* DOM_MONEY */ NUMERIC(15,2),
  VB1_UNTAXED_MINIMUM /* DOM_MONEY */ NUMERIC(15,2),
  VB1_IINEX_DEPENDANTS /* DOM_MONEY */ NUMERIC(15,2),
  VB1_IINEX2 /* DOM_MONEY */ NUMERIC(15,2),
  VB1_IINEX2_TP SMALLINT,
  VB1_PF_T /* DOM_MONEY */ NUMERIC(15,2),
  VB1_LI_T /* DOM_MONEY */ NUMERIC(15,2),
  VB1_HI_T /* DOM_MONEY */ NUMERIC(15,2),
  VB1_PF_NT /* DOM_MONEY */ NUMERIC(15,2),
  VB1_LI_NT /* DOM_MONEY */ NUMERIC(15,2),
  VB1_HI_NT /* DOM_MONEY */ NUMERIC(15,2),
  VB1_IINEX_EXP /* DOM_MONEY */ NUMERIC(15,2),
  VB1_IIN /* DOM_MONEY */ NUMERIC(15,2),
  VB1_PAY /* DOM_MONEY */ NUMERIC(15,2),
  VB2_PAY_TAXED /* DOM_MONEY */ NUMERIC(15,2),
  VB2_PAY_NOSAI /* DOM_MONEY */ NUMERIC(15,2),
  VB2_PAY_NOTTAXED /* DOM_MONEY */ NUMERIC(15,2),
  VB2_DNSI /* DOM_MONEY */ NUMERIC(15,2),
  VB2_UNTAXED_MINIMUM /* DOM_MONEY */ NUMERIC(15,2),
  VB2_IINEX_DEPENDANTS /* DOM_MONEY */ NUMERIC(15,2),
  VB2_IINEX2 /* DOM_MONEY */ NUMERIC(15,2),
  VB2_PF_NT /* DOM_MONEY */ NUMERIC(15,2),
  VB2_LI_NT /* DOM_MONEY */ NUMERIC(15,2),
  VB2_HI_NT /* DOM_MONEY */ NUMERIC(15,2),
  VB2_IINEX_EXP /* DOM_MONEY */ NUMERIC(15,2),
  VB2_IIN /* DOM_MONEY */ NUMERIC(15,2),
  VB2_PAY /* DOM_MONEY */ NUMERIC(15,2))
AS
BEGIN
  SUSPEND;
END
^


/******************************************************************************/
/****            Altering stored procedures (with empty bodies)            ****/
/******************************************************************************/
ALTER PROCEDURE SP_PAY_MATCHLISTS_01(
  PIDAM INTEGER,
  PPAY /* DOM_MONEY */ NUMERIC(15,2),
  PDATE DATE,
  PDATET DATE,
  PIDPSH INTEGER)
RETURNS (
  IDP INTEGER,
  IDAM INTEGER,
  TP INTEGER,
  DT DATE,
  PAYT /* DOM_MONEY */ NUMERIC(15,2),
  PAY /* DOM_MONEY */ NUMERIC(15,2),
  IIN /* DOM_MONEY */ NUMERIC(15,2),
  ADVANCE /* DOM_MONEY */ NUMERIC(15,2))
AS
BEGIN
  SUSPEND;
END
^

ALTER PROCEDURE SP_PAY_MATCHLISTS_02(
  PIDAM INTEGER,
  PPAY /* DOM_MONEY */ NUMERIC(15,2),
  PDATE DATE,
  PIDPSH INTEGER)
RETURNS (
  IDP INTEGER,
  IDAM INTEGER,
  DT1 DATE,
  DT2 DATE,
  IDSHR1 INTEGER,
  IDSHR2 INTEGER,
  PAY0 /* DOM_MONEY */ NUMERIC(15,2),
  PAY1 /* DOM_MONEY */ NUMERIC(15,2),
  PAY2 /* DOM_MONEY */ NUMERIC(15,2),
  R1 FLOAT,
  R2 FLOAT,
  IIN /* DOM_MONEY */ NUMERIC(15,2))
AS
BEGIN
  SUSPEND;
END
^

ALTER PROCEDURE SP_PAY_MATCHLISTS_02A(
  PIDAM INTEGER,
  PPAY /* DOM_MONEY */ NUMERIC(15,2),
  PDATE DATE,
  PIDPSH INTEGER)
RETURNS (
  IDP INTEGER,
  IDAM INTEGER,
  DT1 DATE,
  DT2 DATE,
  PAY0 /* DOM_MONEY */ NUMERIC(15,2),
  PAY1 /* DOM_MONEY */ NUMERIC(15,2),
  PAY2 /* DOM_MONEY */ NUMERIC(15,2),
  R1 FLOAT,
  R2 FLOAT,
  IIN /* DOM_MONEY */ NUMERIC(15,2),
  PAY_TAXED_1 /* DOM_MONEY */ NUMERIC(15,2),
  PAY_NOSAI_1 /* DOM_MONEY */ NUMERIC(15,2),
  PAY_NOTTAXED_1 /* DOM_MONEY */ NUMERIC(15,2),
  UNTAXED_MINIMUM_1 /* DOM_MONEY */ NUMERIC(15,2),
  IINEX_DEPENDANTS_1 /* DOM_MONEY */ NUMERIC(15,2),
  IINEX2_1 /* DOM_MONEY */ NUMERIC(15,2),
  IINEX2_TP_1 SMALLINT,
  DNSI_1 /* DOM_MONEY */ NUMERIC(15,2),
  PFNT_1 /* DOM_MONEY */ NUMERIC(15,2),
  LINT_1 /* DOM_MONEY */ NUMERIC(15,2),
  HINT_1 /* DOM_MONEY */ NUMERIC(15,2),
  IINEX_EXP_1 /* DOM_MONEY */ NUMERIC(15,2),
  IIN_1 /* DOM_MONEY */ NUMERIC(15,2),
  PAY_TAXED_2 /* DOM_MONEY */ NUMERIC(15,2),
  PAY_NOSAI_2 /* DOM_MONEY */ NUMERIC(15,2),
  PAY_NOTTAXED_2 /* DOM_MONEY */ NUMERIC(15,2),
  UNTAXED_MINIMUM_2 /* DOM_MONEY */ NUMERIC(15,2),
  IINEX_DEPENDANTS_2 /* DOM_MONEY */ NUMERIC(15,2),
  IINEX2_2 /* DOM_MONEY */ NUMERIC(15,2),
  IINEX2_TP_2 SMALLINT,
  DNSI_2 /* DOM_MONEY */ NUMERIC(15,2),
  PFNT_2 /* DOM_MONEY */ NUMERIC(15,2),
  LINT_2 /* DOM_MONEY */ NUMERIC(15,2),
  HINT_2 /* DOM_MONEY */ NUMERIC(15,2),
  IINEX_EXP_2 /* DOM_MONEY */ NUMERIC(15,2),
  IIN_2 /* DOM_MONEY */ NUMERIC(15,2))
AS
BEGIN
  SUSPEND;
END
^

ALTER PROCEDURE SP_PAY_MATCHLISTS_04(
  PDATE DATE,
  PDATET DATE,
  PIDPSH INTEGER)
RETURNS (
  IDP INTEGER,
  IDAM INTEGER,
  DT1 DATE,
  DT2 DATE,
  IDSHR1 INTEGER,
  IDSHR2 INTEGER,
  PAY0 /* DOM_MONEY */ NUMERIC(15,2),
  PAY1 /* DOM_MONEY */ NUMERIC(15,2),
  PAY2 /* DOM_MONEY */ NUMERIC(15,2),
  R1 FLOAT,
  R2 FLOAT,
  IIN /* DOM_MONEY */ NUMERIC(15,2))
AS
BEGIN
  SUSPEND;
END
^

ALTER PROCEDURE SP_PAY_MATCHLISTS_11(
  PIDAM INTEGER,
  PIDSHR INTEGER,
  PDT DATE,
  PIDPSH INTEGER)
RETURNS (
  V_SHEET_DT1 DATE,
  V_SHEET_DT2 DATE,
  V_IIN_RATE /* DOM_MONEY */ NUMERIC(15,2),
  V_IIN_RATE2 /* DOM_MONEY */ NUMERIC(15,2),
  V_SI_RATE /* DOM_MONEY */ NUMERIC(15,2),
  V1_PAY_TAXED /* DOM_MONEY */ NUMERIC(15,2),
  V1_PAY_NOSAI /* DOM_MONEY */ NUMERIC(15,2),
  V1_PAY_NOTTAXED /* DOM_MONEY */ NUMERIC(15,2),
  V1_NOTPAID_TAXED /* DOM_MONEY */ NUMERIC(15,2),
  V1_NOTPAID_NOSAI /* DOM_MONEY */ NUMERIC(15,2),
  V1_NOTPAID_NOTTAXED /* DOM_MONEY */ NUMERIC(15,2),
  V1_DNSI /* DOM_MONEY */ NUMERIC(15,2),
  V1_UNTAXED_MINIMUM /* DOM_MONEY */ NUMERIC(15,2),
  V1_IINEX_DEPENDANTS /* DOM_MONEY */ NUMERIC(15,2),
  V1_IINEX2 /* DOM_MONEY */ NUMERIC(15,2),
  V1_IINEX2_TP SMALLINT,
  V1_PF_T /* DOM_MONEY */ NUMERIC(15,2),
  V1_LI_T /* DOM_MONEY */ NUMERIC(15,2),
  V1_HI_T /* DOM_MONEY */ NUMERIC(15,2),
  V1_PF_NT /* DOM_MONEY */ NUMERIC(15,2),
  V1_LI_NT /* DOM_MONEY */ NUMERIC(15,2),
  V1_HI_NT /* DOM_MONEY */ NUMERIC(15,2),
  V1_IINEX_EXP /* DOM_MONEY */ NUMERIC(15,2),
  V1_IIN /* DOM_MONEY */ NUMERIC(15,2),
  V1_PAY /* DOM_MONEY */ NUMERIC(15,2),
  V2_PAY_TAXED /* DOM_MONEY */ NUMERIC(15,2),
  V2_PAY_NOSAI /* DOM_MONEY */ NUMERIC(15,2),
  V2_PAY_NOTTAXED /* DOM_MONEY */ NUMERIC(15,2),
  V2_DNSI /* DOM_MONEY */ NUMERIC(15,2),
  V2_UNTAXED_MINIMUM /* DOM_MONEY */ NUMERIC(15,2),
  V2_IINEX_DEPENDANTS /* DOM_MONEY */ NUMERIC(15,2),
  V2_IINEX2 /* DOM_MONEY */ NUMERIC(15,2),
  V2_PF_NT /* DOM_MONEY */ NUMERIC(15,2),
  V2_LI_NT /* DOM_MONEY */ NUMERIC(15,2),
  V2_HI_NT /* DOM_MONEY */ NUMERIC(15,2),
  V2_IINEX_EXP /* DOM_MONEY */ NUMERIC(15,2),
  V2_IIN /* DOM_MONEY */ NUMERIC(15,2),
  V2_PAY /* DOM_MONEY */ NUMERIC(15,2))
AS
BEGIN
  SUSPEND;
END
^

ALTER PROCEDURE SP_PAY_MATCHLISTS_12(
  PIDAM INTEGER,
  PPAY /* DOM_MONEY */ NUMERIC(15,2),
  PDATE DATE,
  PIDPSH INTEGER)
RETURNS (
  IDP INTEGER,
  IDAM INTEGER,
  DT1 DATE,
  DT2 DATE,
  IDSHR1 INTEGER,
  IDSHR2 INTEGER,
  PAY0 /* DOM_MONEY */ NUMERIC(15,2),
  PAY1 /* DOM_MONEY */ NUMERIC(15,2),
  PAY2 /* DOM_MONEY */ NUMERIC(15,2),
  R1 FLOAT,
  R2 FLOAT,
  IIN /* DOM_MONEY */ NUMERIC(15,2),
  VA_SHEET_DT1 DATE,
  VA_SHEET_DT2 DATE,
  VA_IIN_RATE /* DOM_MONEY */ NUMERIC(15,2),
  VA_IIN_RATE2 /* DOM_MONEY */ NUMERIC(15,2),
  VA_SI_RATE /* DOM_MONEY */ NUMERIC(15,2),
  VA1_PAY_TAXED /* DOM_MONEY */ NUMERIC(15,2),
  VA1_PAY_NOSAI /* DOM_MONEY */ NUMERIC(15,2),
  VA1_PAY_NOTTAXED /* DOM_MONEY */ NUMERIC(15,2),
  VA1_NOTPAID_TAXED /* DOM_MONEY */ NUMERIC(15,2),
  VA1_NOTPAID_NOSAI /* DOM_MONEY */ NUMERIC(15,2),
  VA1_NOTPAID_NOTTAXED /* DOM_MONEY */ NUMERIC(15,2),
  VA1_DNSI /* DOM_MONEY */ NUMERIC(15,2),
  VA1_UNTAXED_MINIMUM /* DOM_MONEY */ NUMERIC(15,2),
  VA1_IINEX_DEPENDANTS /* DOM_MONEY */ NUMERIC(15,2),
  VA1_IINEX2 /* DOM_MONEY */ NUMERIC(15,2),
  VA1_IINEX2_TP SMALLINT,
  VA1_PF_T /* DOM_MONEY */ NUMERIC(15,2),
  VA1_LI_T /* DOM_MONEY */ NUMERIC(15,2),
  VA1_HI_T /* DOM_MONEY */ NUMERIC(15,2),
  VA1_PF_NT /* DOM_MONEY */ NUMERIC(15,2),
  VA1_LI_NT /* DOM_MONEY */ NUMERIC(15,2),
  VA1_HI_NT /* DOM_MONEY */ NUMERIC(15,2),
  VA1_IINEX_EXP /* DOM_MONEY */ NUMERIC(15,2),
  VA1_IIN /* DOM_MONEY */ NUMERIC(15,2),
  VA1_PAY /* DOM_MONEY */ NUMERIC(15,2),
  VA2_PAY_TAXED /* DOM_MONEY */ NUMERIC(15,2),
  VA2_PAY_NOSAI /* DOM_MONEY */ NUMERIC(15,2),
  VA2_PAY_NOTTAXED /* DOM_MONEY */ NUMERIC(15,2),
  VA2_DNSI /* DOM_MONEY */ NUMERIC(15,2),
  VA2_UNTAXED_MINIMUM /* DOM_MONEY */ NUMERIC(15,2),
  VA2_IINEX_DEPENDANTS /* DOM_MONEY */ NUMERIC(15,2),
  VA2_IINEX2 /* DOM_MONEY */ NUMERIC(15,2),
  VA2_PF_NT /* DOM_MONEY */ NUMERIC(15,2),
  VA2_LI_NT /* DOM_MONEY */ NUMERIC(15,2),
  VA2_HI_NT /* DOM_MONEY */ NUMERIC(15,2),
  VA2_IINEX_EXP /* DOM_MONEY */ NUMERIC(15,2),
  VA2_IIN /* DOM_MONEY */ NUMERIC(15,2),
  VA2_PAY /* DOM_MONEY */ NUMERIC(15,2),
  VB_SHEET_DT1 DATE,
  VB_SHEET_DT2 DATE,
  VB_IIN_RATE /* DOM_MONEY */ NUMERIC(15,2),
  VB_IIN_RATE2 /* DOM_MONEY */ NUMERIC(15,2),
  VB_SI_RATE /* DOM_MONEY */ NUMERIC(15,2),
  VB1_PAY_TAXED /* DOM_MONEY */ NUMERIC(15,2),
  VB1_PAY_NOSAI /* DOM_MONEY */ NUMERIC(15,2),
  VB1_PAY_NOTTAXED /* DOM_MONEY */ NUMERIC(15,2),
  VB1_NOTPAID_TAXED /* DOM_MONEY */ NUMERIC(15,2),
  VB1_NOTPAID_NOSAI /* DOM_MONEY */ NUMERIC(15,2),
  VB1_NOTPAID_NOTTAXED /* DOM_MONEY */ NUMERIC(15,2),
  VB1_DNSI /* DOM_MONEY */ NUMERIC(15,2),
  VB1_UNTAXED_MINIMUM /* DOM_MONEY */ NUMERIC(15,2),
  VB1_IINEX_DEPENDANTS /* DOM_MONEY */ NUMERIC(15,2),
  VB1_IINEX2 /* DOM_MONEY */ NUMERIC(15,2),
  VB1_IINEX2_TP SMALLINT,
  VB1_PF_T /* DOM_MONEY */ NUMERIC(15,2),
  VB1_LI_T /* DOM_MONEY */ NUMERIC(15,2),
  VB1_HI_T /* DOM_MONEY */ NUMERIC(15,2),
  VB1_PF_NT /* DOM_MONEY */ NUMERIC(15,2),
  VB1_LI_NT /* DOM_MONEY */ NUMERIC(15,2),
  VB1_HI_NT /* DOM_MONEY */ NUMERIC(15,2),
  VB1_IINEX_EXP /* DOM_MONEY */ NUMERIC(15,2),
  VB1_IIN /* DOM_MONEY */ NUMERIC(15,2),
  VB1_PAY /* DOM_MONEY */ NUMERIC(15,2),
  VB2_PAY_TAXED /* DOM_MONEY */ NUMERIC(15,2),
  VB2_PAY_NOSAI /* DOM_MONEY */ NUMERIC(15,2),
  VB2_PAY_NOTTAXED /* DOM_MONEY */ NUMERIC(15,2),
  VB2_DNSI /* DOM_MONEY */ NUMERIC(15,2),
  VB2_UNTAXED_MINIMUM /* DOM_MONEY */ NUMERIC(15,2),
  VB2_IINEX_DEPENDANTS /* DOM_MONEY */ NUMERIC(15,2),
  VB2_IINEX2 /* DOM_MONEY */ NUMERIC(15,2),
  VB2_PF_NT /* DOM_MONEY */ NUMERIC(15,2),
  VB2_LI_NT /* DOM_MONEY */ NUMERIC(15,2),
  VB2_HI_NT /* DOM_MONEY */ NUMERIC(15,2),
  VB2_IINEX_EXP /* DOM_MONEY */ NUMERIC(15,2),
  VB2_IIN /* DOM_MONEY */ NUMERIC(15,2),
  VB2_PAY /* DOM_MONEY */ NUMERIC(15,2))
AS
BEGIN
  SUSPEND;
END
^

ALTER PROCEDURE SP_PAY_MATCHLISTS_14(
  PDATE DATE,
  PIDPSH INTEGER)
RETURNS (
  IDP INTEGER,
  IDAM INTEGER,
  DT1 DATE,
  DT2 DATE,
  IDSHR1 INTEGER,
  IDSHR2 INTEGER,
  PAY0 /* DOM_MONEY */ NUMERIC(15,2),
  PAY1 /* DOM_MONEY */ NUMERIC(15,2),
  PAY2 /* DOM_MONEY */ NUMERIC(15,2),
  R1 FLOAT,
  R2 FLOAT,
  IIN /* DOM_MONEY */ NUMERIC(15,2),
  VA_SHEET_DT1 DATE,
  VA_SHEET_DT2 DATE,
  VA_IIN_RATE /* DOM_MONEY */ NUMERIC(15,2),
  VA_IIN_RATE2 /* DOM_MONEY */ NUMERIC(15,2),
  VA_SI_RATE /* DOM_MONEY */ NUMERIC(15,2),
  VA1_PAY_TAXED /* DOM_MONEY */ NUMERIC(15,2),
  VA1_PAY_NOSAI /* DOM_MONEY */ NUMERIC(15,2),
  VA1_PAY_NOTTAXED /* DOM_MONEY */ NUMERIC(15,2),
  VA1_NOTPAID_TAXED /* DOM_MONEY */ NUMERIC(15,2),
  VA1_NOTPAID_NOSAI /* DOM_MONEY */ NUMERIC(15,2),
  VA1_NOTPAID_NOTTAXED /* DOM_MONEY */ NUMERIC(15,2),
  VA1_DNSI /* DOM_MONEY */ NUMERIC(15,2),
  VA1_UNTAXED_MINIMUM /* DOM_MONEY */ NUMERIC(15,2),
  VA1_IINEX_DEPENDANTS /* DOM_MONEY */ NUMERIC(15,2),
  VA1_IINEX2 /* DOM_MONEY */ NUMERIC(15,2),
  VA1_IINEX2_TP SMALLINT,
  VA1_PF_T /* DOM_MONEY */ NUMERIC(15,2),
  VA1_LI_T /* DOM_MONEY */ NUMERIC(15,2),
  VA1_HI_T /* DOM_MONEY */ NUMERIC(15,2),
  VA1_PF_NT /* DOM_MONEY */ NUMERIC(15,2),
  VA1_LI_NT /* DOM_MONEY */ NUMERIC(15,2),
  VA1_HI_NT /* DOM_MONEY */ NUMERIC(15,2),
  VA1_IINEX_EXP /* DOM_MONEY */ NUMERIC(15,2),
  VA1_IIN /* DOM_MONEY */ NUMERIC(15,2),
  VA1_PAY /* DOM_MONEY */ NUMERIC(15,2),
  VA2_PAY_TAXED /* DOM_MONEY */ NUMERIC(15,2),
  VA2_PAY_NOSAI /* DOM_MONEY */ NUMERIC(15,2),
  VA2_PAY_NOTTAXED /* DOM_MONEY */ NUMERIC(15,2),
  VA2_DNSI /* DOM_MONEY */ NUMERIC(15,2),
  VA2_UNTAXED_MINIMUM /* DOM_MONEY */ NUMERIC(15,2),
  VA2_IINEX_DEPENDANTS /* DOM_MONEY */ NUMERIC(15,2),
  VA2_IINEX2 /* DOM_MONEY */ NUMERIC(15,2),
  VA2_PF_NT /* DOM_MONEY */ NUMERIC(15,2),
  VA2_LI_NT /* DOM_MONEY */ NUMERIC(15,2),
  VA2_HI_NT /* DOM_MONEY */ NUMERIC(15,2),
  VA2_IINEX_EXP /* DOM_MONEY */ NUMERIC(15,2),
  VA2_IIN /* DOM_MONEY */ NUMERIC(15,2),
  VA2_PAY /* DOM_MONEY */ NUMERIC(15,2),
  VB_SHEET_DT1 DATE,
  VB_SHEET_DT2 DATE,
  VB_IIN_RATE /* DOM_MONEY */ NUMERIC(15,2),
  VB_IIN_RATE2 /* DOM_MONEY */ NUMERIC(15,2),
  VB_SI_RATE /* DOM_MONEY */ NUMERIC(15,2),
  VB1_PAY_TAXED /* DOM_MONEY */ NUMERIC(15,2),
  VB1_PAY_NOSAI /* DOM_MONEY */ NUMERIC(15,2),
  VB1_PAY_NOTTAXED /* DOM_MONEY */ NUMERIC(15,2),
  VB1_NOTPAID_TAXED /* DOM_MONEY */ NUMERIC(15,2),
  VB1_NOTPAID_NOSAI /* DOM_MONEY */ NUMERIC(15,2),
  VB1_NOTPAID_NOTTAXED /* DOM_MONEY */ NUMERIC(15,2),
  VB1_DNSI /* DOM_MONEY */ NUMERIC(15,2),
  VB1_UNTAXED_MINIMUM /* DOM_MONEY */ NUMERIC(15,2),
  VB1_IINEX_DEPENDANTS /* DOM_MONEY */ NUMERIC(15,2),
  VB1_IINEX2 /* DOM_MONEY */ NUMERIC(15,2),
  VB1_IINEX2_TP SMALLINT,
  VB1_PF_T /* DOM_MONEY */ NUMERIC(15,2),
  VB1_LI_T /* DOM_MONEY */ NUMERIC(15,2),
  VB1_HI_T /* DOM_MONEY */ NUMERIC(15,2),
  VB1_PF_NT /* DOM_MONEY */ NUMERIC(15,2),
  VB1_LI_NT /* DOM_MONEY */ NUMERIC(15,2),
  VB1_HI_NT /* DOM_MONEY */ NUMERIC(15,2),
  VB1_IINEX_EXP /* DOM_MONEY */ NUMERIC(15,2),
  VB1_IIN /* DOM_MONEY */ NUMERIC(15,2),
  VB1_PAY /* DOM_MONEY */ NUMERIC(15,2),
  VB2_PAY_TAXED /* DOM_MONEY */ NUMERIC(15,2),
  VB2_PAY_NOSAI /* DOM_MONEY */ NUMERIC(15,2),
  VB2_PAY_NOTTAXED /* DOM_MONEY */ NUMERIC(15,2),
  VB2_DNSI /* DOM_MONEY */ NUMERIC(15,2),
  VB2_UNTAXED_MINIMUM /* DOM_MONEY */ NUMERIC(15,2),
  VB2_IINEX_DEPENDANTS /* DOM_MONEY */ NUMERIC(15,2),
  VB2_IINEX2 /* DOM_MONEY */ NUMERIC(15,2),
  VB2_PF_NT /* DOM_MONEY */ NUMERIC(15,2),
  VB2_LI_NT /* DOM_MONEY */ NUMERIC(15,2),
  VB2_HI_NT /* DOM_MONEY */ NUMERIC(15,2),
  VB2_IINEX_EXP /* DOM_MONEY */ NUMERIC(15,2),
  VB2_IIN /* DOM_MONEY */ NUMERIC(15,2),
  VB2_PAY /* DOM_MONEY */ NUMERIC(15,2))
AS
BEGIN
  SUSPEND;
END
^

ALTER PROCEDURE SP_PAY_SALDO_01(
  PIDAM INTEGER,
  PDATE DATE,
  PDATET DATE,
  PIDPSH INTEGER)
RETURNS (
  IDP INTEGER,
  IDAM INTEGER,
  PAY0 /* DOM_MONEY */ NUMERIC(15,2),
  IIN0 /* DOM_MONEY */ NUMERIC(15,2),
  ADVANCE /* DOM_MONEY */ NUMERIC(15,2),
  WITHHOLDINGS /* DOM_MONEY */ NUMERIC(15,2))
AS
BEGIN
  SUSPEND;
END
^

ALTER PROCEDURE SP_PAY_SALDO_03(
  PDATE DATE,
  PDATET DATE,
  PIDPSH INTEGER)
RETURNS (
  IDP INTEGER,
  IDAM INTEGER,
  PAY0 /* DOM_MONEY */ NUMERIC(15,2),
  IIN0 /* DOM_MONEY */ NUMERIC(15,2),
  ADVANCE /* DOM_MONEY */ NUMERIC(15,2),
  WITHHOLDINGS /* DOM_MONEY */ NUMERIC(15,2))
AS
BEGIN
  SUSPEND;
END
^

ALTER PROCEDURE SP_PAY_X_1(
  PIDAM INTEGER,
  PIDPSH INTEGER,
  PIDSHR INTEGER,
  PDT DATE,
  PPAY /* DOM_MONEY */ NUMERIC(15,2))
RETURNS (
  PAY_TAXED /* DOM_MONEY */ NUMERIC(15,2),
  PAY_NOSAI /* DOM_MONEY */ NUMERIC(15,2),
  PAY_NOTTAXED /* DOM_MONEY */ NUMERIC(15,2),
  DNSI /* DOM_MONEY */ NUMERIC(15,2),
  UNTAXED_MINIMUM /* DOM_MONEY */ NUMERIC(15,2),
  IINEX_DEPENDANTS /* DOM_MONEY */ NUMERIC(15,2),
  IINEX2 /* DOM_MONEY */ NUMERIC(15,2),
  IINEX2_TP SMALLINT,
  PF_NT /* DOM_MONEY */ NUMERIC(15,2),
  LI_NT /* DOM_MONEY */ NUMERIC(15,2),
  HI_NT /* DOM_MONEY */ NUMERIC(15,2),
  IINEX_EXP /* DOM_MONEY */ NUMERIC(15,2),
  IIN /* DOM_MONEY */ NUMERIC(15,2))
AS
BEGIN
  SUSPEND;
END
^

ALTER PROCEDURE SP_REP_AGGREGATE_01(
  PDT1 DATE,
  PDT2 DATE,
  PIDP INTEGER,
  PIDAM INTEGER,
  PRETYRMT INTEGER,
  PRETIDP INTEGER,
  PRETIDAM INTEGER)
RETURNS (
  IDP /* TYPE OF COLUMN SALARY_SHEETS_R.IDP */ INTEGER,
  IDAM /* TYPE OF COLUMN SALARY_SHEETS_R.IDAM */ INTEGER,
  IDDEP /* TYPE OF COLUMN DEPARTMENTS.ID */ VARCHAR(15) /* COLLATE UTF8 - default */,
  YR /* TYPE OF COLUMN SALARY_SHEETS.YR */ INTEGER,
  MT /* TYPE OF COLUMN SALARY_SHEETS.MT */ INTEGER,
  WORKHOURS /* TYPE OF COLUMN SALARY_SHEETS_R.FACT_HOURS */ FLOAT,
  WORKDAYS /* TYPE OF COLUMN SALARY_SHEETS_R.FACT_DAYS */ INTEGER,
  WORKPAY /* TYPE OF COLUMN SALARY_SHEETS_R.SALARY */ NUMERIC(15,2),
  SICKPAY /* TYPE OF COLUMN SALARY_SHEETS_R.SALARY */ NUMERIC(15,2),
  VACATIONPAY /* TYPE OF COLUMN SALARY_SHEETS_R.SALARY */ NUMERIC(15,2),
  PLUS_TAXED /* TYPE OF COLUMN SALARY_SHEETS_R.PLUS_TAXED */ NUMERIC(15,2),
  PLUS_NOTTAXED /* TYPE OF COLUMN SALARY_SHEETS_R.PLUS_NOTTAXED */ NUMERIC(15,2),
  PLUS_AUTHORS_FEES /* TYPE OF COLUMN SALARY_SHEETS_R.PLUS_AUTHORS_FEES */ NUMERIC(15,2),
  PLUS_NOSAI /* TYPE OF COLUMN SALARY_SHEETS_R.PLUS_NOSAI */ NUMERIC(15,2),
  TOTALPAY /* TYPE OF COLUMN SALARY_SHEETS_R.SALARY */ NUMERIC(15,2),
  FORSAI /* TYPE OF COLUMN SALARY_SHEETS_R.AMOUNT_BEFORE_SN */ NUMERIC(15,2),
  DNSN_AMOUNT /* TYPE OF COLUMN SALARY_SHEETS_R.DNSN_AMOUNT */ NUMERIC(15,2),
  DDSN_AMOUNT /* TYPE OF COLUMN SALARY_SHEETS_R.DDSN_AMOUNT */ NUMERIC(15,2),
  UNTAXED_MINIMUM /* TYPE OF COLUMN SALARY_SHEETS_R.IIN_EXEMPT_UNTAXED_MINIMUM */ NUMERIC(15,2),
  IIN_EXEMPT_DEPENDANTS /* TYPE OF COLUMN SALARY_SHEETS_R.IIN_EXEMPT_DEPENDANTS */ NUMERIC(15,2),
  IIN_EXEMPT_INVALIDITY /* TYPE OF COLUMN SALARY_SHEETS_R.IIN_EXEMPT_INVALIDITY */ NUMERIC(15,2),
  IIN_EXEMPT_NATIONAL_MOVEMENT /* TYPE OF COLUMN SALARY_SHEETS_R.IIN_EXEMPT_NATIONAL_MOVEMENT */ NUMERIC(15,2),
  IIN_EXEMPT_RETALIATION /* TYPE OF COLUMN SALARY_SHEETS_R.IIN_EXEMPT_RETALIATION */ NUMERIC(15,2),
  IIN_EXEMPT_EXPENSES /* TYPE OF COLUMN SALARY_SHEETS_R.IIN_EXEMPT_EXPENSES */ NUMERIC(15,2),
  PLUS_PF_NOTTAXED /* TYPE OF COLUMN SALARY_SHEETS_R.PLUS_PF_NOTTAXED */ NUMERIC(15,2),
  PLUS_LI_NOTTAXED /* TYPE OF COLUMN SALARY_SHEETS_R.PLUS_LI_NOTTAXED */ NUMERIC(15,2),
  PLUS_HI_NOTTAXED /* TYPE OF COLUMN SALARY_SHEETS_R.PLUS_HI_NOTTAXED */ NUMERIC(15,2),
  IIN_AMOUNT /* TYPE OF COLUMN SALARY_SHEETS_R.IIN_AMOUNT */ NUMERIC(15,2),
  MINUS_BEFORE_IIN /* TYPE OF COLUMN SALARY_SHEETS_R.MINUS_BEFORE_IIN */ NUMERIC(15,2),
  MINUS_AFTER_IIN /* TYPE OF COLUMN SALARY_SHEETS_R.MINUS_AFTER_IIN */ NUMERIC(15,2),
  PAY /* TYPE OF COLUMN SALARY_SHEETS_R.PAY */ NUMERIC(15,2),
  ADVANCE /* TYPE OF COLUMN SALARY_SHEETS_R.ADVANCE */ NUMERIC(15,2),
  PAYT /* TYPE OF COLUMN SALARY_SHEETS_R.PAYT */ NUMERIC(15,2),
  PAID /* TYPE OF COLUMN PAYLISTS_R.TPAY */ NUMERIC(15,2))
AS
BEGIN
  SUSPEND;
END
^

ALTER PROCEDURE SP_REP_AGGREGATE_02(
  PDT1 DATE,
  PDT2 DATE,
  PIDDEP /* TYPE OF COLUMN DEPARTMENTS.ID */ VARCHAR(15) /* COLLATE UTF8 - default */,
  PRETYRMT INTEGER,
  PRETIDP INTEGER,
  PRETIDAM INTEGER,
  PRETIDDEP INTEGER)
RETURNS (
  IDP /* TYPE OF COLUMN SALARY_SHEETS_R.IDP */ INTEGER,
  IDAM /* TYPE OF COLUMN SALARY_SHEETS_R.IDAM */ INTEGER,
  IDDEP /* TYPE OF COLUMN DEPARTMENTS.ID */ VARCHAR(15) /* COLLATE UTF8 - default */,
  YR /* TYPE OF COLUMN SALARY_SHEETS.YR */ INTEGER,
  MT /* TYPE OF COLUMN SALARY_SHEETS.MT */ INTEGER,
  WORKHOURS /* TYPE OF COLUMN SALARY_SHEETS_R.FACT_HOURS */ FLOAT,
  WORKDAYS /* TYPE OF COLUMN SALARY_SHEETS_R.FACT_DAYS */ INTEGER,
  WORKPAY /* TYPE OF COLUMN SALARY_SHEETS_R.SALARY */ NUMERIC(15,2),
  SICKPAY /* TYPE OF COLUMN SALARY_SHEETS_R.SALARY */ NUMERIC(15,2),
  VACATIONPAY /* TYPE OF COLUMN SALARY_SHEETS_R.SALARY */ NUMERIC(15,2),
  PLUS_TAXED /* TYPE OF COLUMN SALARY_SHEETS_R.PLUS_TAXED */ NUMERIC(15,2),
  PLUS_NOTTAXED /* TYPE OF COLUMN SALARY_SHEETS_R.PLUS_NOTTAXED */ NUMERIC(15,2),
  PLUS_AUTHORS_FEES /* TYPE OF COLUMN SALARY_SHEETS_R.PLUS_AUTHORS_FEES */ NUMERIC(15,2),
  PLUS_NOSAI /* TYPE OF COLUMN SALARY_SHEETS_R.PLUS_NOSAI */ NUMERIC(15,2),
  TOTALPAY /* TYPE OF COLUMN SALARY_SHEETS_R.SALARY */ NUMERIC(15,2),
  FORSAI /* TYPE OF COLUMN SALARY_SHEETS_R.AMOUNT_BEFORE_SN */ NUMERIC(15,2),
  DNSN_AMOUNT /* TYPE OF COLUMN SALARY_SHEETS_R.DNSN_AMOUNT */ NUMERIC(15,2),
  DDSN_AMOUNT /* TYPE OF COLUMN SALARY_SHEETS_R.DDSN_AMOUNT */ NUMERIC(15,2),
  UNTAXED_MINIMUM /* TYPE OF COLUMN SALARY_SHEETS_R.IIN_EXEMPT_UNTAXED_MINIMUM */ NUMERIC(15,2),
  IIN_EXEMPT_DEPENDANTS /* TYPE OF COLUMN SALARY_SHEETS_R.IIN_EXEMPT_DEPENDANTS */ NUMERIC(15,2),
  IIN_EXEMPT_INVALIDITY /* TYPE OF COLUMN SALARY_SHEETS_R.IIN_EXEMPT_INVALIDITY */ NUMERIC(15,2),
  IIN_EXEMPT_NATIONAL_MOVEMENT /* TYPE OF COLUMN SALARY_SHEETS_R.IIN_EXEMPT_NATIONAL_MOVEMENT */ NUMERIC(15,2),
  IIN_EXEMPT_RETALIATION /* TYPE OF COLUMN SALARY_SHEETS_R.IIN_EXEMPT_RETALIATION */ NUMERIC(15,2),
  IIN_EXEMPT_EXPENSES /* TYPE OF COLUMN SALARY_SHEETS_R.IIN_EXEMPT_EXPENSES */ NUMERIC(15,2),
  PLUS_PF_NOTTAXED /* TYPE OF COLUMN SALARY_SHEETS_R.PLUS_PF_NOTTAXED */ NUMERIC(15,2),
  PLUS_LI_NOTTAXED /* TYPE OF COLUMN SALARY_SHEETS_R.PLUS_LI_NOTTAXED */ NUMERIC(15,2),
  PLUS_HI_NOTTAXED /* TYPE OF COLUMN SALARY_SHEETS_R.PLUS_HI_NOTTAXED */ NUMERIC(15,2),
  IIN_AMOUNT /* TYPE OF COLUMN SALARY_SHEETS_R.IIN_AMOUNT */ NUMERIC(15,2),
  MINUS_BEFORE_IIN /* TYPE OF COLUMN SALARY_SHEETS_R.MINUS_BEFORE_IIN */ NUMERIC(15,2),
  MINUS_AFTER_IIN /* TYPE OF COLUMN SALARY_SHEETS_R.MINUS_AFTER_IIN */ NUMERIC(15,2),
  PAY /* TYPE OF COLUMN SALARY_SHEETS_R.PAY */ NUMERIC(15,2),
  ADVANCE /* TYPE OF COLUMN SALARY_SHEETS_R.ADVANCE */ NUMERIC(15,2),
  PAYT /* TYPE OF COLUMN SALARY_SHEETS_R.PAYT */ NUMERIC(15,2),
  PAID /* TYPE OF COLUMN PAYLISTS_R.TPAY */ NUMERIC(15,2))
AS
BEGIN
  SUSPEND;
END
^


/******************************************************************************/
/****                      Altering stored procedures                      ****/
/******************************************************************************/
ALTER PROCEDURE SP_PAY_MATCHLISTS_01(
  PIDAM INTEGER,
  PPAY DOM_MONEY,
  PDATE DATE,
  PDATET DATE,
  PIDPSH INTEGER)
RETURNS (
  IDP INTEGER,
  IDAM INTEGER,
  TP INTEGER,
  DT DATE,
  PAYT DOM_MONEY,
  PAY DOM_MONEY,
  IIN DOM_MONEY,
  ADVANCE DOM_MONEY)
AS
declare variable xpay DOM_MONEY;
    declare variable xadvance DOM_MONEY;
    declare variable xiin DOM_MONEY;

    declare variable tpay DOM_MONEY;
    declare variable tadvance DOM_MONEY;
    declare variable tiin DOM_MONEY;

    declare variable firstfound integer;
begin
    
    idp = 0;
    idam = pidam;

    select
         sum(paylists_r.pay) as spay,
         sum(paylists_r.iin) as siin,
         sum(paylists_r.advance) as sadvance

    from paylists inner join paylists_r on paylists.id = paylists_r.ids
    where ((paylists.dt < :pdate) or (paylists.dt = :pdate and paylists.id < :PIDPSH))
        and paylists_r.idam = :pidam
    into :xpay, :xadvance, :xiin;

    if(xpay is null) then xpay = 0.0;
    if(xadvance is null) then xadvance = 0.0;
    if(xiin is null) then xiin = 0.0;

    tpay = 0.0;
    tiin = 0.0;
    tadvance = 0.0;

    firstfound = 0;

    for select
        gtp,
        sdt,
        spay,
        siin,
        sadvance
    from
    (
        select
            1 as gtp,
            null as sdt,
            pay0 as spay,
            iin0 as siin,
            advance as sadvance
        from positions
        where id = :pidam
    
        union all
    
        select
            2 as gtp,
            salary_sheets.dt2 as sdt,
            salary_sheets_r.pay as spay,
            salary_sheets_r.iin_amount as siin,
            salary_sheets_r.advance as sadvance
    
        from salary_sheets inner join salary_sheets_r on salary_sheets.id = salary_sheets_r.ids
        where
            salary_sheets_r.idam = :pidam and
            salary_sheets.kind = 0 and
            salary_sheets.dt2 <= :pdate and
            salary_sheets.is_temp = 0
    
        union all

        select
            3 as gtp,
            salary_sheets.dt2 as sdt,
            0.0 as spay,
            0.0 as siin,
            salary_sheets_r.advance + salary_sheets_r.pay as sadvance
    
        from salary_sheets inner join salary_sheets_r on salary_sheets.id = salary_sheets_r.ids
        where
            salary_sheets_r.idam = :pidam and
            salary_sheets.kind = 0 and
            salary_sheets.dt2 between :pdatet and :pdate and
            salary_sheets.is_temp = 1
    )
    order by gtp, sdt

    into
        :tp, :dt, :pay, :iin, :advance
    do
    begin
        tpay = tpay + pay;
        tiin = tiin + iin;
        tadvance = tadvance + advance;
        payt = tpay - xpay;

        if(tpay > xpay)
        then begin
            if(tpay >= (xpay + ppay))
            then begin
                suspend;
                break;
            end
            suspend;
        end

    end
end
^

ALTER PROCEDURE SP_PAY_MATCHLISTS_02(
  PIDAM INTEGER,
  PPAY DOM_MONEY,
  PDATE DATE,
  PIDPSH INTEGER)
RETURNS (
  IDP INTEGER,
  IDAM INTEGER,
  DT1 DATE,
  DT2 DATE,
  IDSHR1 INTEGER,
  IDSHR2 INTEGER,
  PAY0 DOM_MONEY,
  PAY1 DOM_MONEY,
  PAY2 DOM_MONEY,
  R1 FLOAT,
  R2 FLOAT,
  IIN DOM_MONEY)
AS
declare variable stp integer;
    declare variable sidshr integer;
    declare variable sdt1 date;
    declare variable sdt2 date;
    declare variable spay DOM_MONEY;
    declare variable siin DOM_MONEY;

    declare variable xpay DOM_MONEY;
    declare variable xadvance DOM_MONEY;
    declare variable xiin DOM_MONEY;

    declare variable tpay DOM_MONEY;
    declare variable tadvance DOM_MONEY;
    declare variable tiin DOM_MONEY;

    declare variable payt DOM_MONEY;

    declare variable firstfound integer;
    declare variable infirst integer;
begin
    
    idp = 0;
    idam = pidam;

    select
         sum(paylists_r.pay) as spay
    from paylists inner join paylists_r on paylists.id = paylists_r.ids
    where ((paylists.dt < :pdate) or (paylists.dt = :pdate and paylists.id < :PIDPSH))
        and paylists_r.idam = :pidam
    into :xpay;

    if(xpay is null) then xpay = 0.0;
    if(xadvance is null) then xadvance = 0.0;
    if(xiin is null) then xiin = 0.0;

    pay1 = 0.0;
    pay2 = 0.0;
    pay0 = 0.0;
    r1 = 0.0;
    r2 = 0.0;

    tpay = 0.0;
    tiin = 0.0;
    tadvance = 0.0;

    firstfound = 0;
    infirst = 0;

    select
        pay0 as spay,
        iin0 as siin
    from positions
    where id = :pidam
    into :spay, :siin;

    tpay = tpay + spay;
    tiin = tiin + siin;

    if(tpay > xpay)
    then begin
        payt = tpay - xpay;
        pay0 = minvalue(payt, ppay);
        iin = siin * pay0 / spay;
        if(tpay >= (xpay + ppay))
        then begin
            suspend;
            exit;
        end
    end


    for select
        sidshr,
        sdt1,
        sdt2,
        spay,
        siin
    from
    (
        select
            salary_sheets_r.id as sidshr,
            salary_sheets.dt1 as sdt1,
            salary_sheets.dt2 as sdt2,
            salary_sheets_r.pay as spay,
            salary_sheets_r.iin_amount as siin

        from salary_sheets inner join salary_sheets_r on salary_sheets.id = salary_sheets_r.ids
        where
            salary_sheets_r.idam = :pidam and
            salary_sheets.kind = 0 and
            salary_sheets.dt2 <= :pdate and
            salary_sheets.is_temp = 0 and
            salary_sheets_r.pay > 0.0
    
    )
    order by sdt1

    into
        :sidshr, :sdt1, :sdt2, :spay, :siin
    do
    begin
        tpay = tpay + spay;
        tiin = tiin + siin;
        infirst = 0;

        if(tpay > xpay)
        then begin
            payt = tpay - xpay;
            if(firstfound = 0)
            then begin
                firstfound = 1;
                infirst = 1;
                dt1 = :sdt1;
                IDSHR1 = sidshr;
                pay1 = minvalue(payt, ppay);
                r1 = pay1 / spay;
                if(pay1 = spay) then
                    iin = iin + siin;
                if(tpay >= (xpay + ppay))
                then begin
                    dt2 = :sdt2;
                    break;
                end
            end
            
            if(tpay >= (xpay + ppay))
            then begin
                payt = spay - (tpay - xpay - ppay);
                dt2 = :sdt2;
                IDSHR2 = sidshr;
                pay2 = payt;
                r2 = pay2 / spay;
                if(pay2 = spay) then
                    iin = iin + siin;
                break;
            end

            if(infirst = 0) then iin = iin + siin;
    
        end
    end

    if(firstfound = 0)
    then begin

    end
    else begin
        if(tpay < xpay + ppay)
        then begin
            dt2 = :sdt2;
            IDSHR2 = sidshr;
            pay2 = spay;
            r2 = 1.0;
        end
    end

    suspend;
end
^

ALTER PROCEDURE SP_PAY_MATCHLISTS_02A(
  PIDAM INTEGER,
  PPAY DOM_MONEY,
  PDATE DATE,
  PIDPSH INTEGER)
RETURNS (
  IDP INTEGER,
  IDAM INTEGER,
  DT1 DATE,
  DT2 DATE,
  PAY0 DOM_MONEY,
  PAY1 DOM_MONEY,
  PAY2 DOM_MONEY,
  R1 FLOAT,
  R2 FLOAT,
  IIN DOM_MONEY,
  PAY_TAXED_1 DOM_MONEY,
  PAY_NOSAI_1 DOM_MONEY,
  PAY_NOTTAXED_1 DOM_MONEY,
  UNTAXED_MINIMUM_1 DOM_MONEY,
  IINEX_DEPENDANTS_1 DOM_MONEY,
  IINEX2_1 DOM_MONEY,
  IINEX2_TP_1 SMALLINT,
  DNSI_1 DOM_MONEY,
  PFNT_1 DOM_MONEY,
  LINT_1 DOM_MONEY,
  HINT_1 DOM_MONEY,
  IINEX_EXP_1 DOM_MONEY,
  IIN_1 DOM_MONEY,
  PAY_TAXED_2 DOM_MONEY,
  PAY_NOSAI_2 DOM_MONEY,
  PAY_NOTTAXED_2 DOM_MONEY,
  UNTAXED_MINIMUM_2 DOM_MONEY,
  IINEX_DEPENDANTS_2 DOM_MONEY,
  IINEX2_2 DOM_MONEY,
  IINEX2_TP_2 SMALLINT,
  DNSI_2 DOM_MONEY,
  PFNT_2 DOM_MONEY,
  LINT_2 DOM_MONEY,
  HINT_2 DOM_MONEY,
  IINEX_EXP_2 DOM_MONEY,
  IIN_2 DOM_MONEY)
AS
declare variable stp integer;
    declare variable sidshr integer;
    declare variable sidshr1 integer;
    declare variable sidshr2 integer;
    declare variable sdt1 date;
    declare variable sdt2 date;
    declare variable spay DOM_MONEY;
    declare variable siin DOM_MONEY;

    declare variable xpay DOM_MONEY;
    declare variable xadvance DOM_MONEY;
    declare variable xiin DOM_MONEY;

    declare variable tpay DOM_MONEY;
    declare variable tadvance DOM_MONEY;
    declare variable tiin DOM_MONEY;

    declare variable payt DOM_MONEY;

    declare variable firstfound integer;
    declare variable infirst integer;
begin
    
    idp = 0;
    idam = pidam;
    sidshr1 = null;
    sidshr2 = null;

    PAY_TAXED_1 = 0.0;
    PAY_NOSAI_1 = 0.0;
    PAY_NOTTAXED_1 = 0.0;
    UNTAXED_MINIMUM_1 = 0.0;
    IINEX_DEPENDANTS_1 = 0.0;
    IINEX2_1 = 0.0;
    IINEX2_TP_1 = 0;
    DNSI_1 = 0.0;
    PFNT_1 = 0.0;
    LINT_1 = 0.0;
    HINT_1 = 0.0;
    IINEX_EXP_1 = 0.0;
    IIN_1 = 0.0;
    PAY_TAXED_2 = 0.0;
    PAY_NOSAI_2 = 0.0;
    PAY_NOTTAXED_2 = 0.0;
    UNTAXED_MINIMUM_2 = 0.0;
    IINEX_DEPENDANTS_2 = 0.0;
    IINEX2_2 = 0;
    IINEX2_TP_1 = 0;
    DNSI_2 = 0.0;
    PFNT_2 = 0.0;
    LINT_2 = 0.0;
    HINT_2 = 0.0;
    IINEX_EXP_2 = 0.0;
    IIN_2 = 0.0;


    select
         sum(paylists_r.pay) as spay
    from paylists inner join paylists_r on paylists.id = paylists_r.ids
    where ((paylists.dt < :pdate) or (paylists.dt = :pdate and paylists.id < :PIDPSH))
        and paylists_r.idam = :pidam
    into :xpay;

    if(xpay is null) then xpay = 0.0;
    if(xadvance is null) then xadvance = 0.0;
    if(xiin is null) then xiin = 0.0;

    pay1 = 0.0;
    pay2 = 0.0;
    pay0 = 0.0;
    r1 = 0.0;
    r2 = 0.0;

    tpay = 0.0;
    tiin = 0.0;
    tadvance = 0.0;

    firstfound = 0;
    infirst = 0;

    select
        pay0 as spay,
        iin0 as siin
    from positions
    where id = :pidam
    into :spay, :siin;

    tpay = tpay + spay;
    tiin = tiin + siin;

    if(tpay > xpay)
    then begin
        payt = tpay - xpay;
        pay0 = minvalue(payt, ppay);
        iin = siin * pay0 / spay;
        if(tpay >= (xpay + ppay))
        then begin
            suspend;
            exit;
        end
    end


    for select
        sidshr,
        sdt1,
        sdt2,
        spay,
        siin
    from
    (
        select
            salary_sheets_r.id as sidshr,
            salary_sheets.dt1 as sdt1,
            salary_sheets.dt2 as sdt2,
            salary_sheets_r.pay as spay,
            salary_sheets_r.iin_amount as siin

        from salary_sheets inner join salary_sheets_r on salary_sheets.id = salary_sheets_r.ids
        where
            salary_sheets_r.idam = :pidam and
            salary_sheets.kind = 0 and
            salary_sheets.dt2 <= :pdate and
            salary_sheets.is_temp = 0 and
            salary_sheets_r.pay > 0.0
    
    )
    order by sdt1

    into
        :sidshr, :sdt1, :sdt2, :spay, :siin
    do
    begin
        tpay = tpay + spay;
        tiin = tiin + siin;
        infirst = 0;

        if(tpay > xpay)
        then begin
            payt = tpay - xpay;
            if(firstfound = 0)
            then begin
                firstfound = 1;
                infirst = 1;
                dt1 = :sdt1;
                pay1 = minvalue(payt, ppay);
                r1 = pay1 / spay;
                iin = iin + siin * r1;

                sidshr1 = sidshr;

                if(tpay >= (xpay + ppay))
                then begin
                    dt2 = :sdt2;
                    break;
                end
            end
            
            if(tpay >= (xpay + ppay))
            then begin
                payt = spay - (tpay - xpay - ppay);
                dt2 = :sdt2;
                pay2 = payt;
                r2 = pay2 / spay;
                iin = iin + siin * r2;

                sidshr2 = sidshr;
                break;
            end

            if(infirst = 0) then iin = iin + siin;
    
        end
    end

    if (firstfound = 0) then
    begin

    end
    else begin
        if(tpay < xpay + ppay)
        then begin
            dt2 = :sdt2;
            pay2 = spay;
            r2 = 1.0;

            sidshr2 = sidshr;
        end
    end

    if (sidshr1 is not null) then
    begin
        execute procedure sp_pay_x_1
        (:pidam, :pidpsh, :sidshr1, :pdate, :pay1)
        returning_values
            PAY_TAXED_1,
            PAY_NOSAI_1,
            PAY_NOTTAXED_1,
            UNTAXED_MINIMUM_1,
            IINEX_DEPENDANTS_1,
            IINEX2_1,
            IINEX2_TP_1,
            DNSI_1,
            PFNT_1,
            LINT_1,
            HINT_1,
            IINEX_EXP_1,
            IIN_1;
    end

    if (sidshr2 is not null) then
    begin
        execute procedure sp_pay_x_1
        (:pidam, :pidpsh, :sidshr2, :pdate, :pay2)
        returning_values
            PAY_TAXED_2,
            PAY_NOSAI_2,
            PAY_NOTTAXED_2,
            UNTAXED_MINIMUM_2,
            IINEX_DEPENDANTS_2,
            IINEX2_2,
            IINEX2_TP_2,
            DNSI_2,
            PFNT_2,
            LINT_2,
            HINT_2,
            IINEX_EXP_2,
            IIN_2;
    end

    suspend;
end
^

ALTER PROCEDURE SP_PAY_MATCHLISTS_03(
  PIDS INTEGER,
  PDATE DATE,
  PDATET DATE)
RETURNS (
  IDP INTEGER,
  IDAM INTEGER,
  DT1 DATE,
  DT2 DATE,
  IDSHR1 INTEGER,
  IDSHR2 INTEGER,
  PAY0 DOM_MONEY,
  PAY1 DOM_MONEY,
  PAY2 DOM_MONEY,
  R1 FLOAT,
  R2 FLOAT,
  IIN DOM_MONEY)
AS
declare variable sidp integer;
    declare variable sidam integer;
    declare variable spay DOM_MONEY;
begin
    for select
        paylists_r.idp as sidp,
        paylists_r.idam as sidam,
        paylists_r.pay as spay
    from paylists_r
    where paylists_r.ids = :pids
    order by paylists_r.snr

    into :sidp, :sidam, :spay

    do begin
        execute procedure sp_pay_matchlists_02
            :sidam, :spay, :pdate, :pids
        returning_values
            :IDP, :IDAM, :DT1, :DT2, :IDSHR1, IDSHR2, :PAY0, :PAY1, :PAY2,
            :R1, :R2, :IIN;

        IDP = sidp;
        idam = sidam;

        suspend;

    end

end
^

ALTER PROCEDURE SP_PAY_MATCHLISTS_04(
  PDATE DATE,
  PDATET DATE,
  PIDPSH INTEGER)
RETURNS (
  IDP INTEGER,
  IDAM INTEGER,
  DT1 DATE,
  DT2 DATE,
  IDSHR1 INTEGER,
  IDSHR2 INTEGER,
  PAY0 DOM_MONEY,
  PAY1 DOM_MONEY,
  PAY2 DOM_MONEY,
  R1 FLOAT,
  R2 FLOAT,
  IIN DOM_MONEY)
AS
declare variable sidp integer;
    declare variable sidam integer;
    declare variable spay DOM_MONEY;
begin
    for select
        paylists_r.idp as sidp,
        paylists_r.idam as sidam,
        paylists_r.pay as spay
    from paylists_r inner join paylists on paylists_r.ids = paylists.id
    where paylists.dt = :pdate and paylists.id = :pidpsh
    order by paylists_r.snr

    into :sidp, :sidam, :spay

    do begin
        execute procedure sp_pay_matchlists_02
            :sidam, :spay, :pdate, :pidpsh
        returning_values
            :IDP, :IDAM, :DT1, :DT2, :IDSHR1, IDSHR2, :PAY0, :PAY1, :PAY2,
            :R1, :R2, :IIN;

        IDP = sidp;
        idam = sidam;

        suspend;

    end

end
^

ALTER PROCEDURE SP_PAY_MATCHLISTS_11(
  PIDAM INTEGER,
  PIDSHR INTEGER,
  PDT DATE,
  PIDPSH INTEGER)
RETURNS (
  V_SHEET_DT1 DATE,
  V_SHEET_DT2 DATE,
  V_IIN_RATE DOM_MONEY,
  V_IIN_RATE2 DOM_MONEY,
  V_SI_RATE DOM_MONEY,
  V1_PAY_TAXED DOM_MONEY,
  V1_PAY_NOSAI DOM_MONEY,
  V1_PAY_NOTTAXED DOM_MONEY,
  V1_NOTPAID_TAXED DOM_MONEY,
  V1_NOTPAID_NOSAI DOM_MONEY,
  V1_NOTPAID_NOTTAXED DOM_MONEY,
  V1_DNSI DOM_MONEY,
  V1_UNTAXED_MINIMUM DOM_MONEY,
  V1_IINEX_DEPENDANTS DOM_MONEY,
  V1_IINEX2 DOM_MONEY,
  V1_IINEX2_TP SMALLINT,
  V1_PF_T DOM_MONEY,
  V1_LI_T DOM_MONEY,
  V1_HI_T DOM_MONEY,
  V1_PF_NT DOM_MONEY,
  V1_LI_NT DOM_MONEY,
  V1_HI_NT DOM_MONEY,
  V1_IINEX_EXP DOM_MONEY,
  V1_IIN DOM_MONEY,
  V1_PAY DOM_MONEY,
  V2_PAY_TAXED DOM_MONEY,
  V2_PAY_NOSAI DOM_MONEY,
  V2_PAY_NOTTAXED DOM_MONEY,
  V2_DNSI DOM_MONEY,
  V2_UNTAXED_MINIMUM DOM_MONEY,
  V2_IINEX_DEPENDANTS DOM_MONEY,
  V2_IINEX2 DOM_MONEY,
  V2_PF_NT DOM_MONEY,
  V2_LI_NT DOM_MONEY,
  V2_HI_NT DOM_MONEY,
  V2_IINEX_EXP DOM_MONEY,
  V2_IIN DOM_MONEY,
  V2_PAY DOM_MONEY)
AS
begin
    -- searching for salary sheet row
    select
        salary_sheets.dt1 as dt1,
        salary_sheets.dt2 as dt2,
        salary_sheets_r.rate_iin as rate_iin,
        salary_sheets_r.rate_iin2 as rate_iin2,
        salary_sheets_r.rate_dnsn as rate_dnsn,
        salary_sheets_r.salary +
            salary_sheets_r.plus_taxed +
            salary_sheets_r.plus_pf_taxed +
            salary_sheets_r.plus_li_taxed +
            salary_sheets_r.plus_hi_taxed +
            salary_sheets_r.vacation_pay_current +
            salary_sheets_r.sickdays_pay AS PAY_TAXED,

        salary_sheets_r.plus_nosai AS PAY_NOSAI,

        salary_sheets_r.plus_nottaxed +
            salary_sheets_r.plus_pf_nottaxed +
            salary_sheets_r.plus_li_nottaxed +
            salary_sheets_r.plus_hi_nottaxed AS PAY_NOOTTAXED,
        
        salary_sheets_r.plus_np_taxed,
        salary_sheets_r.plus_np_nosai,
        salary_sheets_r.plus_np_nottaxed,

        salary_sheets_r.dnsn_amount, 

        salary_sheets_r.iin_exempt_untaxed_minimum AS UNTAXED_MINIMUM,
        salary_sheets_r.iin_exempt_dependants AS IINEX_DEPENDANTS,
        salary_sheets_r.iin_exempt_2 AS IINEX2,
        salary_sheets_r.iin_exempt_2tp AS iinex2_tp,
        salary_sheets_r.plus_pf_taxed AS PF_T,
        salary_sheets_r.plus_li_taxed AS LI_T,
        salary_sheets_r.plus_hi_taxed AS HI_T,
        salary_sheets_r.plus_pf_nottaxed AS PF_NT,
        salary_sheets_r.plus_li_nottaxed AS LI_NT,
        salary_sheets_r.plus_hi_nottaxed AS HI_NT,
        salary_sheets_r.iin_exempt_expenses AS IINEX_EXP,
        salary_sheets_r.iin_amount AS IIN,
        salary_sheets_r.pay AS PAY

    from salary_sheets_r inner join salary_sheets
        on (salary_sheets_r.id = :PIDSHR and
            salary_sheets_r.ids = salary_sheets.id)

    where salary_sheets_r.id = :PIDSHR
    into
        :V_SHEET_DT1,
        :V_SHEET_DT2,
        :V_IIN_RATE,
        :V_IIN_RATE2,
        :V_SI_RATE,
        :V1_PAY_TAXED,
        :V1_PAY_NOSAI,
        :V1_PAY_NOTTAXED,
        :V1_NOTPAID_TAXED,
        :V1_NOTPAID_NOSAI,
        :V1_NOTPAID_NOTTAXED,
        :V1_DNSI,
        :V1_UNTAXED_MINIMUM,
        :V1_IINEX_DEPENDANTS,
        :V1_IINEX2,
        :V1_IINEX2_TP,
        :V1_PF_T,
        :V1_LI_T,
        :V1_HI_T,
        :V1_PF_NT,
        :V1_LI_NT,
        :V1_HI_NT,
        :V1_IINEX_EXP,
        :V1_IIN,
        :V1_PAY;

    V2_PAY_TAXED = 0.0;
    V2_PAY_NOSAI = 0.0;
    V2_PAY_NOTTAXED = 0.0;
    V2_DNSI = 0.0;
    V2_UNTAXED_MINIMUM = 0.0;
    V2_IINEX_DEPENDANTS = 0.0;
    V2_IINEX2 = 0.0;
    V2_PF_NT = 0.0;
    V2_LI_NT = 0.0;
    V2_HI_NT = 0.0;
    V2_IINEX_EXP = 0.0;
    V2_IIN = 0.0;
    V2_PAY = 0.0;


    if (V1_PAY is null) then
    begin
        V_IIN_RATE = 0.0;
        V_IIN_RATE2 = 0.0;
        V_SI_RATE = 0.0;
        V1_PAY_TAXED = 0.0;
        V1_PAY_NOSAI = 0.0;
        V1_PAY_NOTTAXED = 0.0;
        V1_NOTPAID_TAXED = 0.0;
        V1_NOTPAID_NOSAI = 0.0;
        V1_NOTPAID_NOTTAXED = 0.0;
        V1_DNSI = 0.0;
        V1_UNTAXED_MINIMUM = 0.0;
        V1_IINEX_DEPENDANTS = 0.0;
        V1_IINEX2 = 0.0;
        V1_IINEX2_TP = 0;
        V1_PF_T = 0.0;
        V1_LI_T = 0.0;
        V1_HI_T = 0.0;
        V1_PF_NT = 0.0;
        V1_LI_NT = 0.0;
        V1_HI_NT = 0.0;
        V1_IINEX_EXP = 0.0;
        V1_IIN = 0.0;
        V1_PAY = 0.0;
        suspend;
        exit;
    end

    -- sum whats paid
    select
        sum(PAY_TAXED) as PAY_TAXED,
        sum(PAY_NOSAI) as PAY_NOSAI,
        sum(PAY_NOTTAXED) as PAY_NOTTAXED,
        sum(DNSI) as DNSI,
        sum(UNTAXED_MINIMUM) as UNTAXED_MINIMUM,
        sum(IINEX_DEPENDANTS) as IINEX_DEPENDANTS,
        sum(IINEX2) as IINEX2,
        sum(PF_NT) as PF_NT,
        sum(LI_NT) as LI_NT,
        sum(HI_NT) as HI_NT,
        sum(IINEX_EXP) as IINEX_EXP,
        sum(IIN) as IIN,
        sum(PAY) as PAY
    from
    (
        select
            coalesce(sum(PAY_TAXED_1), 0.0) as PAY_TAXED,
            coalesce(sum(PAY_NOSAI_1), 0.0) as PAY_NOSAI,
            coalesce(sum(PAY_NOTTAXED_1), 0.0) as PAY_NOTTAXED,
            coalesce(sum(DNSI_1), 0.0) as DNSI,
            coalesce(sum(UNTAXED_MINIMUM_1), 0.0) as UNTAXED_MINIMUM,
            coalesce(sum(IINEX_DEPENDANTS_1), 0.0) as IINEX_DEPENDANTS,
            coalesce(sum(IINEX2_1), 0.0) as IINEX2,
            coalesce(sum(PFNT_1), 0.0) as PF_NT,
            coalesce(sum(LINT_1), 0.0) as LI_NT,
            coalesce(sum(HINT_1), 0.0) as HI_NT,
            coalesce(sum(IINEX_EXP_1), 0.0) as IINEX_EXP,
            coalesce(sum(IIN_1), 0.0) as IIN,
            coalesce(sum(S1), 0.0) as PAY
    
        from
            paylists inner join paylists_r
            on (paylists.id = paylists_r.ids and paylists_r.idam = :PIDAM)
        where
            paylists_r.dt1 = :V_SHEET_DT1 and
            (paylists.dt < :PDT or (paylists.dt = :PDT and paylists.id < :PIDPSH))
    
        union all
    
        select
            coalesce(sum(PAY_TAXED_2), 0.0) as PAY_TAXED,
            coalesce(sum(PAY_NOSAI_2), 0.0) as PAY_NOSAI,
            coalesce(sum(PAY_NOTTAXED_2), 0.0) as PAY_NOTTAXED,
            coalesce(sum(DNSI_2), 0.0) as DNSI,
            coalesce(sum(UNTAXED_MINIMUM_2), 0.0) as UNTAXED_MINIMUM,
            coalesce(sum(IINEX_DEPENDANTS_2), 0.0) as IINEX_DEPENDANTS,
            coalesce(sum(IINEX2_2), 0.0) as IINEX2,
            coalesce(sum(PFNT_2), 0.0) as PF_NT,
            coalesce(sum(LINT_2), 0.0) as LI_NT,
            coalesce(sum(HINT_2), 0.0) as HI_NT,
            coalesce(sum(IINEX_EXP_2), 0.0) as IINEX_EXP,
            coalesce(sum(IIN_2), 0.0) as IIN,
            coalesce(sum(S2), 0.0) as PAY

        from
            paylists inner join paylists_r
            on (paylists.id = paylists_r.ids and paylists_r.idam = :PIDAM)
        where
            paylists_r.dt2 = :V_SHEET_DT2 and
            (paylists.dt < :PDT or (paylists.dt = :PDT and paylists.id < :PIDPSH))
    )
    into
        :V2_PAY_TAXED,
        :V2_PAY_NOSAI,
        :V2_PAY_NOTTAXED,
        :V2_DNSI,
        :V2_UNTAXED_MINIMUM,
        :V2_IINEX_DEPENDANTS,
        :V2_IINEX2,
        :V2_PF_NT,
        :V2_LI_NT,
        :V2_HI_NT,
        :V2_IINEX_EXP,
        :V2_IIN,
        :V2_PAY;

    suspend;
end
^

ALTER PROCEDURE SP_PAY_MATCHLISTS_12(
  PIDAM INTEGER,
  PPAY DOM_MONEY,
  PDATE DATE,
  PIDPSH INTEGER)
RETURNS (
  IDP INTEGER,
  IDAM INTEGER,
  DT1 DATE,
  DT2 DATE,
  IDSHR1 INTEGER,
  IDSHR2 INTEGER,
  PAY0 DOM_MONEY,
  PAY1 DOM_MONEY,
  PAY2 DOM_MONEY,
  R1 FLOAT,
  R2 FLOAT,
  IIN DOM_MONEY,
  VA_SHEET_DT1 DATE,
  VA_SHEET_DT2 DATE,
  VA_IIN_RATE DOM_MONEY,
  VA_IIN_RATE2 DOM_MONEY,
  VA_SI_RATE DOM_MONEY,
  VA1_PAY_TAXED DOM_MONEY,
  VA1_PAY_NOSAI DOM_MONEY,
  VA1_PAY_NOTTAXED DOM_MONEY,
  VA1_NOTPAID_TAXED DOM_MONEY,
  VA1_NOTPAID_NOSAI DOM_MONEY,
  VA1_NOTPAID_NOTTAXED DOM_MONEY,
  VA1_DNSI DOM_MONEY,
  VA1_UNTAXED_MINIMUM DOM_MONEY,
  VA1_IINEX_DEPENDANTS DOM_MONEY,
  VA1_IINEX2 DOM_MONEY,
  VA1_IINEX2_TP SMALLINT,
  VA1_PF_T DOM_MONEY,
  VA1_LI_T DOM_MONEY,
  VA1_HI_T DOM_MONEY,
  VA1_PF_NT DOM_MONEY,
  VA1_LI_NT DOM_MONEY,
  VA1_HI_NT DOM_MONEY,
  VA1_IINEX_EXP DOM_MONEY,
  VA1_IIN DOM_MONEY,
  VA1_PAY DOM_MONEY,
  VA2_PAY_TAXED DOM_MONEY,
  VA2_PAY_NOSAI DOM_MONEY,
  VA2_PAY_NOTTAXED DOM_MONEY,
  VA2_DNSI DOM_MONEY,
  VA2_UNTAXED_MINIMUM DOM_MONEY,
  VA2_IINEX_DEPENDANTS DOM_MONEY,
  VA2_IINEX2 DOM_MONEY,
  VA2_PF_NT DOM_MONEY,
  VA2_LI_NT DOM_MONEY,
  VA2_HI_NT DOM_MONEY,
  VA2_IINEX_EXP DOM_MONEY,
  VA2_IIN DOM_MONEY,
  VA2_PAY DOM_MONEY,
  VB_SHEET_DT1 DATE,
  VB_SHEET_DT2 DATE,
  VB_IIN_RATE DOM_MONEY,
  VB_IIN_RATE2 DOM_MONEY,
  VB_SI_RATE DOM_MONEY,
  VB1_PAY_TAXED DOM_MONEY,
  VB1_PAY_NOSAI DOM_MONEY,
  VB1_PAY_NOTTAXED DOM_MONEY,
  VB1_NOTPAID_TAXED DOM_MONEY,
  VB1_NOTPAID_NOSAI DOM_MONEY,
  VB1_NOTPAID_NOTTAXED DOM_MONEY,
  VB1_DNSI DOM_MONEY,
  VB1_UNTAXED_MINIMUM DOM_MONEY,
  VB1_IINEX_DEPENDANTS DOM_MONEY,
  VB1_IINEX2 DOM_MONEY,
  VB1_IINEX2_TP SMALLINT,
  VB1_PF_T DOM_MONEY,
  VB1_LI_T DOM_MONEY,
  VB1_HI_T DOM_MONEY,
  VB1_PF_NT DOM_MONEY,
  VB1_LI_NT DOM_MONEY,
  VB1_HI_NT DOM_MONEY,
  VB1_IINEX_EXP DOM_MONEY,
  VB1_IIN DOM_MONEY,
  VB1_PAY DOM_MONEY,
  VB2_PAY_TAXED DOM_MONEY,
  VB2_PAY_NOSAI DOM_MONEY,
  VB2_PAY_NOTTAXED DOM_MONEY,
  VB2_DNSI DOM_MONEY,
  VB2_UNTAXED_MINIMUM DOM_MONEY,
  VB2_IINEX_DEPENDANTS DOM_MONEY,
  VB2_IINEX2 DOM_MONEY,
  VB2_PF_NT DOM_MONEY,
  VB2_LI_NT DOM_MONEY,
  VB2_HI_NT DOM_MONEY,
  VB2_IINEX_EXP DOM_MONEY,
  VB2_IIN DOM_MONEY,
  VB2_PAY DOM_MONEY)
AS
declare variable sidp integer;
    declare variable sidam integer;
    declare variable spay DOM_MONEY;
begin

    select idp
    from positions
    where id = :PIDAM
    into :IDP;

    IDAM = PIDAM;

    execute procedure sp_pay_matchlists_02
        :PIDAM, :PPAY, :PDATE, :PIDPSH
    returning_values
        :sidp, :sidam, :DT1, :DT2, :IDSHR1, :IDSHR2, :PAY0, :PAY1, :PAY2,
        :R1, :R2, :IIN;

    if(IDSHR1 is null) then
    begin
        VA_SHEET_DT1 = null;
        VA_SHEET_DT2 = null;
        VA_IIN_RATE = 0.0;
        VA_IIN_RATE2 = 0.0;
        VA_SI_RATE = 0.0;
        VA1_PAY_TAXED = 0.0;
        VA1_PAY_NOSAI = 0.0;
        VA1_PAY_NOTTAXED = 0.0;
        VA1_NOTPAID_TAXED = 0.0;
        VA1_NOTPAID_NOSAI = 0.0;
        VA1_NOTPAID_NOTTAXED = 0.0;
        VA1_DNSI = 0.0;
        VA1_UNTAXED_MINIMUM = 0.0;
        VA1_IINEX_DEPENDANTS = 0.0;
        VA1_IINEX2 = 0.0;
        VA1_IINEX2_TP = 0.0;
        VA1_PF_T = 0.0;
        VA1_LI_T = 0.0;
        VA1_HI_T = 0.0;
        VA1_PF_NT = 0.0;
        VA1_LI_NT = 0.0;
        VA1_HI_NT = 0.0;
        VA1_IINEX_EXP = 0.0;
        VA1_IIN = 0.0;
        VA1_PAY = 0.0;

        VA2_PAY_TAXED = 0.0;
        VA2_PAY_NOSAI = 0.0;
        VA2_PAY_NOTTAXED = 0.0;
        VA2_DNSI = 0.0;
        VA2_UNTAXED_MINIMUM = 0.0;
        VA2_IINEX_DEPENDANTS = 0.0;
        VA2_IINEX2 = 0.0;
        VA2_PF_NT = 0.0;
        VA2_LI_NT = 0.0;
        VA2_HI_NT = 0.0;
        VA2_IINEX_EXP = 0.0;
        VA2_IIN = 0.0;
        VA2_PAY = 0.0;
    end else
    begin

        execute procedure SP_PAY_MATCHLISTS_11
            :sidam, :IDSHR1, :pdate, :PIDPSH
        returning_values
            :VA_SHEET_DT1,
            :VA_SHEET_DT2,
            :VA_IIN_RATE,
            :VA_IIN_RATE2,
            :VA_SI_RATE,
            :VA1_PAY_TAXED,
            :VA1_PAY_NOSAI,
            :VA1_PAY_NOTTAXED,
            :VA1_NOTPAID_TAXED,
            :VA1_NOTPAID_NOSAI,
            :VA1_NOTPAID_NOTTAXED,
            :VA1_DNSI,
            :VA1_UNTAXED_MINIMUM,
            :VA1_IINEX_DEPENDANTS,
            :VA1_IINEX2,
            :VA1_IINEX2_TP,
            :VA1_PF_T,
            :VA1_LI_T,
            :VA1_HI_T,
            :VA1_PF_NT,
            :VA1_LI_NT,
            :VA1_HI_NT,
            :VA1_IINEX_EXP,
            :VA1_IIN,
            :VA1_PAY,
    
            :VA2_PAY_TAXED,
            :VA2_PAY_NOSAI,
            :VA2_PAY_NOTTAXED,
            :VA2_DNSI,
            :VA2_UNTAXED_MINIMUM,
            :VA2_IINEX_DEPENDANTS,
            :VA2_IINEX2,
            :VA2_PF_NT,
            :VA2_LI_NT,
            :VA2_HI_NT,
            :VA2_IINEX_EXP,
            :VA2_IIN,
            :VA2_PAY;
    end

    if(IDSHR2 is null) then
    begin
        VB_SHEET_DT1 = null;
        VB_SHEET_DT2 = null;
        VB_IIN_RATE = 0.0;
        VB_IIN_RATE2 = 0.0;
        VB_SI_RATE = 0.0;
        VB1_PAY_TAXED = 0.0;
        VB1_PAY_NOSAI = 0.0;
        VB1_PAY_NOTTAXED = 0.0;
        VB1_NOTPAID_TAXED = 0.0;
        VB1_NOTPAID_NOSAI = 0.0;
        VB1_NOTPAID_NOTTAXED = 0.0;
        VB1_DNSI = 0.0;
        VB1_UNTAXED_MINIMUM = 0.0;
        VB1_IINEX_DEPENDANTS = 0.0;
        VB1_IINEX2 = 0.0;
        VB1_IINEX2_TP = 0.0;
        VB1_PF_T = 0.0;
        VB1_LI_T = 0.0;
        VB1_HI_T = 0.0;
        VB1_PF_NT = 0.0;
        VB1_LI_NT = 0.0;
        VB1_HI_NT = 0.0;
        VB1_IINEX_EXP = 0.0;
        VB1_IIN = 0.0;
        VB1_PAY = 0.0;

        VB2_PAY_TAXED = 0.0;
        VB2_PAY_NOSAI = 0.0;
        VB2_PAY_NOTTAXED = 0.0;
        VB2_DNSI = 0.0;
        VB2_UNTAXED_MINIMUM = 0.0;
        VB2_IINEX_DEPENDANTS = 0.0;
        VB2_IINEX2 = 0.0;
        VB2_PF_NT = 0.0;
        VB2_LI_NT = 0.0;
        VB2_HI_NT = 0.0;
        VB2_IINEX_EXP = 0.0;
        VB2_IIN = 0.0;
        VB2_PAY = 0.0;
    end else
    begin
        execute procedure SP_PAY_MATCHLISTS_11
            :sidam, :IDSHR2, :pdate, :PIDPSH
        returning_values
            :VB_SHEET_DT1,
            :VB_SHEET_DT2,
            :VB_IIN_RATE,
            :VB_IIN_RATE2,
            :VB_SI_RATE,
            :VB1_PAY_TAXED,
            :VB1_PAY_NOSAI,
            :VB1_PAY_NOTTAXED,
            :VB1_NOTPAID_TAXED,
            :VB1_NOTPAID_NOSAI,
            :VB1_NOTPAID_NOTTAXED,
            :VB1_DNSI,
            :VB1_UNTAXED_MINIMUM,
            :VB1_IINEX_DEPENDANTS,
            :VB1_IINEX2,
            :VB1_IINEX2_TP,
            :VB1_PF_T,
            :VB1_LI_T,
            :VB1_HI_T,
            :VB1_PF_NT,
            :VB1_LI_NT,
            :VB1_HI_NT,
            :VB1_IINEX_EXP,
            :VB1_IIN,
            :VB1_PAY,
    
            :VB2_PAY_TAXED,
            :VB2_PAY_NOSAI,
            :VB2_PAY_NOTTAXED,
            :VB2_DNSI,
            :VB2_UNTAXED_MINIMUM,
            :VB2_IINEX_DEPENDANTS,
            :VB2_IINEX2,
            :VB2_PF_NT,
            :VB2_LI_NT,
            :VB2_HI_NT,
            :VB2_IINEX_EXP,
            :VB2_IIN,
            :VB2_PAY;
    end

    suspend;


end
^

ALTER PROCEDURE SP_PAY_MATCHLISTS_13(
  PIDS INTEGER,
  PDATE DATE)
RETURNS (
  IDP INTEGER,
  IDAM INTEGER,
  DT1 DATE,
  DT2 DATE,
  IDSHR1 INTEGER,
  IDSHR2 INTEGER,
  PAY0 DOM_MONEY,
  PAY1 DOM_MONEY,
  PAY2 DOM_MONEY,
  R1 FLOAT,
  R2 FLOAT,
  IIN DOM_MONEY,
  VA_SHEET_DT1 DATE,
  VA_SHEET_DT2 DATE,
  VA_IIN_RATE DOM_MONEY,
  VA_IIN_RATE2 DOM_MONEY,
  VA_SI_RATE DOM_MONEY,
  VA1_PAY_TAXED DOM_MONEY,
  VA1_PAY_NOSAI DOM_MONEY,
  VA1_PAY_NOTTAXED DOM_MONEY,
  VA1_NOTPAID_TAXED DOM_MONEY,
  VA1_NOTPAID_NOSAI DOM_MONEY,
  VA1_NOTPAID_NOTTAXED DOM_MONEY,
  VA1_DNSI DOM_MONEY,
  VA1_UNTAXED_MINIMUM DOM_MONEY,
  VA1_IINEX_DEPENDANTS DOM_MONEY,
  VA1_IINEX2 DOM_MONEY,
  VA1_IINEX2_TP SMALLINT,
  VA1_PF_T DOM_MONEY,
  VA1_LI_T DOM_MONEY,
  VA1_HI_T DOM_MONEY,
  VA1_PF_NT DOM_MONEY,
  VA1_LI_NT DOM_MONEY,
  VA1_HI_NT DOM_MONEY,
  VA1_IINEX_EXP DOM_MONEY,
  VA1_IIN DOM_MONEY,
  VA1_PAY DOM_MONEY,
  VA2_PAY_TAXED DOM_MONEY,
  VA2_PAY_NOSAI DOM_MONEY,
  VA2_PAY_NOTTAXED DOM_MONEY,
  VA2_DNSI DOM_MONEY,
  VA2_UNTAXED_MINIMUM DOM_MONEY,
  VA2_IINEX_DEPENDANTS DOM_MONEY,
  VA2_IINEX2 DOM_MONEY,
  VA2_PF_NT DOM_MONEY,
  VA2_LI_NT DOM_MONEY,
  VA2_HI_NT DOM_MONEY,
  VA2_IINEX_EXP DOM_MONEY,
  VA2_IIN DOM_MONEY,
  VA2_PAY DOM_MONEY,
  VB_SHEET_DT1 DATE,
  VB_SHEET_DT2 DATE,
  VB_IIN_RATE DOM_MONEY,
  VB_IIN_RATE2 DOM_MONEY,
  VB_SI_RATE DOM_MONEY,
  VB1_PAY_TAXED DOM_MONEY,
  VB1_PAY_NOSAI DOM_MONEY,
  VB1_PAY_NOTTAXED DOM_MONEY,
  VB1_NOTPAID_TAXED DOM_MONEY,
  VB1_NOTPAID_NOSAI DOM_MONEY,
  VB1_NOTPAID_NOTTAXED DOM_MONEY,
  VB1_DNSI DOM_MONEY,
  VB1_UNTAXED_MINIMUM DOM_MONEY,
  VB1_IINEX_DEPENDANTS DOM_MONEY,
  VB1_IINEX2 DOM_MONEY,
  VB1_IINEX2_TP SMALLINT,
  VB1_PF_T DOM_MONEY,
  VB1_LI_T DOM_MONEY,
  VB1_HI_T DOM_MONEY,
  VB1_PF_NT DOM_MONEY,
  VB1_LI_NT DOM_MONEY,
  VB1_HI_NT DOM_MONEY,
  VB1_IINEX_EXP DOM_MONEY,
  VB1_IIN DOM_MONEY,
  VB1_PAY DOM_MONEY,
  VB2_PAY_TAXED DOM_MONEY,
  VB2_PAY_NOSAI DOM_MONEY,
  VB2_PAY_NOTTAXED DOM_MONEY,
  VB2_DNSI DOM_MONEY,
  VB2_UNTAXED_MINIMUM DOM_MONEY,
  VB2_IINEX_DEPENDANTS DOM_MONEY,
  VB2_IINEX2 DOM_MONEY,
  VB2_PF_NT DOM_MONEY,
  VB2_LI_NT DOM_MONEY,
  VB2_HI_NT DOM_MONEY,
  VB2_IINEX_EXP DOM_MONEY,
  VB2_IIN DOM_MONEY,
  VB2_PAY DOM_MONEY)
AS
declare variable sidp integer;
    declare variable sidam integer;
    declare variable spay DOM_MONEY;
begin
    for select
        paylists_r.idp as sidp,
        paylists_r.idam as sidam,
        paylists_r.pay as spay
    from paylists_r
    where paylists_r.ids = :pids
    order by paylists_r.snr

    into :sidp, :sidam, :spay

    do begin
        execute procedure sp_pay_matchlists_02
            :sidam, :spay, :pdate, :pids
        returning_values
            :IDP, :IDAM, :DT1, :DT2, :IDSHR1, IDSHR2, :PAY0, :PAY1, :PAY2,
            :R1, :R2, :IIN;

        IDP = sidp;
        idam = sidam;

        if(IDSHR1 is null) then
        begin
            VA_SHEET_DT1 = null;
            VA_SHEET_DT2 = null;
            VA_IIN_RATE = 0.0;
            VA_IIN_RATE2 = 0.0;
            VA_SI_RATE = 0.0;
            VA1_PAY_TAXED = 0.0;
            VA1_PAY_NOSAI = 0.0;
            VA1_PAY_NOTTAXED = 0.0;
            VA1_NOTPAID_TAXED = 0.0;
            VA1_NOTPAID_NOSAI = 0.0;
            VA1_NOTPAID_NOTTAXED = 0.0;
            VA1_DNSI = 0.0;
            VA1_UNTAXED_MINIMUM = 0.0;
            VA1_IINEX_DEPENDANTS = 0.0;
            VA1_IINEX2 = 0.0;
            VA1_IINEX2_TP = 0.0;
            VA1_PF_T = 0.0;
            VA1_LI_T = 0.0;
            VA1_HI_T = 0.0;
            VA1_PF_NT = 0.0;
            VA1_LI_NT = 0.0;
            VA1_HI_NT = 0.0;
            VA1_IINEX_EXP = 0.0;
            VA1_IIN = 0.0;
            VA1_PAY = 0.0;
    
            VA2_PAY_TAXED = 0.0;
            VA2_PAY_NOSAI = 0.0;
            VA2_PAY_NOTTAXED = 0.0;
            VA2_DNSI = 0.0;
            VA2_UNTAXED_MINIMUM = 0.0;
            VA2_IINEX_DEPENDANTS = 0.0;
            VA2_IINEX2 = 0.0;
            VA2_PF_NT = 0.0;
            VA2_LI_NT = 0.0;
            VA2_HI_NT = 0.0;
            VA2_IINEX_EXP = 0.0;
            VA2_IIN = 0.0;
            VA2_PAY = 0.0;
        end else
        begin
    
            execute procedure SP_PAY_MATCHLISTS_11
                :sidam, :IDSHR1, :pdate, :pids
            returning_values
                :VA_SHEET_DT1,
                :VA_SHEET_DT2,
                :VA_IIN_RATE,
                :VA_IIN_RATE2,
                :VA_SI_RATE,
                :VA1_PAY_TAXED,
                :VA1_PAY_NOSAI,
                :VA1_PAY_NOTTAXED,
                :VA1_NOTPAID_TAXED,
                :VA1_NOTPAID_NOSAI,
                :VA1_NOTPAID_NOTTAXED,
                :VA1_DNSI,
                :VA1_UNTAXED_MINIMUM,
                :VA1_IINEX_DEPENDANTS,
                :VA1_IINEX2,
                :VA1_IINEX2_TP,
                :VA1_PF_T,
                :VA1_LI_T,
                :VA1_HI_T,
                :VA1_PF_NT,
                :VA1_LI_NT,
                :VA1_HI_NT,
                :VA1_IINEX_EXP,
                :VA1_IIN,
                :VA1_PAY,
    
                :VA2_PAY_TAXED,
                :VA2_PAY_NOSAI,
                :VA2_PAY_NOTTAXED,
                :VA2_DNSI,
                :VA2_UNTAXED_MINIMUM,
                :VA2_IINEX_DEPENDANTS,
                :VA2_IINEX2,
                :VA2_PF_NT,
                :VA2_LI_NT,
                :VA2_HI_NT,
                :VA2_IINEX_EXP,
                :VA2_IIN,
                :VA2_PAY;
        end

        if(IDSHR2 is null) then
        begin
            VB_SHEET_DT1 = null;
            VB_SHEET_DT2 = null;
            VB_IIN_RATE = 0.0;
            VB_IIN_RATE2 = 0.0;
            VB_SI_RATE = 0.0;
            VB1_PAY_TAXED = 0.0;
            VB1_PAY_NOSAI = 0.0;
            VB1_PAY_NOTTAXED = 0.0;
            VB1_NOTPAID_TAXED = 0.0;
            VB1_NOTPAID_NOSAI = 0.0;
            VB1_NOTPAID_NOTTAXED = 0.0;
            VB1_DNSI = 0.0;
            VB1_UNTAXED_MINIMUM = 0.0;
            VB1_IINEX_DEPENDANTS = 0.0;
            VB1_IINEX2 = 0.0;
            VB1_IINEX2_TP = 0.0;
            VB1_PF_T = 0.0;
            VB1_LI_T = 0.0;
            VB1_HI_T = 0.0;
            VB1_PF_NT = 0.0;
            VB1_LI_NT = 0.0;
            VB1_HI_NT = 0.0;
            VB1_IINEX_EXP = 0.0;
            VB1_IIN = 0.0;
            VB1_PAY = 0.0;
    
            VB2_PAY_TAXED = 0.0;
            VB2_PAY_NOSAI = 0.0;
            VB2_PAY_NOTTAXED = 0.0;
            VB2_DNSI = 0.0;
            VB2_UNTAXED_MINIMUM = 0.0;
            VB2_IINEX_DEPENDANTS = 0.0;
            VB2_IINEX2 = 0.0;
            VB2_PF_NT = 0.0;
            VB2_LI_NT = 0.0;
            VB2_HI_NT = 0.0;
            VB2_IINEX_EXP = 0.0;
            VB2_IIN = 0.0;
            VB2_PAY = 0.0;
        end else
        begin

            execute procedure SP_PAY_MATCHLISTS_11
                :sidam, :IDSHR2, :pdate, :pids
            returning_values
                :VB_SHEET_DT1,
                :VB_SHEET_DT2,
                :VB_IIN_RATE,
                :VB_IIN_RATE2,
                :VB_SI_RATE,
                :VB1_PAY_TAXED,
                :VB1_PAY_NOSAI,
                :VB1_PAY_NOTTAXED,
                :VB1_NOTPAID_TAXED,
                :VB1_NOTPAID_NOSAI,
                :VB1_NOTPAID_NOTTAXED,
                :VB1_DNSI,
                :VB1_UNTAXED_MINIMUM,
                :VB1_IINEX_DEPENDANTS,
                :VB1_IINEX2,
                :VB1_IINEX2_TP,
                :VB1_PF_T,
                :VB1_LI_T,
                :VB1_HI_T,
                :VB1_PF_NT,
                :VB1_LI_NT,
                :VB1_HI_NT,
                :VB1_IINEX_EXP,
                :VB1_IIN,
                :VB1_PAY,
    
                :VB2_PAY_TAXED,
                :VB2_PAY_NOSAI,
                :VB2_PAY_NOTTAXED,
                :VB2_DNSI,
                :VB2_UNTAXED_MINIMUM,
                :VB2_IINEX_DEPENDANTS,
                :VB2_IINEX2,
                :VB2_PF_NT,
                :VB2_LI_NT,
                :VB2_HI_NT,
                :VB2_IINEX_EXP,
                :VB2_IIN,
                :VB2_PAY;

            end
    
            suspend;

    end

end
^

ALTER PROCEDURE SP_PAY_MATCHLISTS_14(
  PDATE DATE,
  PIDPSH INTEGER)
RETURNS (
  IDP INTEGER,
  IDAM INTEGER,
  DT1 DATE,
  DT2 DATE,
  IDSHR1 INTEGER,
  IDSHR2 INTEGER,
  PAY0 DOM_MONEY,
  PAY1 DOM_MONEY,
  PAY2 DOM_MONEY,
  R1 FLOAT,
  R2 FLOAT,
  IIN DOM_MONEY,
  VA_SHEET_DT1 DATE,
  VA_SHEET_DT2 DATE,
  VA_IIN_RATE DOM_MONEY,
  VA_IIN_RATE2 DOM_MONEY,
  VA_SI_RATE DOM_MONEY,
  VA1_PAY_TAXED DOM_MONEY,
  VA1_PAY_NOSAI DOM_MONEY,
  VA1_PAY_NOTTAXED DOM_MONEY,
  VA1_NOTPAID_TAXED DOM_MONEY,
  VA1_NOTPAID_NOSAI DOM_MONEY,
  VA1_NOTPAID_NOTTAXED DOM_MONEY,
  VA1_DNSI DOM_MONEY,
  VA1_UNTAXED_MINIMUM DOM_MONEY,
  VA1_IINEX_DEPENDANTS DOM_MONEY,
  VA1_IINEX2 DOM_MONEY,
  VA1_IINEX2_TP SMALLINT,
  VA1_PF_T DOM_MONEY,
  VA1_LI_T DOM_MONEY,
  VA1_HI_T DOM_MONEY,
  VA1_PF_NT DOM_MONEY,
  VA1_LI_NT DOM_MONEY,
  VA1_HI_NT DOM_MONEY,
  VA1_IINEX_EXP DOM_MONEY,
  VA1_IIN DOM_MONEY,
  VA1_PAY DOM_MONEY,
  VA2_PAY_TAXED DOM_MONEY,
  VA2_PAY_NOSAI DOM_MONEY,
  VA2_PAY_NOTTAXED DOM_MONEY,
  VA2_DNSI DOM_MONEY,
  VA2_UNTAXED_MINIMUM DOM_MONEY,
  VA2_IINEX_DEPENDANTS DOM_MONEY,
  VA2_IINEX2 DOM_MONEY,
  VA2_PF_NT DOM_MONEY,
  VA2_LI_NT DOM_MONEY,
  VA2_HI_NT DOM_MONEY,
  VA2_IINEX_EXP DOM_MONEY,
  VA2_IIN DOM_MONEY,
  VA2_PAY DOM_MONEY,
  VB_SHEET_DT1 DATE,
  VB_SHEET_DT2 DATE,
  VB_IIN_RATE DOM_MONEY,
  VB_IIN_RATE2 DOM_MONEY,
  VB_SI_RATE DOM_MONEY,
  VB1_PAY_TAXED DOM_MONEY,
  VB1_PAY_NOSAI DOM_MONEY,
  VB1_PAY_NOTTAXED DOM_MONEY,
  VB1_NOTPAID_TAXED DOM_MONEY,
  VB1_NOTPAID_NOSAI DOM_MONEY,
  VB1_NOTPAID_NOTTAXED DOM_MONEY,
  VB1_DNSI DOM_MONEY,
  VB1_UNTAXED_MINIMUM DOM_MONEY,
  VB1_IINEX_DEPENDANTS DOM_MONEY,
  VB1_IINEX2 DOM_MONEY,
  VB1_IINEX2_TP SMALLINT,
  VB1_PF_T DOM_MONEY,
  VB1_LI_T DOM_MONEY,
  VB1_HI_T DOM_MONEY,
  VB1_PF_NT DOM_MONEY,
  VB1_LI_NT DOM_MONEY,
  VB1_HI_NT DOM_MONEY,
  VB1_IINEX_EXP DOM_MONEY,
  VB1_IIN DOM_MONEY,
  VB1_PAY DOM_MONEY,
  VB2_PAY_TAXED DOM_MONEY,
  VB2_PAY_NOSAI DOM_MONEY,
  VB2_PAY_NOTTAXED DOM_MONEY,
  VB2_DNSI DOM_MONEY,
  VB2_UNTAXED_MINIMUM DOM_MONEY,
  VB2_IINEX_DEPENDANTS DOM_MONEY,
  VB2_IINEX2 DOM_MONEY,
  VB2_PF_NT DOM_MONEY,
  VB2_LI_NT DOM_MONEY,
  VB2_HI_NT DOM_MONEY,
  VB2_IINEX_EXP DOM_MONEY,
  VB2_IIN DOM_MONEY,
  VB2_PAY DOM_MONEY)
AS
declare variable sidp integer;
    declare variable sidam integer;
    declare variable spay DOM_MONEY;
begin
    for select
        paylists_r.idp as sidp,
        paylists_r.idam as sidam,
        paylists_r.pay as spay
    from paylists_r inner join paylists on paylists_r.ids = paylists.id
    where paylists.dt = :pdate and paylists.id = :pidpsh
    order by paylists_r.snr

    into :sidp, :sidam, :spay

    do begin
        execute procedure sp_pay_matchlists_02
            :sidam, :spay, :pdate, :pidpsh
        returning_values
            :IDP, :IDAM, :DT1, :DT2, :IDSHR1, IDSHR2, :PAY0, :PAY1, :PAY2,
            :R1, :R2, :IIN;

        IDP = sidp;
        idam = sidam;

    
        if(IDSHR1 is null) then
        begin
            VA_SHEET_DT1 = null;
            VA_SHEET_DT2 = null;
            VA_IIN_RATE = 0.0;
            VA_IIN_RATE2 = 0.0;
            VA_SI_RATE = 0.0;
            VA1_PAY_TAXED = 0.0;
            VA1_PAY_NOSAI = 0.0;
            VA1_PAY_NOTTAXED = 0.0;
            VA1_NOTPAID_TAXED = 0.0;
            VA1_NOTPAID_NOSAI = 0.0;
            VA1_NOTPAID_NOTTAXED = 0.0;
            VA1_DNSI = 0.0;
            VA1_UNTAXED_MINIMUM = 0.0;
            VA1_IINEX_DEPENDANTS = 0.0;
            VA1_IINEX2 = 0.0;
            VA1_IINEX2_TP = 0.0;
            VA1_PF_T = 0.0;
            VA1_LI_T = 0.0;
            VA1_HI_T = 0.0;
            VA1_PF_NT = 0.0;
            VA1_LI_NT = 0.0;
            VA1_HI_NT = 0.0;
            VA1_IINEX_EXP = 0.0;
            VA1_IIN = 0.0;
            VA1_PAY = 0.0;
    
            VA2_PAY_TAXED = 0.0;
            VA2_PAY_NOSAI = 0.0;
            VA2_PAY_NOTTAXED = 0.0;
            VA2_DNSI = 0.0;
            VA2_UNTAXED_MINIMUM = 0.0;
            VA2_IINEX_DEPENDANTS = 0.0;
            VA2_IINEX2 = 0.0;
            VA2_PF_NT = 0.0;
            VA2_LI_NT = 0.0;
            VA2_HI_NT = 0.0;
            VA2_IINEX_EXP = 0.0;
            VA2_IIN = 0.0;
            VA2_PAY = 0.0;
        end else
        begin
    
    
    
            execute procedure SP_PAY_MATCHLISTS_11
                :sidam, :IDSHR1, :pdate, :pidpsh
            returning_values
                :VA_SHEET_DT1,
                :VA_SHEET_DT2,
                :VA_IIN_RATE,
                :VA_IIN_RATE2,
                :VA_SI_RATE,
                :VA1_PAY_TAXED,
                :VA1_PAY_NOSAI,
                :VA1_PAY_NOTTAXED,
                :VA1_NOTPAID_TAXED,
                :VA1_NOTPAID_NOSAI,
                :VA1_NOTPAID_NOTTAXED,
                :VA1_DNSI,
                :VA1_UNTAXED_MINIMUM,
                :VA1_IINEX_DEPENDANTS,
                :VA1_IINEX2,
                :VA1_IINEX2_TP,
                :VA1_PF_T,
                :VA1_LI_T,
                :VA1_HI_T,
                :VA1_PF_NT,
                :VA1_LI_NT,
                :VA1_HI_NT,
                :VA1_IINEX_EXP,
                :VA1_IIN,
                :VA1_PAY,
    
                :VA2_PAY_TAXED,
                :VA2_PAY_NOSAI,
                :VA2_PAY_NOTTAXED,
                :VA2_DNSI,
                :VA2_UNTAXED_MINIMUM,
                :VA2_IINEX_DEPENDANTS,
                :VA2_IINEX2,
                :VA2_PF_NT,
                :VA2_LI_NT,
                :VA2_HI_NT,
                :VA2_IINEX_EXP,
                :VA2_IIN,
                :VA2_PAY;
            end

        if(IDSHR2 is null) then
        begin
            VB_SHEET_DT1 = null;
            VB_SHEET_DT2 = null;
            VB_IIN_RATE = 0.0;
            VB_IIN_RATE2 = 0.0;
            VB_SI_RATE = 0.0;
            VB1_PAY_TAXED = 0.0;
            VB1_PAY_NOSAI = 0.0;
            VB1_PAY_NOTTAXED = 0.0;
            VB1_NOTPAID_TAXED = 0.0;
            VB1_NOTPAID_NOSAI = 0.0;
            VB1_NOTPAID_NOTTAXED = 0.0;
            VB1_DNSI = 0.0;
            VB1_UNTAXED_MINIMUM = 0.0;
            VB1_IINEX_DEPENDANTS = 0.0;
            VB1_IINEX2 = 0.0;
            VB1_IINEX2_TP = 0.0;
            VB1_PF_T = 0.0;
            VB1_LI_T = 0.0;
            VB1_HI_T = 0.0;
            VB1_PF_NT = 0.0;
            VB1_LI_NT = 0.0;
            VB1_HI_NT = 0.0;
            VB1_IINEX_EXP = 0.0;
            VB1_IIN = 0.0;
            VB1_PAY = 0.0;
    
            VB2_PAY_TAXED = 0.0;
            VB2_PAY_NOSAI = 0.0;
            VB2_PAY_NOTTAXED = 0.0;
            VB2_DNSI = 0.0;
            VB2_UNTAXED_MINIMUM = 0.0;
            VB2_IINEX_DEPENDANTS = 0.0;
            VB2_IINEX2 = 0.0;
            VB2_PF_NT = 0.0;
            VB2_LI_NT = 0.0;
            VB2_HI_NT = 0.0;
            VB2_IINEX_EXP = 0.0;
            VB2_IIN = 0.0;
            VB2_PAY = 0.0;
        end else
        begin

            execute procedure SP_PAY_MATCHLISTS_11
                :sidam, :IDSHR2, :pdate, :pidpsh
            returning_values
                :VB_SHEET_DT1,
                :VB_SHEET_DT2,
                :VB_IIN_RATE,
                :VB_IIN_RATE2,
                :VB_SI_RATE,
                :VB1_PAY_TAXED,
                :VB1_PAY_NOSAI,
                :VB1_PAY_NOTTAXED,
                :VB1_NOTPAID_TAXED,
                :VB1_NOTPAID_NOSAI,
                :VB1_NOTPAID_NOTTAXED,
                :VB1_DNSI,
                :VB1_UNTAXED_MINIMUM,
                :VB1_IINEX_DEPENDANTS,
                :VB1_IINEX2,
                :VB1_IINEX2_TP,
                :VB1_PF_T,
                :VB1_LI_T,
                :VB1_HI_T,
                :VB1_PF_NT,
                :VB1_LI_NT,
                :VB1_HI_NT,
                :VB1_IINEX_EXP,
                :VB1_IIN,
                :VB1_PAY,
    
                :VB2_PAY_TAXED,
                :VB2_PAY_NOSAI,
                :VB2_PAY_NOTTAXED,
                :VB2_DNSI,
                :VB2_UNTAXED_MINIMUM,
                :VB2_IINEX_DEPENDANTS,
                :VB2_IINEX2,
                :VB2_PF_NT,
                :VB2_LI_NT,
                :VB2_HI_NT,
                :VB2_IINEX_EXP,
                :VB2_IIN,
                :VB2_PAY;
        end

        suspend;

    end

end
^

ALTER PROCEDURE SP_PAY_SALDO_01(
  PIDAM INTEGER,
  PDATE DATE,
  PDATET DATE,
  PIDPSH INTEGER)
RETURNS (
  IDP INTEGER,
  IDAM INTEGER,
  PAY0 DOM_MONEY,
  IIN0 DOM_MONEY,
  ADVANCE DOM_MONEY,
  WITHHOLDINGS DOM_MONEY)
AS
begin
    for select
        0 as tidp,
        :PIDAM as tidam,
        sum(spay) as tpay,
        sum(siin) as tiin,
        sum(sadvance) as tadvance,
        sum(swithholdings) as twithholdings

    from
    (
        select
            salary_sheets_r.pay as spay,
            salary_sheets_r.iin_amount as siin,
            salary_sheets_r.advance as sadvance,
            salary_sheets_r.minus_after_iin as swithholdings
    
        from salary_sheets inner join salary_sheets_r on salary_sheets.id = salary_sheets_r.ids
        where
            salary_sheets_r.idam = :pidam and
            salary_sheets.kind = 0 and
            salary_sheets.dt2 <= :pdate and
            salary_sheets.is_temp = 0

        union all

        select
            spay,
            siin,
            sadvance,
            swithholdings
        from
        (
            select first 1
                salary_sheets.is_temp as stemp,
                0.0 as spay,
                0.0 as siin,
                salary_sheets_r.pay + salary_sheets_r.advance
                    - salary_sheets_r.minus_after_iin as sadvance,
                0.0 as swithholdings

            from salary_sheets inner join salary_sheets_r on salary_sheets.id = salary_sheets_r.ids
            where
                salary_sheets_r.idam = :pidam and
                salary_sheets.kind = 0 and
                salary_sheets.dt2 between :pdatet and :pdate
            order by salary_sheets.dt2 desc
        )
        where stemp = 1

        union all

        select
            pay0 as spay,
            iin0 as siin,
            advance as sadvance,
            0 as swithholdings
        from positions
        where id = :pidam


        union all
    
        select 
             -paylists_r.pay as spay,
             -paylists_r.iin as siin,
             -paylists_r.advance as sadvance,
             -paylists_r.withholdings as swithholdings

        from paylists inner join paylists_r on paylists.id = paylists_r.ids
        where (paylists.dt < :pdate or (paylists.dt = :pdate and paylists.id < :pidpsh))
            and paylists_r.idam = :pidam
    )

    into
        :idp, :idam, :pay0, :iin0, :advance, :withholdings
    do suspend;
end
^

ALTER PROCEDURE SP_PAY_SALDO_02(
  PIDS INTEGER,
  PDATE DATE,
  PDATET DATE)
RETURNS (
  IDP INTEGER,
  IDAM INTEGER,
  PAY0 DOM_MONEY,
  IIN0 DOM_MONEY,
  ADVANCE DOM_MONEY,
  WITHHOLDINGS DOM_MONEY)
AS
begin
    for select
        sidp as tidp,
        sidam as tidam,
        sum(spay) as tpay,
        sum(siin) as tiin,
        sum(sadvance) as tadvance,
        sum(swithholdings) as twithholdings

    from
    (
        select
            salary_sheets_r.idp as sidp,
            salary_sheets_r.idam as sidam,
            salary_sheets_r.pay as spay,
            salary_sheets_r.iin_amount as siin,
            salary_sheets_r.advance as sadvance,
            salary_sheets_r.minus_after_iin as swithholdings
    
        from
            salary_sheets
            inner join salary_sheets_r on salary_sheets.id = salary_sheets_r.ids
            inner join paylists_r
            on  (
                    paylists_r.ids = :pids and
                    paylists_r.idam = salary_sheets_r.idam
                )
        where
            salary_sheets.kind = 0 and
            salary_sheets.dt2 <= :pdate and
            salary_sheets.is_temp = 0


        union all

        -- last temp sheet-r
        select
            salary_sheets_r.idp as sidp,
            salary_sheets_r.idam as sidam,
            0.0 as spay,
            0.0 as siin,
            salary_sheets_r.pay + salary_sheets_r.advance
                - salary_sheets_r.minus_after_iin as sadvance,
            0.0 as swithholdings

        from
            salary_sheets
            inner join salary_sheets_r
            on  (
                    salary_sheets.id = salary_sheets_r.ids and
                    salary_sheets.kind = 0 and
                    salary_sheets.dt2 between :pdatet and :pdate and
                    salary_sheets.is_temp = 1
                )
            inner join paylists_r
            on  (
                    paylists_r.ids = :pids and
                    paylists_r.idam = salary_sheets_r.idam
                )
            inner join
            (
                select
                    ssr2.idam as xidam,
                    max(ss2.dt2) as xdt
                from
                    salary_sheets as ss2
                    inner join salary_sheets_r as ssr2
                    on  (
                            ss2.id = ssr2.ids
                        )
                    inner join paylists_r
                    on  (
                            paylists_r.ids = :pids and
                            paylists_r.idam = ssr2.idam
                        )
                    where
                        ss2.kind = 0 and
                        ss2.dt2 between :pdatet and :pdate
                    group by ssr2.idam
            ) as XT
            on  (
                    XT.xidam = salary_sheets_r.idam and
                    XT.xdt = salary_sheets.dt2
                )


        union all


        select
            positions.idp as sidp,
            positions.id as sidam,
            positions.pay0 as spay,
            positions.iin0 as siin,
            positions.advance as sadvance,
            0 as swithholdings

        from
            paylists_r inner join positions
            on (
                    paylists_r.ids = :pids and
                    paylists_r.idam = positions.id
                )

        union all
    
        select 
            paylists_r.idp as sidp,
            paylists_r.idam as sidam,
             -paylists_r.pay as spay,
             -paylists_r.iin as siin,
             -paylists_r.advance as sadvance,
             -paylists_r.withholdings as swithholdings
    
        from
            paylists
            inner join paylists_r on paylists.id = paylists_r.ids
            inner join paylists_r as paylists_r_2
            on  (
                    paylists_r_2.ids = :pids and
                    paylists_r.idam = paylists_r_2.idam
                )
        where
            paylists.dt < :pdate or (paylists.dt = :pdate and paylists.id < :pids)


    )
    group by sidp, sidam

    into
        :idp, :idam, :pay0, :iin0, :advance, :withholdings
    do suspend;
end
^

ALTER PROCEDURE SP_PAY_SALDO_03(
  PDATE DATE,
  PDATET DATE,
  PIDPSH INTEGER)
RETURNS (
  IDP INTEGER,
  IDAM INTEGER,
  PAY0 DOM_MONEY,
  IIN0 DOM_MONEY,
  ADVANCE DOM_MONEY,
  WITHHOLDINGS DOM_MONEY)
AS
begin
    for select
        sidp as tidp,
        sidam as tidam,
        sum(spay) as tpay,
        sum(siin) as tiin,
        sum(sadvance) as tadvance,
        sum(swithholdings) as twithholdings

    from
    (
        select
            salary_sheets_r.idp as sidp,
            salary_sheets_r.idam as sidam,
            salary_sheets_r.pay as spay,
            salary_sheets_r.iin_amount as siin,
            salary_sheets_r.advance as sadvance,
            salary_sheets_r.minus_after_iin as swithholdings
    
        from
            salary_sheets
            inner join salary_sheets_r on salary_sheets.id = salary_sheets_r.ids
        where
            salary_sheets.kind = 0 and
            salary_sheets.dt2 <= :pdate and
            salary_sheets.is_temp = 0

        union all


        -- last temp sheet-r
        select
            salary_sheets_r.idp as sidp,
            salary_sheets_r.idam as sidam,
            0.00 as spay,
            0.00 as siin,
            salary_sheets_r.pay + salary_sheets_r.advance
                - salary_sheets_r.minus_after_iin as sadvance,
            0.0 as swithholdings
    
        from
            salary_sheets
            inner join salary_sheets_r
            on  (
                    salary_sheets.id = salary_sheets_r.ids and
                    salary_sheets.kind = 0 and
                    salary_sheets.dt2 between :pdatet and :pdate and
                    salary_sheets.is_temp = 1
                )
            inner join
            (
                select
                    ssr2.idam as xidam,
                    max(ss2.dt2) as xdt
                from
                    salary_sheets as ss2
                    inner join salary_sheets_r as ssr2
                    on ss2.id = ssr2.ids
                    where
                        ss2.kind = 0 and
                        ss2.dt2 between :pdatet and :pdate
                    group by ssr2.idam
            ) as XT
            on  XT.xidam = salary_sheets_r.idam and XT.xdt = salary_sheets.dt2


        union all


        select
            positions.idp as sidp,
            positions.id as sidam,
            positions.pay0 as spay,
            positions.iin0 as siin,
            positions.advance as sadvance,
            0 as swithholdings

        from positions

        union all
    
        select 
            paylists_r.idp as sidp,
            paylists_r.idam as sidam,
             -paylists_r.pay as spay,
             -paylists_r.iin as siin,
             -paylists_r.advance as sadvance,
             -paylists_r.withholdings as swithholdings

        from
            paylists
            inner join paylists_r on paylists.id = paylists_r.ids
        where
            paylists.dt < :pdate or (paylists.dt = :pdate and paylists.id < :PIDPSH)

    )
    group by sidp, sidam

    into
        :idp, :idam, :pay0, :iin0, :advance, :withholdings
    do suspend;
end
^

ALTER PROCEDURE SP_PAY_X_1(
  PIDAM INTEGER,
  PIDPSH INTEGER,
  PIDSHR INTEGER,
  PDT DATE,
  PPAY DOM_MONEY)
RETURNS (
  PAY_TAXED DOM_MONEY,
  PAY_NOSAI DOM_MONEY,
  PAY_NOTTAXED DOM_MONEY,
  DNSI DOM_MONEY,
  UNTAXED_MINIMUM DOM_MONEY,
  IINEX_DEPENDANTS DOM_MONEY,
  IINEX2 DOM_MONEY,
  IINEX2_TP SMALLINT,
  PF_NT DOM_MONEY,
  LI_NT DOM_MONEY,
  HI_NT DOM_MONEY,
  IINEX_EXP DOM_MONEY,
  IIN DOM_MONEY)
AS
declare variable X1 DOM_MONEY;
    declare variable X2 DOM_MONEY;

    declare variable VT DOM_MONEY;
    declare variable VNS DOM_MONEY;
    declare variable VBE DOM_MONEY;

    declare variable V_SHEET_DT1 DATE;
    declare variable V_SHEET_DT2 DATE;
    declare variable V_IIN_RATE DOM_MONEY;
    declare variable V_SI_RATE DOM_MONEY;

    declare variable V1_PAY_TAXED DOM_MONEY;
    declare variable V1_PAY_NOSAI DOM_MONEY;
    declare variable V1_PAY_NOTTAXED DOM_MONEY;
    declare variable V1_UNTAXED_MINIMUM DOM_MONEY;
    declare variable V1_IINEX_DEPENDANTS DOM_MONEY;
    declare variable V1_IINEX2 DOM_MONEY;
    declare variable V1_PF_NT DOM_MONEY;
    declare variable V1_LI_NT DOM_MONEY;
    declare variable V1_HI_NT DOM_MONEY;
    declare variable V1_IINEX_EXP DOM_MONEY;
    declare variable V1_IIN DOM_MONEY;
    declare variable V1_PAY DOM_MONEY;

    declare variable V2_PAY_TAXED DOM_MONEY;
    declare variable V2_PAY_NOSAI DOM_MONEY;
    declare variable V2_PAY_NOTTAXED DOM_MONEY;
    declare variable V2_UNTAXED_MINIMUM DOM_MONEY;
    declare variable V2_IINEX_DEPENDANTS DOM_MONEY;
    declare variable V2_IINEX2 DOM_MONEY;
    declare variable V2_PF_NT DOM_MONEY;
    declare variable V2_LI_NT DOM_MONEY;
    declare variable V2_HI_NT DOM_MONEY;
    declare variable V2_IINEX_EXP DOM_MONEY;
    declare variable V2_IIN DOM_MONEY;
    declare variable V2_PAY DOM_MONEY;

    declare variable V1_IINEX DOM_MONEY;
    declare variable V2_IINEX DOM_MONEY;

begin
    PAY_TAXED = 0.0;
    PAY_NOSAI = 0.0;
    PAY_NOTTAXED = 0.0;
    DNSI = 0.0;
    UNTAXED_MINIMUM = 0.0;
    IINEX_DEPENDANTS = 0.0;
    IINEX2 = 0.0;
    IINEX2_TP = 0;
    PF_NT = 0.0;
    LI_NT = 0.0;
    HI_NT = 0.0;
    IINEX_EXP = 0.0;
    IIN = 0.0;

    -- searching for salary sheet row
    select
        salary_sheets.dt1 as dt1,
        salary_sheets.dt2 as dt2,
        salary_sheets_r.rate_iin as rate_iin,
        salary_sheets_r.rate_dnsn as rate_dnsn,
        salary_sheets_r.salary +
            salary_sheets_r.plus_taxed +
            salary_sheets_r.plus_pf_taxed +
            salary_sheets_r.plus_li_taxed +
            salary_sheets_r.plus_hi_taxed +
            salary_sheets_r.vacation_pay_current +
            salary_sheets_r.sickdays_pay AS PAY_TAXED,

        salary_sheets_r.plus_nosai AS PAY_NOSAI,

        salary_sheets_r.plus_nottaxed +
            salary_sheets_r.plus_pf_nottaxed +
            salary_sheets_r.plus_li_nottaxed +
            salary_sheets_r.plus_hi_nottaxed AS PAY_NOOTTAXED,
        
        salary_sheets_r.iin_exempt_untaxed_minimum AS UNTAXED_MINIMUM,
        salary_sheets_r.iin_exempt_dependants AS IINEX_DEPENDANTS,
        salary_sheets_r.iin_exempt_2 AS IINEX2,
        salary_sheets_r.iin_exempt_2tp AS iinex2_tp,
        salary_sheets_r.plus_pf_nottaxed AS PF_NT,
        salary_sheets_r.plus_li_nottaxed AS LI_NT,
        salary_sheets_r.plus_hi_nottaxed AS HI_NT,
        salary_sheets_r.iin_exempt_expenses AS IINEX_EXP,
        salary_sheets_r.iin_amount AS IIN,
        salary_sheets_r.pay AS PAY

    from salary_sheets_r inner join salary_sheets
        on (salary_sheets_r.id = :PIDSHR and
            salary_sheets_r.ids = salary_sheets.id)

    where salary_sheets_r.id = :PIDSHR
    into
        :V_SHEET_DT1,
        :V_SHEET_DT2,
        :V_IIN_RATE,
        :V_SI_RATE,
        :V1_PAY_TAXED,
        :V1_PAY_NOSAI,
        :V1_PAY_NOTTAXED,
        :V1_UNTAXED_MINIMUM,
        :V1_IINEX_DEPENDANTS,
        :V1_IINEX2,
        :IINEX2_TP,
        :V1_PF_NT,
        :V1_LI_NT,
        :V1_HI_NT,
        :V1_IINEX_EXP,
        :V1_IIN,
        :V1_PAY;


    if (V1_PAY is null) then
    begin
        IINEX2_TP = 0;
        suspend;
        exit;
    end

    -- sum whats paid
    select
        sum(PAY_TAXED) as PAY_TAXED,
        sum(PAY_NOSAI) as PAY_NOSAI,
        sum(PAY_NOTTAXED) as PAY_NOTTAXED,
        sum(UNTAXED_MINIMUM) as UNTAXED_MINIMUM,
        sum(IINEX_DEPENDANTS) as IINEX_DEPENDANTS,
        sum(IINEX2) as IINEX2,
        sum(PF_NT) as PF_NT,
        sum(LI_NT) as LI_NT,
        sum(HI_NT) as HI_NT,
        sum(IINEX_EXP) as IINEX_EXP,
        sum(IIN) as IIN,
        sum(PAY) as PAY
    from
    (
        select
            coalesce(sum(PAY_TAXED_1), 0.0) as PAY_TAXED,
            coalesce(sum(PAY_NOSAI_1), 0.0) as PAY_NOSAI,
            coalesce(sum(PAY_NOTTAXED_1), 0.0) as PAY_NOTTAXED,
            coalesce(sum(UNTAXED_MINIMUM_1), 0.0) as UNTAXED_MINIMUM,
            coalesce(sum(IINEX_DEPENDANTS_1), 0.0) as IINEX_DEPENDANTS,
            coalesce(sum(IINEX2_1), 0.0) as IINEX2,
            coalesce(sum(PFNT_1), 0.0) as PF_NT,
            coalesce(sum(LINT_1), 0.0) as LI_NT,
            coalesce(sum(HINT_1), 0.0) as HI_NT,
            coalesce(sum(IINEX_EXP_1), 0.0) as IINEX_EXP,
            coalesce(sum(IIN_1), 0.0) as IIN,
            coalesce(sum(S1), 0.0) as PAY
    
        from
            paylists inner join paylists_r
            on (paylists.id = paylists_r.ids and paylists_r.idam = :PIDAM)
        where
            paylists_r.dt1 = :V_SHEET_DT1 and
            paylists.dt < :PDT or (paylists.dt = :PDT and paylists.id < :PIDPSH)

        union all
    
        select
            coalesce(sum(PAY_TAXED_2), 0.0) as PAY_TAXED,
            coalesce(sum(PAY_NOSAI_2), 0.0) as PAY_NOSAI,
            coalesce(sum(PAY_NOTTAXED_2), 0.0) as PAY_NOTTAXED,
            coalesce(sum(UNTAXED_MINIMUM_2), 0.0) as UNTAXED_MINIMUM,
            coalesce(sum(IINEX_DEPENDANTS_2), 0.0) as IINEX_DEPENDANTS,
            coalesce(sum(IINEX2_2), 0.0) as IINEX2,
            coalesce(sum(PFNT_2), 0.0) as PF_NT,
            coalesce(sum(LINT_2), 0.0) as LI_NT,
            coalesce(sum(HINT_2), 0.0) as HI_NT,
            coalesce(sum(IINEX_EXP_2), 0.0) as IINEX_EXP,
            coalesce(sum(IIN_2), 0.0) as IIN,
            coalesce(sum(S2), 0.0) as PAY

        from
            paylists inner join paylists_r
            on (paylists.id = paylists_r.ids and paylists_r.idam = :PIDAM)
        where
            paylists_r.dt2 = :V_SHEET_DT2 and
            paylists.dt < :PDT or (paylists.dt = :PDT and paylists.id < :PIDPSH)
    )
    into
        :V2_PAY_TAXED,
        :V2_PAY_NOSAI,
        :V2_PAY_NOTTAXED,
        :V2_UNTAXED_MINIMUM,
        :V2_IINEX_DEPENDANTS,
        :V2_IINEX2,
        :V2_PF_NT,
        :V2_LI_NT,
        :V2_HI_NT,
        :V2_IINEX_EXP,
        :V2_IIN,
        :V2_PAY;

    PAY_TAXED = V1_PAY_TAXED - V2_PAY_TAXED;
    PAY_NOSAI = V1_PAY_NOSAI - V2_PAY_NOSAI;
    PAY_NOTTAXED = V1_PAY_NOTTAXED - V2_PAY_NOTTAXED;
    UNTAXED_MINIMUM = V1_UNTAXED_MINIMUM - V2_UNTAXED_MINIMUM;
    IINEX_DEPENDANTS = V1_IINEX_DEPENDANTS - V2_IINEX_DEPENDANTS;
    IINEX2 = V1_IINEX2 - V2_IINEX2;
    PF_NT = V1_PF_NT - V2_PF_NT;
    LI_NT = V1_LI_NT - V2_LI_NT;
    HI_NT = V1_HI_NT - V2_HI_NT;
    IINEX_EXP = V1_IINEX_EXP - V2_IINEX_EXP;
    IIN = V1_IIN - V2_IIN;

    PPAY = PPAY + V2_PAY;

    if (PPAY = V1_PAY) then
    begin
        suspend;
        exit;
    end

    V1_IINEX = V1_UNTAXED_MINIMUM + V1_IINEX_DEPENDANTS + V1_IINEX2 + V1_IINEX_EXP;
    V1_IINEX = V1_IINEX + V1_PF_NT + V1_LI_NT + V1_HI_NT;

    X1 = PPAY - V2_PAY_NOTTAXED - (V2_PAY_NOSAI + (1 - V_SI_RATE) * V2_PAY_TAXED);
    X1 = X1 / (PAY_NOTTAXED + PAY_NOSAI + (1 - V_SI_RATE) * PAY_TAXED);
    
    X2 = PPAY - V1_IINEX * V_IIN_RATE - V2_PAY_NOTTAXED - (1 - V_IIN_RATE) * (V2_PAY_NOSAI + (1 - V_SI_RATE) * V2_PAY_TAXED);
    X2 = X2 / (PAY_NOTTAXED + (1 - V_IIN_RATE) * (PAY_NOSAI + (1 - V_SI_RATE) * PAY_TAXED));
    
    VT = PAY_TAXED * X1;
    VNS = PAY_NOSAI * X1;
    VBE = V2_PAY_NOSAI + VNS + (V2_PAY_TAXED + VT) * (1 - V_SI_RATE);
    If (VBE < V1_IINEX) Then
        x1 = X1;
    Else
        X1 = X2;
    
    PAY_TAXED = PAY_TAXED * X1;
    PAY_NOSAI = PAY_NOSAI * X1;
    PAY_NOTTAXED = PAY_NOTTAXED * X1;

    DNSI = (PAY_TAXED + V2_PAY_TAXED) * V_SI_RATE;
    VBE = PAY_TAXED + V2_PAY_TAXED + PAY_NOSAI + V2_PAY_NOSAI - DNSI;

    if(VBE < V1_IINEX) then
    begin
        V2_IINEX = VBE;
        IIN = 0;
    end
    else begin
        V2_IINEX = V1_IINEX;
        IIN = (VBE - V2_IINEX) * V_IIN_RATE;
    end

    X2 = V2_IINEX / V1_IINEX;

    UNTAXED_MINIMUM = UNTAXED_MINIMUM * X2;
    IINEX_DEPENDANTS = IINEX_DEPENDANTS * X2;
    IINEX2 = IINEX2 * X2;
    PF_NT = PF_NT * X2;
    LI_NT = LI_NT * X2;
    HI_NT = HI_NT * X2;
    IINEX_EXP = IINEX_EXP * X2;

    suspend;
end
^

ALTER PROCEDURE SP_REP_AGGREGATE_01(
  PDT1 DATE,
  PDT2 DATE,
  PIDP INTEGER,
  PIDAM INTEGER,
  PRETYRMT INTEGER,
  PRETIDP INTEGER,
  PRETIDAM INTEGER)
RETURNS (
  IDP TYPE OF COLUMN SALARY_SHEETS_R.IDP,
  IDAM TYPE OF COLUMN SALARY_SHEETS_R.IDAM,
  IDDEP TYPE OF COLUMN DEPARTMENTS.ID /* COLLATE UTF8 - default */,
  YR TYPE OF COLUMN SALARY_SHEETS.YR,
  MT TYPE OF COLUMN SALARY_SHEETS.MT,
  WORKHOURS TYPE OF COLUMN SALARY_SHEETS_R.FACT_HOURS,
  WORKDAYS TYPE OF COLUMN SALARY_SHEETS_R.FACT_DAYS,
  WORKPAY TYPE OF COLUMN SALARY_SHEETS_R.SALARY,
  SICKPAY TYPE OF COLUMN SALARY_SHEETS_R.SALARY,
  VACATIONPAY TYPE OF COLUMN SALARY_SHEETS_R.SALARY,
  PLUS_TAXED TYPE OF COLUMN SALARY_SHEETS_R.PLUS_TAXED,
  PLUS_NOTTAXED TYPE OF COLUMN SALARY_SHEETS_R.PLUS_NOTTAXED,
  PLUS_AUTHORS_FEES TYPE OF COLUMN SALARY_SHEETS_R.PLUS_AUTHORS_FEES,
  PLUS_NOSAI TYPE OF COLUMN SALARY_SHEETS_R.PLUS_NOSAI,
  TOTALPAY TYPE OF COLUMN SALARY_SHEETS_R.SALARY,
  FORSAI TYPE OF COLUMN SALARY_SHEETS_R.AMOUNT_BEFORE_SN,
  DNSN_AMOUNT TYPE OF COLUMN SALARY_SHEETS_R.DNSN_AMOUNT,
  DDSN_AMOUNT TYPE OF COLUMN SALARY_SHEETS_R.DDSN_AMOUNT,
  UNTAXED_MINIMUM TYPE OF COLUMN SALARY_SHEETS_R.IIN_EXEMPT_UNTAXED_MINIMUM,
  IIN_EXEMPT_DEPENDANTS TYPE OF COLUMN SALARY_SHEETS_R.IIN_EXEMPT_DEPENDANTS,
  IIN_EXEMPT_INVALIDITY TYPE OF COLUMN SALARY_SHEETS_R.IIN_EXEMPT_INVALIDITY,
  IIN_EXEMPT_NATIONAL_MOVEMENT TYPE OF COLUMN SALARY_SHEETS_R.IIN_EXEMPT_NATIONAL_MOVEMENT,
  IIN_EXEMPT_RETALIATION TYPE OF COLUMN SALARY_SHEETS_R.IIN_EXEMPT_RETALIATION,
  IIN_EXEMPT_EXPENSES TYPE OF COLUMN SALARY_SHEETS_R.IIN_EXEMPT_EXPENSES,
  PLUS_PF_NOTTAXED TYPE OF COLUMN SALARY_SHEETS_R.PLUS_PF_NOTTAXED,
  PLUS_LI_NOTTAXED TYPE OF COLUMN SALARY_SHEETS_R.PLUS_LI_NOTTAXED,
  PLUS_HI_NOTTAXED TYPE OF COLUMN SALARY_SHEETS_R.PLUS_HI_NOTTAXED,
  IIN_AMOUNT TYPE OF COLUMN SALARY_SHEETS_R.IIN_AMOUNT,
  MINUS_BEFORE_IIN TYPE OF COLUMN SALARY_SHEETS_R.MINUS_BEFORE_IIN,
  MINUS_AFTER_IIN TYPE OF COLUMN SALARY_SHEETS_R.MINUS_AFTER_IIN,
  PAY TYPE OF COLUMN SALARY_SHEETS_R.PAY,
  ADVANCE TYPE OF COLUMN SALARY_SHEETS_R.ADVANCE,
  PAYT TYPE OF COLUMN SALARY_SHEETS_R.PAYT,
  PAID TYPE OF COLUMN PAYLISTS_R.TPAY)
AS
begin
    for select
        ridp,
        ridam,
        null as iddep,

        ryr,
        rmt,

        sum(rworkhours) as tworkhours,
        sum(rworkdays) as tworkdays,

        sum(rworkpay) as tworkpay,
        sum(rsickpay) as tsickpay,
        sum(rvacationpay) as tvacationpay,

        sum(rplus_taxed) as tplus_taxed,
        sum(rplus_nottaxed) as tplus_nottaxed,
        sum(rplus_authors_fees) as tplus_authors_fees,
        sum(rplus_nosai) as tplus_nosai,

        sum(rtotalpay) as ttotalpay,

        sum(rforsai) as tforsai,

        sum(rdnsn_amount) as tdnsn_amount,
        sum(rddsn_amount) as tddsn_amount,

        sum(runtaxed_minimum) as tuntaxed_minimum,
        sum(riin_exempt_dependants) as tiin_exempt_dependants,
        sum(riin_exempt_invalidity) as tiin_exempt_invalidity,
        sum(riin_exempt_national_movement) as tiin_exempt_national_movement,
        sum(riin_exempt_retaliation) as tiin_exempt_retaliation,
        sum(riin_exempt_expenses) as tiin_exempt_expenses,

        sum(rplus_pf_nottaxed) as tplus_pf_nottaxed,
        sum(rplus_li_nottaxed) as tplus_li_nottaxed,
        sum(rplus_hi_nottaxed) as tplus_hi_nottaxed,

        sum(riin_amount) as tiin_amount,

        sum(rminus_before_iin) as tminus_before_iin,
        sum(rminus_after_iin) as tminus_after_iin,

        sum(rpay) as tpay,
        sum(radvance) as tadvance,
        sum(rpayt) as tpayt,
        sum(rpaid) as tpaid
    from
    (

        select
            iif(:pretidp = 0, null, salary_sheets_R.idp) as ridp,
            iif(:pretidam = 0, null, salary_sheets_R.idam) as ridam,

            iif(:pretyrmt = 0, null, salary_sheets.yr) as ryr,
            iif(:pretyrmt = 0, null, salary_sheets.mt) as rmt,

            salary_sheets_R.fact_hours as rworkhours,
            salary_sheets_R.fact_days as rworkdays,

            salary_sheets_R.salary as rworkpay,
            salary_sheets_R.sickdays_pay as rsickpay,
            salary_sheets_R.vacation_pay_current as rvacationpay,

            salary_sheets_r.plus_taxed +
                salary_sheets_r.plus_pf_taxed +
                salary_sheets_r.plus_li_taxed +
                salary_sheets_r.plus_hi_taxed as rplus_taxed,

            salary_sheets_r.plus_nottaxed +
                salary_sheets_r.plus_pf_nottaxed +
                salary_sheets_r.plus_li_nottaxed +
                salary_sheets_r.plus_hi_nottaxed as rplus_nottaxed,

            salary_sheets_r.plus_authors_fees as rplus_authors_fees,
            salary_sheets_r.plus_nosai as rplus_nosai,

            salary_sheets_R.total_before_taxes as rtotalpay,

            salary_sheets_R.amount_before_sn as rforsai,

            salary_sheets_r.dnsn_amount as rdnsn_amount,
            salary_sheets_r.ddsn_amount as rddsn_amount,

            salary_sheets_r.iin_exempt_untaxed_minimum as runtaxed_minimum,
            salary_sheets_r.iin_exempt_dependants as riin_exempt_dependants,
            salary_sheets_r.iin_exempt_invalidity as riin_exempt_invalidity,
            salary_sheets_r.iin_exempt_national_movement as riin_exempt_national_movement,
            salary_sheets_r.iin_exempt_retaliation as riin_exempt_retaliation,
            salary_sheets_r.iin_exempt_expenses as riin_exempt_expenses,

            salary_sheets_r.plus_pf_nottaxed as rplus_pf_nottaxed,
            salary_sheets_r.plus_li_nottaxed as rplus_li_nottaxed,
            salary_sheets_r.plus_hi_nottaxed as rplus_hi_nottaxed,

            salary_sheets_r.iin_amount as riin_amount,

            salary_sheets_r.minus_before_iin as rminus_before_iin,
            salary_sheets_r.minus_after_iin as rminus_after_iin,

            salary_sheets_r.pay as rpay,
            salary_sheets_r.advance as radvance,
            salary_sheets_r.payt as rpayt,
            0.0 as rpaid
    
        from salary_sheets
        inner join salary_sheets_r on salary_sheets.id = salary_sheets_r.ids

        where
            (salary_sheets.dt2 between :pdt1 and :pdt2) AND
            ((:pidp is null) OR (salary_sheets_r.idp = :pidp)) AND
            ((:pidam is null) OR (salary_sheets_r.idam = :pidam)) AND
            (salary_sheets.is_temp = 0) AND
            (salary_sheets.kind = 0)

        union all

        select
            iif(:pretidp = 0, null, paylists_R.idp) as ridp,
            iif(:pretidam = 0, null, paylists_R.idam) as ridam,

            iif(:pretyrmt = 0, null, paylists.yr) as ryr,
            iif(:pretyrmt = 0, null, paylists.mt) as rmt,

            0 as rworkhours,
            0 as rworkdays,

            0.0 as rworkpay,
            0.0 as rsickpay,
            0.0 as rvacationpay,

            0.0 as rplus_taxed,

            0.0 as rplus_nottaxed,

            0.0 as rplus_authors_fees,
            0.0 as rplus_nosai,

            0.0 as rtotalpay,

            0.0 as rforsai,

            0.0 as rdnsn_amount,
            0.0 as rddsn_amount,

            0.0 as runtaxed_minimum,
            0.0 as riin_exempt_dependants,
            0.0 as riin_exempt_invalidity,
            0.0 as riin_exempt_national_movement,
            0.0 as riin_exempt_retaliation,
            0.0 as riin_exempt_expenses,

            0.0 as rplus_pf_nottaxed,
            0.0 as rplus_li_nottaxed,
            0.0 as rplus_hi_nottaxed,

            0.0 as riin_amount,

            0.0 as rminus_before_iin,
            0.0 as rminus_after_iin,

            0.0 as rpay,
            0.0 as radvance,
            0.0 as rpayt,
            paylists_r.tpay as rpaid
    
        from paylists
        inner join paylists_r on paylists.id = paylists_r.ids

        where
            (paylists.dt between :pdt1 and :pdt2) AND
            ((:pidp is null) OR (paylists_r.idp = :pidp)) AND
            ((:pidam is null) OR (paylists_r.idam = :pidam))

    )
    group by ridp, ridam, ryr, rmt
    order by ryr, rmt

    into
        :idp,
        :idam,
        :iddep,

        :yr,
        :mt, 

        :workhours,
        :workdays,

        :workpay,
        :sickpay, 
        :vacationpay, 

        :plus_taxed,
        :plus_nottaxed,
        :plus_authors_fees,
        :plus_nosai,

        :totalpay,

        :forsai,

        :dnsn_amount,
        :ddsn_amount,

        :untaxed_minimum,
        :iin_exempt_dependants,
        :iin_exempt_invalidity,
        :iin_exempt_national_movement,
        :iin_exempt_retaliation,
        :iin_exempt_expenses,

        :plus_pf_nottaxed,
        :plus_li_nottaxed,
        :plus_hi_nottaxed,

        :iin_amount,

        :minus_before_iin,
        :minus_after_iin,

        :pay,
        :advance,
        :payt,

        :paid
  do
  begin
    suspend;
  end
end
^

ALTER PROCEDURE SP_REP_AGGREGATE_02(
  PDT1 DATE,
  PDT2 DATE,
  PIDDEP TYPE OF COLUMN DEPARTMENTS.ID /* COLLATE UTF8 - default */,
  PRETYRMT INTEGER,
  PRETIDP INTEGER,
  PRETIDAM INTEGER,
  PRETIDDEP INTEGER)
RETURNS (
  IDP TYPE OF COLUMN SALARY_SHEETS_R.IDP,
  IDAM TYPE OF COLUMN SALARY_SHEETS_R.IDAM,
  IDDEP TYPE OF COLUMN DEPARTMENTS.ID /* COLLATE UTF8 - default */,
  YR TYPE OF COLUMN SALARY_SHEETS.YR,
  MT TYPE OF COLUMN SALARY_SHEETS.MT,
  WORKHOURS TYPE OF COLUMN SALARY_SHEETS_R.FACT_HOURS,
  WORKDAYS TYPE OF COLUMN SALARY_SHEETS_R.FACT_DAYS,
  WORKPAY TYPE OF COLUMN SALARY_SHEETS_R.SALARY,
  SICKPAY TYPE OF COLUMN SALARY_SHEETS_R.SALARY,
  VACATIONPAY TYPE OF COLUMN SALARY_SHEETS_R.SALARY,
  PLUS_TAXED TYPE OF COLUMN SALARY_SHEETS_R.PLUS_TAXED,
  PLUS_NOTTAXED TYPE OF COLUMN SALARY_SHEETS_R.PLUS_NOTTAXED,
  PLUS_AUTHORS_FEES TYPE OF COLUMN SALARY_SHEETS_R.PLUS_AUTHORS_FEES,
  PLUS_NOSAI TYPE OF COLUMN SALARY_SHEETS_R.PLUS_NOSAI,
  TOTALPAY TYPE OF COLUMN SALARY_SHEETS_R.SALARY,
  FORSAI TYPE OF COLUMN SALARY_SHEETS_R.AMOUNT_BEFORE_SN,
  DNSN_AMOUNT TYPE OF COLUMN SALARY_SHEETS_R.DNSN_AMOUNT,
  DDSN_AMOUNT TYPE OF COLUMN SALARY_SHEETS_R.DDSN_AMOUNT,
  UNTAXED_MINIMUM TYPE OF COLUMN SALARY_SHEETS_R.IIN_EXEMPT_UNTAXED_MINIMUM,
  IIN_EXEMPT_DEPENDANTS TYPE OF COLUMN SALARY_SHEETS_R.IIN_EXEMPT_DEPENDANTS,
  IIN_EXEMPT_INVALIDITY TYPE OF COLUMN SALARY_SHEETS_R.IIN_EXEMPT_INVALIDITY,
  IIN_EXEMPT_NATIONAL_MOVEMENT TYPE OF COLUMN SALARY_SHEETS_R.IIN_EXEMPT_NATIONAL_MOVEMENT,
  IIN_EXEMPT_RETALIATION TYPE OF COLUMN SALARY_SHEETS_R.IIN_EXEMPT_RETALIATION,
  IIN_EXEMPT_EXPENSES TYPE OF COLUMN SALARY_SHEETS_R.IIN_EXEMPT_EXPENSES,
  PLUS_PF_NOTTAXED TYPE OF COLUMN SALARY_SHEETS_R.PLUS_PF_NOTTAXED,
  PLUS_LI_NOTTAXED TYPE OF COLUMN SALARY_SHEETS_R.PLUS_LI_NOTTAXED,
  PLUS_HI_NOTTAXED TYPE OF COLUMN SALARY_SHEETS_R.PLUS_HI_NOTTAXED,
  IIN_AMOUNT TYPE OF COLUMN SALARY_SHEETS_R.IIN_AMOUNT,
  MINUS_BEFORE_IIN TYPE OF COLUMN SALARY_SHEETS_R.MINUS_BEFORE_IIN,
  MINUS_AFTER_IIN TYPE OF COLUMN SALARY_SHEETS_R.MINUS_AFTER_IIN,
  PAY TYPE OF COLUMN SALARY_SHEETS_R.PAY,
  ADVANCE TYPE OF COLUMN SALARY_SHEETS_R.ADVANCE,
  PAYT TYPE OF COLUMN SALARY_SHEETS_R.PAYT,
  PAID TYPE OF COLUMN PAYLISTS_R.TPAY)
AS
begin
    for select
        ridp,
        ridam,
        riddep,

        ryr,
        rmt,

        sum(rworkhours) as tworkhours,
        sum(rworkdays) as tworkdays,

        sum(rworkpay) as tworkpay,
        sum(rsickpay) as tsickpay,
        sum(rvacationpay) as tvacationpay,

        sum(rplus_taxed) as tplus_taxed,
        sum(rplus_nottaxed) as tplus_nottaxed,
        sum(rplus_authors_fees) as tplus_authors_fees,
        sum(rplus_nosai) as tplus_nosai,

        sum(rtotalpay) as ttotalpay,

        sum(rforsai) as tforsai,

        sum(rdnsn_amount) as tdnsn_amount,
        sum(rddsn_amount) as tddsn_amount,

        sum(runtaxed_minimum) as tuntaxed_minimum,
        sum(riin_exempt_dependants) as tiin_exempt_dependants,
        sum(riin_exempt_invalidity) as tiin_exempt_invalidity,
        sum(riin_exempt_national_movement) as tiin_exempt_national_movement,
        sum(riin_exempt_retaliation) as tiin_exempt_retaliation,
        sum(riin_exempt_expenses) as tiin_exempt_expenses,

        sum(rplus_pf_nottaxed) as tplus_pf_nottaxed,
        sum(rplus_li_nottaxed) as tplus_li_nottaxed,
        sum(rplus_hi_nottaxed) as tplus_hi_nottaxed,

        sum(riin_amount) as tiin_amount,

        sum(rminus_before_iin) as tminus_before_iin,
        sum(rminus_after_iin) as tminus_after_iin,

        sum(rpay) as tpay,
        sum(radvance) as tadvance,
        sum(rpayt) as tpayt,

        sum(rpaid) as tpaid
    from
    (

        select
            iif(:pretidp = 0, null, salary_sheets_R.idp) as ridp,
            iif(:pretidam = 0, null, salary_sheets_R.idam) as ridam,
            iif(:pretiddep = 0, null, TPOS2.iddep) as riddep,

            iif(:pretyrmt = 0, null, salary_sheets.yr) as ryr,
            iif(:pretyrmt = 0, null, salary_sheets.mt) as rmt,

            salary_sheets_R.fact_hours as rworkhours,
            salary_sheets_R.fact_days as rworkdays,

            salary_sheets_R.salary as rworkpay,
            salary_sheets_R.sickdays_pay as rsickpay,
            salary_sheets_R.vacation_pay_current as rvacationpay,

            salary_sheets_r.plus_taxed +
                salary_sheets_r.plus_pf_taxed +
                salary_sheets_r.plus_li_taxed +
                salary_sheets_r.plus_hi_taxed as rplus_taxed,

            salary_sheets_r.plus_nottaxed +
                salary_sheets_r.plus_pf_nottaxed +
                salary_sheets_r.plus_li_nottaxed +
                salary_sheets_r.plus_hi_nottaxed as rplus_nottaxed,

            salary_sheets_r.plus_authors_fees as rplus_authors_fees,
            salary_sheets_r.plus_nosai as rplus_nosai,

            salary_sheets_R.total_before_taxes as rtotalpay,

            salary_sheets_R.amount_before_sn as rforsai,

            salary_sheets_r.dnsn_amount as rdnsn_amount,
            salary_sheets_r.ddsn_amount as rddsn_amount,

            salary_sheets_r.iin_exempt_untaxed_minimum as runtaxed_minimum,
            salary_sheets_r.iin_exempt_dependants as riin_exempt_dependants,
            salary_sheets_r.iin_exempt_invalidity as riin_exempt_invalidity,
            salary_sheets_r.iin_exempt_national_movement as riin_exempt_national_movement,
            salary_sheets_r.iin_exempt_retaliation as riin_exempt_retaliation,
            salary_sheets_r.iin_exempt_expenses as riin_exempt_expenses,

            salary_sheets_r.plus_pf_nottaxed as rplus_pf_nottaxed,
            salary_sheets_r.plus_li_nottaxed as rplus_li_nottaxed,
            salary_sheets_r.plus_hi_nottaxed as rplus_hi_nottaxed,

            salary_sheets_r.iin_amount as riin_amount,

            salary_sheets_r.minus_before_iin as rminus_before_iin,
            salary_sheets_r.minus_after_iin as rminus_after_iin,

            salary_sheets_r.pay as rpay,
            salary_sheets_r.advance as radvance,
            salary_sheets_r.payt as rpayt,
            0.0 as rpaid
    
        from salary_sheets
        inner join salary_sheets_r on salary_sheets.id = salary_sheets_r.ids

        inner join
        (
            select TPOS1.id, TPOS1.idam, positions_r.iddep
            from positions_r
            inner join 
            (
                select salary_sheets_r.id, salary_sheets_r.idam, max(positions_r.edit_date) as posdt
                from salary_sheets
                inner join salary_sheets_r
                    on salary_sheets.id = salary_sheets_r.ids AND
                        (salary_sheets.dt2 between :pdt1 and :pdt2)
                inner join positions_r
                    on salary_sheets_r.idam = positions_r.ida AND
                        positions_r.edit_date <= salary_sheets.dt2
                group by salary_sheets_r.id, salary_sheets_r.idam
            ) as TPOS1
            on positions_r.ida = TPOS1.idam
        ) as TPOS2
        on salary_sheets_r.id = TPOS2.id

        where
            (salary_sheets.dt2 between :pdt1 and :pdt2) AND
            ((:piddep is null) or (TPOS2.iddep = :piddep)) AND
            (salary_sheets.is_temp = 0) AND
            (salary_sheets.kind = 0)


        union all


        select
            iif(:pretidp = 0, null, paylists_R.idp) as ridp,
            iif(:pretidam = 0, null, paylists_R.idam) as ridam,
            iif(:pretiddep = 0, null, TPOS2.iddep) as riddep,

            iif(:pretyrmt = 0, null, paylists.yr) as ryr,
            iif(:pretyrmt = 0, null, paylists.mt) as rmt,

            0 as rworkhours,
            0 as rworkdays,

            0.0 as rworkpay,
            0.0 as rsickpay,
            0.0 as rvacationpay,

            0.0 as rplus_taxed,

            0.0 as rplus_nottaxed,

            0.0 as rplus_authors_fees,
            0.0 as rplus_nosai,

            0.0 as rtotalpay,

            0.0 as rforsai,

            0.0 as rdnsn_amount,
            0.0 as rddsn_amount,

            0.0 as runtaxed_minimum,
            0.0 as riin_exempt_dependants,
            0.0 as riin_exempt_invalidity,
            0.0 as riin_exempt_national_movement,
            0.0 as riin_exempt_retaliation,
            0.0 as riin_exempt_expenses,

            0.0 as rplus_pf_nottaxed,
            0.0 as rplus_li_nottaxed,
            0.0 as rplus_hi_nottaxed,

            0.0 as riin_amount,

            0.0 as rminus_before_iin,
            0.0 as rminus_after_iin,

            0.0 as rpay,
            0.0 as radvance,
            0.0 as rpayt,
            paylists_r.tpay as rpaid
    
        from paylists
        inner join paylists_r on paylists.id = paylists_r.ids

        inner join
        (
            select TPOS1.id, TPOS1.idam, positions_r.iddep
            from positions_r
            inner join 
            (
                select paylists_r.id, paylists_r.idam, max(positions_r.edit_date) as posdt
                from paylists
                inner join paylists_r
                    on paylists.id = paylists_r.ids AND
                        (paylists.dt between :pdt1 and :pdt2)
                inner join positions_r
                    on paylists_r.idam = positions_r.ida AND
                        positions_r.edit_date <= paylists.dt
                group by paylists_r.id, paylists_r.idam
            ) as TPOS1
            on positions_r.ida = TPOS1.idam
        ) as TPOS2
        on paylists_r.id = TPOS2.id

        where
            (paylists.dt between :pdt1 and :pdt2) AND
            ((:piddep is null) or (TPOS2.iddep = :piddep))


    )
    group by ridp, ridam, riddep, ryr, rmt
    order by ryr, rmt

    into
        :idp,
        :idam,
        :iddep,
        :yr,
        :mt, 

        :workhours,
        :workdays,

        :workpay,
        :sickpay, 
        :vacationpay, 

        :plus_taxed,
        :plus_nottaxed,
        :plus_authors_fees,
        :plus_nosai,

        :totalpay,

        :forsai,

        :dnsn_amount,
        :ddsn_amount,

        :untaxed_minimum,
        :iin_exempt_dependants,
        :iin_exempt_invalidity,
        :iin_exempt_national_movement,
        :iin_exempt_retaliation,
        :iin_exempt_expenses,

        :plus_pf_nottaxed,
        :plus_li_nottaxed,
        :plus_hi_nottaxed,

        :iin_amount,

        :minus_before_iin,
        :minus_after_iin,

        :pay,
        :advance,
        :payt,

        :paid
  do
  begin
    suspend;
  end
end
^


SET TERM ; ^

  
  
UPDATE Params
SET PVALUE = '039'
WHERE PNAME = 'version';
